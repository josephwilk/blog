<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: cucumber | Joseph Wilk]]></title>
  <link href="http://josephwilk.github.io//cucumber/atom.xml" rel="self"/>
  <link href="http://josephwilk.github.io/"/>
  <updated>2016-01-08T15:07:33+00:00</updated>
  <id>http://josephwilk.github.io/</id>
  <author>
    <name><![CDATA[Joseph Wilk]]></name>
    <email><![CDATA[joe@josephwilk.net]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Examples alone are not a Specification]]></title>
    <link href="http://josephwilk.github.io/cucumber/examples-are-not-a-specification.html"/>
    <updated>2012-02-24T14:25:30+00:00</updated>
    <id>http://josephwilk.github.io/cucumber/examples-are-not-a-specification</id>
    <content type="html"><![CDATA[<p>The Gherkin syntax used by Cucumber enforces that Feature files contain scenarios which are examples of the behaviour of a feature. However Gherkin has no constraints on if there is a specification present. Examples are great at helping us understand specifications but <strong>they are not specifications themselves</strong>.</p>

<p>What do we mean when we say specification?</p>

<p><em>definition: A detailed, exact statement of particulars</em></p>

<p>In a Gherkin feature the specification lives here:</p>

<p><img src="/images/blog/2012/02/spec7.png" alt="" /></p>

<p>Lets look at a real example:</p>

<h2>A Feature with just Examples</h2>

<p>A Cucumber example based on a feature  (which I have modified) from the test library Rspec <a href="https://github.com/rspec/rspec-expectations">rspec-expectations</a>:</p>

<pre><code>Feature: be_within matcher
  Scenario: basic usage
  Given a file named "be_within_matcher_spec.rb" with:
  """
  describe 27.5 do
  it { should be_within(0.5).of(27.9) }
  it { should be_within(0.5).of(27.1) }
  it { should_not be_within(0.5).of(28) }
  it { should_not be_within(0.5).of(27) }
  # deliberate failures
  it { should_not be_within(0.5).of(27.9) }
  it { should_not be_within(0.5).of(27.1) }
  it { should be_within(0.5).of(28) }
  it { should be_within(0.5).of(27) }
  end
  """
  When I run `rspec be_within_matcher_spec.rb`
  Then the output should contain all of these:
  | 8 examples, 4 failures                     |
  | expected 27.5 not to be within 0.5 of 27.9 |
  | expected 27.5 not to be within 0.5 of 27.1 |
  | expected 27.5 to be within 0.5 of 28       |
  | expected 27.5 to be within 0.5 of 27       |
</code></pre>

<p>So where is the explanation of what <em>be_within</em> does? If I want to know how <em>be_within</em> works I want a single concise explanation not 5/6 different examples. Examples add value later to validate that specification.</p>

<h2>A Feature with both Specification and Examples</h2>

<p>Lets add back in the specification part of the Feature. <em>drum roll</em></p>

<pre><code>Feature: be_within matcher

  Normal equality expectations do not work well for floating point values.
  Consider this irb session:

      &gt; radius = 3
        =&gt; 3 
      &gt; area_of_circle = radius * radius * Math::PI
        =&gt; 28.2743338823081 
      &gt; area_of_circle == 28.2743338823081
        =&gt; false 

  Instead, you should use the be_within matcher to check that the value
  is within a delta of your expected value:

      area_of_circle.should be_within(0.1).of(28.3)

  Note that the difference between the actual and expected values must be
  smaller than your delta; if it is equal, the matcher will fail.

  Scenario: basic usage
    Given a file named "be_within_matcher_spec.rb" with:
      """
      describe 27.5 do
        it { should be_within(0.5).of(27.9) }
        it { should be_within(0.5).of(27.1) }
        it { should_not be_within(0.5).of(28) }
        it { should_not be_within(0.5).of(27) }

        # deliberate failures
        it { should_not be_within(0.5).of(27.9) }
        it { should_not be_within(0.5).of(27.1) }
        it { should be_within(0.5).of(28) }
        it { should be_within(0.5).of(27) }
      end
      """
    When I run `rspec be_within_matcher_spec.rb`
    Then the output should contain all of these:
      | 8 examples, 4 failures                     |
      | expected 27.5 not to be within 0.5 of 27.9 |
      | expected 27.5 not to be within 0.5 of 27.1 |
      | expected 27.5 to be within 0.5 of 28       |
      | expected 27.5 to be within 0.5 of 27       |
</code></pre>

<p>Thats better, we can get an explanation of why this method exists and how to use it.</p>

<h2>Imagine RSpec without the specification</h2>

<p>I think of a Cucumber feature without a specification much like an Rspec example without any English sentence/description.</p>

<pre><code>context "" do
  it "" do
    user = Factory(:user)
    user.generate_password
    user.activate

    get "/session/new", :user_id =&gt; user.id

    last_response.should == "Welcome #{user.name}"
  end
end
</code></pre>

<p>Feels a little odd doesn&rsquo;t it.</p>

<h2>Cucumber Features as Documentation (for real)</h2>

<p>Rspec is an example of a project that has taken its Cucumber features and <a href="https://www.relishapp.com/rspec">published them as its documentation</a>. Just browse through those features and it quickly highlights how important it is to have a specification as well as examples. Imagine an API with nothing but examples, leaving you the detective work of trying to work out what the thing actually does.</p>

<p>Documentation needs to explain/specify what something does as well provide examples. If you really want anyone to read your feature provide both examples and a specification.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mining Cucumber Features]]></title>
    <link href="http://josephwilk.github.io/cucumber/mining-cucumber-features.html"/>
    <updated>2011-07-26T18:00:23+01:00</updated>
    <id>http://josephwilk.github.io/cucumber/mining-cucumber-features</id>
    <content type="html"><![CDATA[<h2>Failure Rates vs Change Rates</h2>

<p>I&rsquo;ve been spending a lot of  time recently data mining our test suite at Songkick.com. I&rsquo;ve been using our own internal version of <a href="http://www.limited-red.com">www.limited-red.com</a> which records all our test fails for every build on our continuous integration server.</p>

<p>With the Cucumber features I decided to plot the number of times a feature file has been significantly changed vs the number of times the feature has failed in the build. The theory being that a change to a feature file(the plain text specification of behaviour) most often represents a chance in functionality.</p>

<p>So I wrote a simple script checking the number of commits to each feature file.</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">features_folder</span> <span class="o">=</span> <span class="no">ARGV</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span><span class='line'><span class="n">feature_files</span> <span class="o">=</span> <span class="no">Dir</span><span class="o">[&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="c1">#{features_folder}/&lt;em&gt;*/&lt;/em&gt;.feature&amp;rdquo;]&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">feature_files</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">feature_file</span><span class="o">|</span>
</span><span class='line'>  <span class="n">change_logs</span> <span class="o">=</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">git</span> <span class="n">log</span> <span class="o">--</span><span class="n">oneline</span> <span class="c1">#{feature_file} 2&amp;gt;/dev/null&lt;/code&gt;</span>
</span><span class='line'>  <span class="n">change_count</span> <span class="o">=</span> <span class="n">change_logs</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;\</span><span class="n">n</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="c1">#{feature_file},#{change_count}&amp;rdquo;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Feature changes compared with feature failures</h2>

<p>Throwing that into a pretty graph, here is a snapshot of some of the features (I&rsquo;ve changed the name of the features to hide top secret Songkick business).</p>

<p><img src="/images/blog/2011/07/feature_change_vs_failure1.png" alt="" /></p>

<h3>Insights</h3>

<p>Based on this I identified two possible groups of features:</p>

<ul>
<li><p>Features failing more often than the code around them is changing</p></li>
<li><p>Features which are robust and are not breaking when the code around them is changing.</p></li>
</ul>


<p>Further investigation into the suspect features highlighted 3 causes:</p>

<ul>
<li><p>Brittle step definitions</p></li>
<li><p>Brittle features coupled to the UI</p></li>
<li><p>Tests with a high dependency on asynchronous behaviour</p></li>
</ul>


<h2>Holes in the data &ndash; step definitions</h2>

<p>We only recorded the change rate of features files in Git. Features could be broken without ever changing the feature file, for example if a common step definition is broken. Next steps are to identify all the step definitions used by a feature and examine how often the step definitions have changed.</p>

<p>First find the change count for all the step definitions.
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">step_files</span> <span class="o">=</span> <span class="no">Dir</span><span class="o">[&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">features</span><span class="o">/&lt;</span><span class="n">em</span><span class="o">&gt;*/&lt;</span><span class="sr">/em&gt;_steps.rb&amp;rdquo;]&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span><span class="n">step_files</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">step_file</span><span class="o">|</span>
</span><span class='line'>  <span class="n">change_logs</span> <span class="o">=</span> <span class="o">&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">git</span> <span class="n">log</span> <span class="o">--</span><span class="n">oneline</span> <span class="c1">#{step_file} 2&amp;gt;/dev/null&lt;/code&gt;</span>
</span><span class='line'>  <span class="n">change_count</span> <span class="o">=</span> <span class="n">change_logs</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;\</span><span class="n">n</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span><span class="o">.</span><span class="n">count</span>
</span><span class='line'>  <span class="nb">puts</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="c1">#{step_file},#{change_count}&amp;rdquo;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Then working out what step definitions a feature uses.  We can do this by running cucumber with the json formatter and match up step definitions (and hence step definition files) to feature files:</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">json</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;&lt;code&gt;cucumber features --dry-run --format json --out .json.out&lt;/</span><span class="n">code</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">features_json</span> <span class="o">=</span> <span class="no">JSON</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="no">File</span><span class="o">.</span><span class="n">read</span><span class="p">(</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="o">.</span><span class="n">json</span><span class="o">.</span><span class="n">out</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;))</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;stats = Hash.new{|h,k| h[k] = []}</span>
</span><span class='line'><span class="sr">features_json[&amp;lsquo;features&amp;rsquo;].each do |feature|</span>
</span><span class='line'><span class="sr">  feature_name = feature[&amp;lsquo;name&amp;rsquo;]</span>
</span><span class='line'><span class="sr">  #The JSON does not have the feature file. Find the file via the feature name. Messy</span>
</span><span class='line'><span class="sr">  feature_file = &lt;code&gt;egrep -riE &quot;feature:? *</span><span class="si">#{</span><span class="n">feature_name</span><span class="si">}</span><span class="sr">&quot; features/</span><span class="o">&lt;</span><span class="sr">/code&gt;.split(&amp;ldquo;:&amp;rdquo;)[0]</span>
</span><span class='line'><span class="sr">  feature[&amp;ldquo;elements&amp;rdquo;].each do |element|&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="n">element</span><span class="o">[</span><span class="s2">&quot;steps&quot;</span><span class="o">].</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">step</span><span class="o">|</span>
</span><span class='line'>  <span class="n">file_location</span> <span class="o">=</span> <span class="n">step</span><span class="o">[</span><span class="s1">&#39;match&#39;</span><span class="o">][</span><span class="s1">&#39;location&#39;</span><span class="o">]</span>
</span><span class='line'>  <span class="n">file</span><span class="p">,</span> <span class="n">_</span> <span class="o">=</span> <span class="n">file_location</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot;:&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="k">if</span> <span class="n">file</span> <span class="o">=~</span> <span class="sr">/_steps\.rb$/</span>
</span><span class='line'>    <span class="n">stats</span><span class="o">[</span><span class="n">feature_file</span><span class="o">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">stats</span><span class="o">[</span><span class="n">feature_file</span><span class="o">]</span> <span class="o">+</span> <span class="o">[</span><span class="n">file</span><span class="o">]</span><span class="p">)</span><span class="o">.</span><span class="n">uniq</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="o">&lt;</span><span class="sr">/code&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'><span class="n">pp</span> <span class="n">stats</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Change rate vs Failure rate with step definition changes</h2>

<p>Combining those two bits of data we can now add to our original graph the step definition change rates for a feature.
<img src="/images/blog/2011/07/with_steps.png" alt="" /></p>

<p>We also can examine an individual break down of the step definition change rates for a feature:</p>

<p><img src="/images/blog/2011/07/step_def.png" alt="" /></p>

<h2>Holes in using the step definition change rate</h2>

<p>The step definition changes from git are at the file level (the *_step.rb file) so a change in git may not touch a step definition used by a feature. Hence we may be counting changes which are not relevant for a feature. Further work would be to examine the git diffs and check if a change touched a step definition used by a feature.</p>

<h2>Conclusions</h2>

<p>Our tests hide lots of interesting information that can provide evidence of areas we can make improvements. It&rsquo;s important to realise that like anything in statistics our data mining does not yield facts, just suggestions. At Songkick we are already mining this information with Cucumber and using it to help improve and learn about our tests.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Page Object Pattern]]></title>
    <link href="http://josephwilk.github.io/cucumber/page-object-pattern.html"/>
    <updated>2011-03-09T12:00:23+00:00</updated>
    <id>http://josephwilk.github.io/cucumber/page-object-pattern</id>
    <content type="html"><![CDATA[<h2>What Is the Page Object Pattern?</h2>

<p>The Page model is a pattern that maps a UI page to a class, where for example a page could be a HTML page. The functionality to interact or make assertions about that that page is captured within the Page class. Then these methods may be called by a test. So ultimately we are introducing a gatekeeper to the GUI of a page.</p>

<p><img src="/images/blog/2010/12/page-model1.png" alt="" /></p>

<h2>Why use the Page Object Pattern?</h2>

<ul>
<li><p>Readable dsl for tests</p></li>
<li><p>Promotes Reuse</p></li>
<li><p>Centralise UI coupling &ndash; One place to make changes around the UI.</p></li>
</ul>


<h2>Implementing the Page Pattern in Cucumber</h2>

<p>Within Cucumber there are two main ways we can encapsulate the page UI:</p>

<h3>The Page Object Pattern</h3>

<p><em>features/pages/login_page.rb</em>
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">LoginPage</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">login</span><span class="p">(</span><span class="n">user</span><span class="p">,</span> <span class="n">password</span><span class="p">)</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;fill_in :user, user</span>
</span><span class='line'><span class="sr">fill_in :password password</span>
</span><span class='line'><span class="sr">click &#39;login&#39;</span>
</span><span class='line'><span class="sr">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;</span><span class="sr">/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  end&lt;/</span><span class="nb">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="nb">p</span><span class="o">&gt;</span>  <span class="k">def</span> <span class="nf">visit</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;pre&gt;&lt;code&gt;visit &quot;/</span><span class="n">login</span><span class="s2">&quot;</span>
</span><span class='line'><span class="s2">&lt;/code&gt;&lt;/pre&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="s2">&lt;p&gt;  end</span>
</span><span class='line'><span class="s2">end </span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><em>features/step_definitions/user_steps.rb</em>
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Given</span> <span class="sr">/^I login with username &amp;ldquo;Joseph&amp;rdquo; and password &amp;ldquo;cuker&amp;rdquo;$/</span> <span class="k">do</span> <span class="o">|</span><span class="n">username</span><span class="p">,</span> <span class="n">password</span><span class="o">|</span>
</span><span class='line'>  <span class="n">login_page</span> <span class="o">=</span> <span class="no">LoginPage</span><span class="o">.</span><span class="n">new</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="sr">&lt;p&gt;  login_page.visit</span>
</span><span class='line'><span class="sr">  login_page.login(username, password)</span>
</span><span class='line'><span class="sr">end </span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>The Page Step definition Pattern</h3>

<p>Cucumber step definitions are all defined at the same scope, but we use folders and files to create logical organisation. We can create folders for UI step definitions and domain step definitions.</p>

<ul>
<li><p>features/domain/step_definitions/*</p></li>
<li><p>features/ui/step_definitions/*</p></li>
</ul>


<p>We create a step definition file mapping to a UI page.
<em>features/ui/step_definitions/login_page_steps.rb</em>
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Given</span> <span class="sr">/^I login with username &amp;ldquo;Joseph&amp;rdquo; and password &amp;ldquo;cuker&amp;rdquo;$/</span> <span class="k">do</span> <span class="o">|</span><span class="n">username</span><span class="p">,</span> <span class="n">password</span><span class="o">|</span>
</span><span class='line'>  <span class="n">fill_in</span> <span class="ss">:user</span><span class="p">,</span> <span class="n">user</span>
</span><span class='line'>  <span class="n">fill_in</span> <span class="ss">:password</span> <span class="n">password</span>
</span><span class='line'>  <span class="n">click</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">login</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h2>Whats the right way to encapsulate the UI?</h2>

<p>Just using step definitions for organisation within a project can have a number of problems:</p>

<p><strong>Global scope within Cucumbers world</strong>
Instance variables are global across all step definitions</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="no">Given</span> <span class="sr">/^I mess with scope$/</span> <span class="k">do</span>
</span><span class='line'>  <span class="vi">@this_can_be_seen_by_every_other_step</span> <span class="o">=</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">uh</span> <span class="n">oh</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p><strong>Managed and run through Cucumber</strong>
No easy way to be reused outside of Cucumber or test in isolation. By isolating the test code we can easily provide adapters for reuse in different test frameworks (for example similar to what <a href="https://github.com/bmabey/email-spec">email-spec</a> does).</p>

<p>The Page Object pattern (and adding another layer of abstraction) has a couple of nice properties:</p>

<ul>
<li><p>Bounded scope (if you use your classes/objects nicely)</p></li>
<li><p>Isolated units that can be invoked and controlled independently of overarching testing framework</p></li>
</ul>


<h2>Should I be using the Page Object Pattern?</h2>

<p>Yes, No, Maybe.</p>

<p>Extra layers of abstraction introduce complexity and so the Page Object Pattern should be used carefully when there is a sufficiently high burden of maintenance (which usually means lots of step definitions).</p>

<p>Its important outside of the Page object pattern to realise the weaknesses of just using step definitions as your only modelling tool. Irrelevant of what metaphor you decide to organise around it&rsquo;s a good habit to push the code out of the step definitions.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Cucumber Interview for The Software Development Times ]]></title>
    <link href="http://josephwilk.github.io/cucumber/cucumber-interview-for-software-development-times.html"/>
    <updated>2010-09-13T23:26:01+01:00</updated>
    <id>http://josephwilk.github.io/cucumber/cucumber-interview-for-software-development-times</id>
    <content type="html"><![CDATA[<p>I was recently interviewed about Cucumber and whether it solves the problem of getting business people writing specifications.
You can read the article on SDTimes:
<a href="http://www.sdtimes.com/link/34631">Cucumber puts plain English on requirements</a></p>

<p>I got a little bit carried away in answering some of the questions posed and Alex Handy was kind enough to post all my responses in detail:
<a href="http://www.sdtimes.com/blog/1687">Peeling Cucumber</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Limited Red Demo with Cucumber]]></title>
    <link href="http://josephwilk.github.io/cucumber/limited-red-demo-with-cucumber.html"/>
    <updated>2010-09-09T20:50:45+01:00</updated>
    <id>http://josephwilk.github.io/cucumber/limited-red-demo-with-cucumber</id>
    <content type="html"><![CDATA[<p>A demonstration of working with <a href="http://www.limited-red.com">Limited Red</a> (previously known as CukeMax) on a <a href="http://cukes.info/">Cucumber</a> project.</p>

<p><a href="http://vimeo.com/14838359">Using Limited Red with a cucumber project</a> from <a href="http://vimeo.com/user1227884">Joseph Wilk</a></p>
]]></content>
  </entry>
  
</feed>
