<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: art | Joseph Wilk]]></title>
  <link href="http://blog.josephwilk.net/art/atom.xml" rel="self"/>
  <link href="http://blog.josephwilk.net/"/>
  <updated>2017-01-04T11:45:51+00:00</updated>
  <id>http://blog.josephwilk.net/</id>
  <author>
    <name><![CDATA[Joseph Wilk]]></name>
    <email><![CDATA[joe@josephwilk.net]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Audio Fingerprint Smudges]]></title>
    <link href="http://blog.josephwilk.net/art/audio-fingerprint-smudges.html"/>
    <updated>2016-12-31T12:00:00+00:00</updated>
    <id>http://blog.josephwilk.net/art/audio-fingerprint-smudges</id>
    <content type="html"><![CDATA[<p>Procedurally generating music, scoring generations based on an audio service (like SoundCloud) identifying it as an existing song/artist. The more famous the track/artist the better.</p>




<p>Machines identifying audio tend to:</p>




<ul>
<li>Reduce the audio features to their essence (facilitating fast lookup or accuracy on a sliding scale).</li>
<li>Rely on computer vision techniques to create audio fingerprints.</li>
<li>Account for differing audio quality and ambient background noise.</li>
<li>Use a training set of sane music to teach the algorithm to recognise music.</li>
</ul>




<p><small>Audiofinger print generated by <a href="https://github.com/acoustid/chromaprint">Chromaprint</a>:</small><br/>
<img src="http://blog.josephwilk.net/images/heavenflac.png" alt="Example audio fingerprint generated by Chromaprint for: Heaven by UNKLE" /></p>




<p>We use these propeties to guide us in creating new music for machines that explores the smudged edges around machine listening. Highlighting how differently humans and machines identify music. And for fun.</p>




<p>To try and match our generative audio to songs we will use a number of music services and some open-source audio fingerprinting tools. Most commercial audio fingerprinting algorithms are secret and patented up to the eyeballs. So there is a lot of trial and errors. Some services used to evalute a song match:</p>




<ul>
<li>Soundcloud (copyright detection)</li>
<li>Youtube (copyright detection)</li>
<li>Shazam (audio lookup)</li>
<li>Chromaprint (Open-source audio fingerpinter)</li>
</ul>




<h2>Music for Machines</h2>




<p>All generated tracks have comments exactly when a song was detected.</p>




<p><strong>Warning: The audio clips are designed for machines and not your weak human ears <img alt="ear" width="10" height="10" src="https://assets-cdn.github.com/images/icons/emoji/unicode/1f442.png">. Hence keep your volume low before listening</strong></p>




<p>Audio generations by <a href="https://twitter.com/Finger_smudger">@Finger_smudger</a></p>




<h3>Generation #1 &ndash; 1467636802259</h3>




<p>Artists/Songs identified:</p>




<ul>
<li>Sophonic Media &ndash; Make It Shine</li>
<li>Pachanga Boys &ndash; Time</li>
<li>Johan Vilborg &ndash; Second Wind (Illuminor Remix)</li>
<li>Oelki &ndash; Galileo</li>
<li>Lipps, Inc &ndash; Funkytown</li>
<li>Spaceanddisco &ndash; Nights</li>
<li>Matt Fax &ndash; Voyage orignal mix Bullistik</li>
<li>Katty Perry &ndash; Birthday (Cash Cash Remix)</li>
</ul>




<iframe width="100%" height="200" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/272121435&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false&amp;visual=true"></iframe>


<br/><br/>




<h3>Generation #1.1 &ndash; 1469483772764</h3>




<p>Artists/Songs identified:</p>




<ul>
<li>George Michael &ndash; A Different Corner</li>
<li>Dezt &ndash; Last Year</li>
<li>Axiuw &ndash; Be Yourself (Original Mix)</li>
<li>Duran Duran &ndash; Thank You</li>
</ul>




<iframe width="100%" height="200" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/275449291&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false&amp;visual=true"></iframe>


<br/><br/>




<h3>Generation #2.0 &ndash; 1470683054969</h3>




<p>Artist/Songs identified:</p>




<ul>
<li>Dimension &ndash; Mangata</li>
<li>Michael Jackson &ndash; You Are Not Alone (tempo 60 bpm / B major)</li>
</ul>




<iframe width="100%" height="200" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/277511054&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false&amp;visual=true"></iframe>


<br/><br/>




<h3>Generation #2.0 &ndash; 1470700413305</h3>




<p>Artist/Songs identified:</p>




<ul>
<li>T-Pain Vs Chuckie Feat. Pitbull &ndash; Its Not You (Its Me)</li>
<li>Pink Floyd &ndash; Cymbaline</li>
</ul>




<iframe width="100%" height="200" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/277510353&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false&amp;visual=true"></iframe>


<br/><br/>




<h2>Machines listening with ambient background noise</h2>




<p>While I experimented with lots of different services the above examples were most successful when using Shazam for identification. This focuses on operating in noisy environments and identifying a sound as quickly as possible based only on partial song information. This tolerance makes it easy to get Shazam to mis-match audio to songs.</p>




<p>The other services also had a nasty habit of banning new accounts uploading what appeared to be copyrighted infringing content (who would have thought!). Which makes the whole mass procedural generation somewhat challenging.</p>




<p>Shazam has a <a href="https://www.shazam.com/">desktop app</a> which will run detection on audio for 8 hours continuously. So over that time we generate a large set of audio and pick the winners from each generation.</p>




<h3>Overtone synths &amp; score generation</h3>




<p>Using <a href="https://github.com/overtone/overtone">Overtone</a> and Clojure a single audio generation works by:</p>




<ol>
<li><p>Dynamically generating Overtone synths using generative testing framework <a href="https://github.com/clojure/test.check">test.check</a>.
Using QuickCheck style generators is a cheap way of exploring a permutation space given grammar rules, like those of a synth definition in Overtone. Supports selection of:

<ul>
<li>Audio wave (potentially many combined)</li>
<li>Envelope type</li>
<li>Effects (reverb/echo/pitchshift/delays)</li>
<li>Filters (low pass/high pass)<br/>
The various properties of the audio units are selected randomly.</li>
</ul></p>
</li>
<li><p>Dynamically generating a score varying:

<ul>
<li>Clock tempo</li>
<li>Note lengths</li>
<li>Root note / scale</li>
<li>Octaves</li>
</ul>
</p>
</li>
<li><p>Dynamically generating synth control parameters:

<ul>
<li>Distortion</li>
<li>Changing audio wave (sin/saw/triangle/square/etc)</li>
</ul>
</p>
</li>
<li><p>Running for 3 minutes with a random chance of mutation to score and parameters.</p></li>

<li>Store state of a generation for future evolution. We store the state and mutations as edn: <a href="https://gist.githubusercontent.com/josephwilk/410f68a857f81e8073815999bf1a4b4f/raw/78319023141b18dfe90ab1183ecc13b30c4def33/1470683054969.edn">Example state for one generation</a></p></li>

<li><p>Each generation scored based on number of Shazam matches (scraped from Notification alerts on OS X).</p></li>
<li><p>Each generation scored by popularity of artists matched (manually üòê).</p></li>
</ol>


<br/>


<pre><code>&lt;p&gt;To avoid any background noise or messing with microphones we use &lt;a href="https://github.com/mattingalls/Soundflower"&gt;SoundFlower&lt;/a&gt; with the following setup:&lt;/p&gt;
&lt;p&gt; Overtone main audio -&gt;üîà Soundflower input device&lt;br/&gt;
    Soundflower output device -&gt;üîà Shazam Desktop.&lt;/p&gt;
</code></pre>

<h2>Conclusion</h2>




<p>There is a clear difference in the strength of accuracy when it comes to fingerprinting audio for copyright infringement. It's noticeable that Soundcloud or YouTube are matching when  processing the entire track (even though it will check for partial matches) while Shazam focuses on as small a segment as possible LIVE. Open-source alternatives (like Chromaprint) while useful, provided little help tricking the commercial services.</p>




<p>Coming back to Shazam, what actually made the tracks match remains somewhat of a mystery. If we look at one example "Michael Jackson - You Are Not Alone" our generative score was not even in the same scale or tempo! We can identify things that made it hard to match, for example adding drums patterns killed off all matches. More layers of audio, more permutations to explore.</p>




<p>One thing is clear, the way machines learn and the specialisation on a single application rules out a whole subset of sound that is unlikely to enter the realm of music. Hence for the creators of the algorithms, a mismatch of this type is of little relevance.</p>




<p>This lost ghost music is perhaps just for the machines.</p>




<h2>Source code</h2>




<ul>
<li><p><strong>Finger Smudge</strong>: <a href="https://github.com/josephwilk/finger-smudge">https://github.com/josephwilk/finger-smudge</a>.
Core engine behind generating audio and container for all failed and future audio fingerprint smudge experiments:</p></li>
<li><p><strong>Synthatron</strong>: <a href="https://github.com/josephwilk/synthatron">https://github.com/josephwilk/synthatron</a>.
Overtone Synth generator using <code>test.check</code>:</p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Visuals with Overtone and Shadertone]]></title>
    <link href="http://blog.josephwilk.net/art/overtone-shader-visuals.html"/>
    <updated>2016-01-08T14:58:00+00:00</updated>
    <id>http://blog.josephwilk.net/art/overtone-shader-visuals</id>
    <content type="html"><![CDATA[<p>Exploring techniques for creating live coded performances with Overtone and <a href="https://www.opengl.org/wiki/Fragment_Shader">OpenGL Fragment Shaders</a>. Much learnt from my work performing as <a href="https://vimeo.com/replelectric">Repl Electric</a>. All my shader source code for these performances is open: <a href="https://github.com/repl-electric/cassiopeia/tree/master/resources/shaders">https://github.com/repl-electric/cassiopeia/tree/master/resources/shaders</a></p>




<p><img src="http://blog.josephwilk.net/images/end-of-buffer.png" alt="shaders"/></p>




<p>To bring OpenGl to Clojure I use <a href="https://github.com/overtone/shadertone">Shadertone</a> written by <a href="https://github.com/rogerallen">rogerallen</a>. This utilises LWJGL (Java Light Weight Java Game Library <a href="https://www.lwjgl.org">https://www.lwjgl.org</a>).</p>




<h3>The Bridge between Clojure and Shaders</h3>




<p>A vital feature of Shadertone is a map between Clojure atoms and shader Uniforms. What is a shader Uniform? Well think of it as a read-only global variable in your shader. A Clojure watcher ensures any updates to your Clojure atom persist into your Uniform. A little clunky but all uniforms start with the letter <code>i</code>.</p>




<p>The shader:</p>


<p><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">uniform</span> <span class="kt">float</span> <span class="n">iExample</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>And in Clojure</p>


<p><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">example-weight</span> <span class="p">(</span><span class="nf">atom</span> <span class="mf">0.5</span><span class="p">))</span>
</span><span class='line'><span class="p">(</span><span class="nf">shadertone/start-fullscreen</span> <span class="s">&quot;resources/shaders/example.glsl&quot;</span>
</span><span class='line'>  <span class="ss">:user-data</span> <span class="p">{</span><span class="s">&quot;iExample&quot;</span> <span class="nv">example-weight</span><span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;;iExample Uniform will also be updated.</span>
</span><span class='line'><span class="p">(</span><span class="nf">reset!</span> <span class="nv">example-weight</span> <span class="mf">0.2</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>Live editing shaders</h2>




<p>When a shader file is edited Shadertone is watching the file (using <a href="https://github.com/ibdknox/watchtower">watchtower</a>) and will reload/recompile the changed file. This results in a slight freeze as the new code is run (This might be down to my graphics card).
Hence most of the time I prefer alternatives to live editing the shader to create smoother transitions.</p>




<h2>Injecting movement</h2>




<p>To make static images move we need a continuously changing value.</p>




<p>Shadertone gives us <code>iGlobalTime</code> using the number of seconds since the shader was started:</p>


<p><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">uniform</span> <span class="n">iGlobalTime</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span>
</span><span class='line'>  <span class="c1">//Use the continuously changing time signal as the value for a color.  </span>
</span><span class='line'>  <span class="n">gl_FragColor</span> <span class="o">=</span> <span class="n">vec4</span><span class="p">(</span><span class="n">sin</span><span class="p">(</span><span class="n">iGlobalTime</span><span class="p">)</span><span class="o">*</span><span class="mf">0.5</span><span class="o">+</span><span class="mf">0.5</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Putting a continuously changing value through a function like sin/cos is the
bread and butter of creating animations with shaders.</p>




<h2>Randomness</h2>




<p>We often need a cheap and fast way to generate random floats in Shaders. Without persistent state and preservation of a seed it can be difficult. One solution is to use a noise image and the current pixel coordinates as an index into the image for a  float value.</p>




<p>Shadertone supports loading custom textures into your shaders:</p>


<p><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">shadetone/start</span> <span class="s">&quot;shaders/example.glsl&quot;</span>
</span><span class='line'>         <span class="ss">:textures</span> <span class="p">[</span><span class="s">&quot;/josephwilk/textures/noise.png&quot;</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>The noise texture:</p>




<p><img src="http://raw.githubusercontent.com/josephwilk/shaderview/master/bin/data/textures/tex10.png" /></p>




<p>And finally the shader:</p>


<p><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="c1">//Turning the current pixel coordinates (uv) into a random float. </span>
</span><span class='line'><span class="n">vec2</span> <span class="n">uv</span> <span class="o">=</span> <span class="n">gl_FragCoord</span><span class="p">.</span><span class="n">xy</span> <span class="o">/</span> <span class="n">iResolution</span><span class="p">.</span><span class="n">xy</span><span class="p">;</span>
</span><span class='line'><span class="k">return</span> <span class="nf">texture2D</span><span class="p">(</span><span class="n">iChannel0</span><span class="p">,</span> <span class="n">vec2</span><span class="p">(</span><span class="n">uv</span><span class="p">)</span><span class="o">/</span><span class="mf">256.0</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>Composing visual effects</h2>




<p>I attach a weight to each function or visual phase of the shader. Through this we can select which visual effect is visible or combine multiple effects. Its a bit messy, since I have all my functions in a single shader file. I&rsquo;ve not explored including of external files with shaders.</p>


<p><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">uniform</span> <span class="kt">float</span> <span class="n">iCircularWeight</span><span class="p">;</span>
</span><span class='line'><span class="n">uniform</span> <span class="kt">float</span> <span class="n">iPopulationWeight</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">vec4</span> <span class="nf">circular</span><span class="p">(){&hellip;}</span>
</span><span class='line'><span class="n">vec4</span> <span class="nf">population</span><span class="p">(){..}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span>
</span><span class='line'>  <span class="n">vec4</span> <span class="n">circleResult</span>     <span class="o">=</span> <span class="n">vec4</span><span class="p">(</span><span class="mf">0.0</span><span class="p">);</span>
</span><span class='line'>  <span class="n">vec4</span> <span class="n">populationResult</span> <span class="o">=</span> <span class="n">vec4</span><span class="p">(</span><span class="mf">0.0</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">iCircularWeight</span> <span class="o">&gt;</span> <span class="mf">0.0</span><span class="p">){</span>
</span><span class='line'>    <span class="n">circleResult</span> <span class="o">=</span> <span class="n">circular</span><span class="p">()</span> <span class="o"><em></span> <span class="n">iCircularWeight</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">iPopulationWeight</span> <span class="o">&gt;</span> <span class="mf">0.0</span><span class="p">){</span>
</span><span class='line'>    <span class="n">populationResult</span> <span class="o">=</span> <span class="n">population</span><span class="p">()</span> <span class="o"></em></span> <span class="n">iPopulationWeight</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">gl_FragColor</span> <span class="o">=</span> <span class="p">(</span><span class="n">populationResult</span> <span class="o">+</span> <span class="n">circleResult</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>And within Clojure:</p>


<p><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">circular-w</span> <span class="p">(</span><span class="nf">atom</span> <span class="mf">1.0</span><span class="p">))</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">population-w</span> <span class="p">(</span><span class="nf">atom</span> <span class="mf">1.0</span><span class="p">))</span>
</span><span class='line'><span class="p">(</span><span class="nf">shadertone/start-fullscreen</span> <span class="s">&quot;resources/shaders/example.glsl&quot;</span>
</span><span class='line'>  <span class="ss">:user-data</span> <span class="p">{</span><span class="s">&quot;iCircularWeight&quot;</span> <span class="nv">circular-w</span>
</span><span class='line'>              <span class="s">&quot;iPopulationWeight&quot;</span> <span class="nv">population-w</span><span class="p">})</span>
</span><span class='line'><span class="p">(</span><span class="nf">reset!</span> <span class="nv">circular-weight</span> <span class="mf">1.0</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>Synchronisation</h2>




<p>Shadertone uses the seconds since start (<code>iGlobalTime</code>) while Overtone via Supercollider uses the soundcard&rsquo;s clock. Hence there is no guarantee these two sources will be in sync.</p>




<p>Replacing iGlobalTime is the only option. We create a special synth called <code>data-probes</code> which sole function is to transfer data from the Supercollider world to the Clojure world. Overtone provides a Supercollider to Clojure binding called a <code>tap</code>. We add a tap into our Overtone synth which is polling our global timing signal (this powers all synths and is how we co-ordinate everything).</p>


<p><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">defsynth</span> <span class="nv">data-probes</span> <span class="p">[</span><span class="nv">timing-signal-bus</span> <span class="mi">0</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">beat-count</span> <span class="p">(</span><span class="nf">in</span><span class="ss">:kr</span> <span class="nv">timing-signal-bus</span><span class="p">)</span>
</span><span class='line'>        <span class="nv">_</span>  <span class="p">(</span><span class="nf">tap</span> <span class="s">&quot;global-beat-count&quot;</span> <span class="mi">60</span><span class="p">(</span><span class="nf">a2k</span> <span class="nv">beat-count</span><span class="p">))</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">out</span> <span class="mi">0</span> <span class="mi">0</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">active-data-probes</span> <span class="p">(</span><span class="nf">data-probes</span> <span class="p">(</span><span class="ss">:count</span> <span class="nv">time/beat-1th</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">shadertone/start-fullscreen</span> <span class="s">&quot;resources/shaders/example.glsl&quot;</span>
</span><span class='line'>  <span class="ss">:user-data</span>
</span><span class='line'>  <span class="c1">;;An atom wrapping the tap and the running synth instance</span>
</span><span class='line'>   <span class="s">&quot;global-beat-count&quot;</span> <span class="p">{</span><span class="s">&quot;iGlobalBeatCount&quot;</span> <span class="p">(</span><span class="nf">atom</span> <span class="p">{</span><span class="ss">:synth</span> <span class="nv">active-data-probes</span> <span class="ss">:tap</span> <span class="s">&quot;global-beat-count&quot;</span><span class="p">})})</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Using our <code>iGlobalBeatCount</code> in our shader now means anything requiring a continuously increasing value flows to our beat.</p>




<h2>Shaders &amp; global mutable state</h2>




<p>Persistent mutable state between executions is not possible in OpenGL Shaders. Uniforms are read-only.</p>




<p>Lets look at an example. On a drum hit I want the color of a visual to change and <em>persist</em> until the next drum hit.
The drum signal is 1 for a hit 0 for silence:</p>


<p><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">[</span><span class="mi">1</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">1</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">1</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>The current value based on the global clock is passed into the Shader as the iBeat Uniform.</p>


<p><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">uniform</span> <span class="kt">float</span> <span class="n">iBeat</span><span class="p">;</span>
</span><span class='line'><span class="kt">float</span> <span class="n">color</span> <span class="o">=</span> <span class="mf">0.0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">vec4</span> <span class="n">function</span> <span class="nf">showColor</span><span class="p">(){</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">iBeat</span> <span class="o">==</span> <span class="mf">1.0</span><span class="p">){</span>
</span><span class='line'>    <span class="n">color</span> <span class="o">+=</span> <span class="mf">1.0</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">vec4</span><span class="p">(</span><span class="n">color</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Will return:</p>


<p><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">vec4</span><span class="p">(</span><span class="mf">1.0</span><span class="p">);</span>
</span><span class='line'><span class="n">vec4</span><span class="p">(</span><span class="mf">0.0</span><span class="p">);</span>
</span><span class='line'><span class="n">vec4</span><span class="p">(</span><span class="mf">0.0</span><span class="p">);</span>
</span><span class='line'><span class="n">vec4</span><span class="p">(</span><span class="mf">0.0</span><span class="p">);</span>
</span><span class='line'><span class="n">vec4</span><span class="p">(</span><span class="mf">1.0</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>What we were after is actually:</p>


<p><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">vec4</span><span class="p">(</span><span class="mf">1.0</span><span class="p">);</span>
</span><span class='line'><span class="n">vec4</span><span class="p">(</span><span class="mf">1.0</span><span class="p">);</span>
</span><span class='line'><span class="n">vec4</span><span class="p">(</span><span class="mf">1.0</span><span class="p">);</span>
</span><span class='line'><span class="n">vec4</span><span class="p">(</span><span class="mf">1.0</span><span class="p">);</span>
</span><span class='line'><span class="n">vec4</span><span class="p">(</span><span class="mf">2.0</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>My solution is to move to Clojure where mutable state using atoms is simple.</p>




<p>Our timing is guided by Supercollider and a global clock. The value of our kick buffer at anyone time is only known inside the synth and hence inside Supercollider. But if we want to have mutable state we need access to this value in Clojure. So we create a custom synth that taps the value of the kick buffer based on the global clock signal.</p>


<p><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">defsynth</span> <span class="nv">drum-data-probe</span> <span class="p">[</span><span class="nv">kick-drum-buffer</span> <span class="nv">timing-signal-bus</span> <span class="mi">0</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">beat-count</span> <span class="p">(</span><span class="nf">in</span><span class="ss">:kr</span> <span class="nv">timing-signal-bus</span><span class="p">)</span>
</span><span class='line'>    <span class="nv">drum-beat</span> <span class="p">(</span><span class="nf">buf-rd</span><span class="ss">:kr</span> <span class="mi">1</span> <span class="nv">kick-drum-buffer</span> <span class="nv">beat-count</span><span class="p">)</span>
</span><span class='line'>    <span class="nv">_</span>  <span class="p">(</span><span class="nf">tap</span> <span class="s">&quot;drum-beat&quot;</span> <span class="mi">60</span> <span class="p">(</span><span class="nf">a2k</span> <span class="nv">drum-beat</span><span class="p">))])</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">out</span> <span class="mi">0</span> <span class="mi">0</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defonce </span><span class="nv">kick-drum-buffer</span> <span class="p">(</span><span class="nf">buffer</span> <span class="mi">256</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;;Create the synth with the &quot;drum-beat&quot; tap</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">drum-data-probe</span> <span class="p">(</span><span class="nf">drum-data-probe</span> <span class="nv">kick-drum-buffer</span> <span class="p">(</span><span class="ss">:count</span> <span class="nv">time/beat-1th</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;;Bind the running synth and the tap</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">kick-atom</span> <span class="p">(</span><span class="nf">atom</span> <span class="p">{</span><span class="ss">:synth</span> <span class="nv">drum-data-probe</span> <span class="ss">:tap</span> <span class="s">&quot;drum-beat&quot;</span><span class="p">}))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;;Extract the tap atom</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">kick-tap</span> <span class="p">(</span><span class="nf">get-in</span> <span class="p">(</span><span class="ss">:synth</span> <span class="o">@</span><span class="nv">kick-atom</span><span class="p">)</span> <span class="p">[</span><span class="ss">:taps</span> <span class="p">(</span><span class="ss">:tap</span> <span class="o">@</span><span class="nv">kick-atom</span><span class="p">)]))</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Now in the Clojure world its simple to watch our tap atom and hence get alerted when it changes value. Overtone is dealing with the magic of updating the atom under the covers, the watcher is a nice implementation independent way of hooking into this. We now know the value of our kick buffer in Clojure. If we use another atom as our accumulator we can update it when the tap atom changes. Finally pushing this new accumulator to the Shader.</p>


<p><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">active-color</span> <span class="p">(</span><span class="nf">atom</span> <span class="mf">0.0</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">add-watch</span> <span class="nv">kick-tap</span> <span class="ss">:cell-color</span>
</span><span class='line'>  <span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv"><em></span> <span class="nv"></em></span> <span class="nv">old</span> <span class="nv">new</span><span class="p">]</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">when </span><span class="p">(</span><span class="nb">and </span><span class="p">(</span><span class="nb">= </span><span class="nv">old</span> <span class="mf">0.0</span><span class="p">)</span> <span class="p">(</span><span class="nb">= </span><span class="mf">1.0</span> <span class="nv">new</span><span class="p">))</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">reset!</span> <span class="nv">active-color</span> <span class="p">(</span><span class="nf">mod</span> <span class="p">(</span><span class="nb">+ </span><span class="o">@</span><span class="nv">active-color</span> <span class="mf">1.0</span><span class="p">)</span> <span class="mi">100</span><span class="p">)))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">shadertone/start-fullscreen</span> <span class="s">&quot;resources/shaders/example.glsl&quot;</span>
</span><span class='line'>  <span class="ss">:user-data</span> <span class="p">{</span><span class="ss">:iActiveColor</span> <span class="nv">active-color</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Within the shader:</p>


<p><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">uniform</span> <span class="kt">float</span> <span class="n">iActiveColor</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">vec4</span> <span class="n">function</span> <span class="nf">showColor</span><span class="p">(){</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">vec4</span><span class="p">(</span><span class="n">iActiveColor</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Thats a lot of work, but I&rsquo;m very happy with the results in my <a href="https://vimeo.com/117516352">(end-of-buffer)</a> performance.</p>




<h2>Buffer events</h2>




<p>Writing to a buffer is a common way of live coding in Overtone. Its very useful to attach some visual effect based on the settings of a buffer.</p>


<p><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="c1">;;Setting notes to a buffer</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">notes-buf</span> <span class="p">(</span><span class="nf">buffer</span> <span class="mi">256</span><span class="p">))</span>
</span><span class='line'><span class="p">(</span><span class="nf">pattern!</span> <span class="nv">notes-buf</span> <span class="p">(</span><span class="nf">degrees-seq</span> <span class="p">[</span><span class="ss">:f3</span> <span class="mi">1314</span><span class="p">]))</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>We could put a tap into the synth and grab the current note and pass this into the shader. As I&rsquo;ve mentioned taps are expensive and they are always on while we may not always be using them.
This also gets more complicated when say we have 3 instances of the same synth running playing simultaneous to form a chord.</p>




<p>An alternative is to invent an atom which is used as a signal on every buffer write.</p>


<p><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="c1">;;Could also do this with OSC messages&hellip;</span>
</span><span class='line'><span class="p">(</span><span class="nf">do</span>
</span><span class='line'>  <span class="p">(</span><span class="kd">defonce </span><span class="nv">buffer-change-event-notes-buf</span> <span class="p">(</span><span class="nf">atom</span> <span class="mf">0.0</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">pattern!</span> <span class="nv">notes-buf</span> <span class="p">(</span><span class="nf">degrees-seq</span> <span class="p">[</span><span class="ss">:f3</span> <span class="mi">1314</span><span class="p">]))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">swap!</span> <span class="nv">buffer-change-event-notes-buf</span> <span class="nb">+ </span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>And adding a watcher</p>


<p><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">add-watch</span>
</span><span class='line'>  <span class="nv">buffer-change-event-notes-buf</span>
</span><span class='line'>  <span class="ss">:buffer-change-event-notes-buf</span>
</span><span class='line'>  <span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="o">&amp;</span> <span class="nv">_</span><span class="p">]</span>
</span><span class='line'>    <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">n</span> <span class="p">(</span><span class="nb">int </span><span class="p">(</span><span class="nf">buffer-get</span> <span class="nv">notes-buf</span> <span class="mi">0</span><span class="p">))]</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">case</span> <span class="nv">n</span>
</span><span class='line'>        <span class="mi">29</span> <span class="p">(</span><span class="nf">reset!</span> <span class="nv">color</span> <span class="mf">0.4</span><span class="p">)</span>
</span><span class='line'>           <span class="p">(</span><span class="nf">reset!</span> <span class="nv">color</span> <span class="mf">0.0</span><span class="p">)))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">buffer-atoms</span> <span class="p">(</span><span class="nf">atom</span> <span class="p">{}))</span>
</span><span class='line'><span class="p">(</span><span class="nf">pattern!</span> <span class="nv">notes-buf</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nf">reset!</span> <span class="nv">buffer-atoms</span> <span class="p">(</span><span class="nb">assoc </span><span class="o">@</span><span class="nv">buffer-atoms</span> <span class="p">(</span><span class="ss">:id</span> <span class="nv">notes-buf</span><span class="p">)</span> <span class="p">(</span><span class="nb">inc </span><span class="p">(</span><span class="o">@</span><span class="nv">buffer-atoms</span> <span class="p">(</span><span class="ss">:id</span> <span class="nv">notes-buf</span><span class="p">)))))</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>I use this trick in (end-of-buffer) to use the bass note to control the level of distortion of the visuals (<a href="https://github.com/repl-electric/cassiopeia/blob/master/src/cassiopeia/destination/flatiron.clj#L84-L99">source</a>). Its wonderful to focus on the notes and feel the visuals following you automatically.</p>




<h2>Midi notes to visuals</h2>




<p>I often want to map a midi note to a visual effect. All my notes are mapped to buffers. Much like we did with the drums I can use a tap to get access to the current note being played in a buffer. Skipping over the details, when we have a midi note we send it as an float (to support crazy 42.333 like notes) to the shader via an atom.</p>




<p>We then map it to a nice range value to effect visuals:</p>


<p><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">uniform</span> <span class="kt">float</span> <span class="n">iLeadNote</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//midi note: 42 =&gt; F#2  </span>
</span><span class='line'><span class="c1">//midi note: 78 =&gt; F#5</span>
</span><span class='line'><span class="kt">float</span> <span class="n">noteMapped</span> <span class="o">=</span> <span class="n">smoothstep</span><span class="p">(</span><span class="mf">42.0</span><span class="p">,</span> <span class="mf">78.0</span><span class="p">,</span> <span class="n">iLeadNote</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//noteMapped now spans =&gt; 0..1</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>A cheap way to scale effects based on the height of the note.</p>




<h2>Gradual transitions</h2>




<p>Often I want a smooth fading it or out of a shader function. Say for example fading to black. Pretty simple, just fire a thread which sleeps and ticks an atom. The atom is fed into the Shader.</p>


<p><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">uniform</span> <span class="kt">float</span> <span class="n">iColor</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span>
</span><span class='line'>  <span class="n">gl_color</span> <span class="o">=</span> <span class="n">vec4</span><span class="p">(</span><span class="n">iColor</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Since I use this a lot I created a helper fn in <a href="https://github.com/josephwilk/mud/blob/4866f9db8077f8d4244fdd94b42bc0fef0e69f40/src/mud/core.clj#L90">MUD</a>:</p>


<p><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">color</span> <span class="p">(</span><span class="nf">atom</span> <span class="mf">1.0</span><span class="p">))</span>
</span><span class='line'><span class="c1">;;         atom / target /  rate</span>
</span><span class='line'><span class="p">(</span><span class="nf">overtime!</span> <span class="nv">color</span>   <span class="mf">0.0</span>      <span class="mf">0.001</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></p>

<h2>Text</h2>




<p>In end-of-buffer I spell the word Repl Electric out of floating lights. We are bound to only a few data structures with fragment Shaders. I used a simple 3x3 matrix mapping each part of a character. Then using this to decided the position of the lights.</p>


<p><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">const</span> <span class="n">mat3</span> <span class="n">LETTER_R</span>        <span class="o">=</span> <span class="n">mat3</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>                                  <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>                                  <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="k">const</span> <span class="n">mat3</span> <span class="n">LETTER_E</span>        <span class="o">=</span> <span class="n">mat3</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>                                  <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>                                  <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">vec4</span> <span class="nf">letter</span><span class="p">(</span><span class="n">mat3</span> <span class="n">letter</span><span class="p">,</span> <span class="n">vec2</span> <span class="n">offset</span><span class="p">,</span> <span class="n">vec2</span> <span class="n">uv</span><span class="p">){</span>
</span><span class='line'>  <span class="n">vec2</span> <span class="n">point</span> <span class="o">=</span> <span class="n">vec2</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>  <span class="n">vec4</span> <span class="n">helloPoint</span> <span class="o">=</span> <span class="n">vec4</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>  <span class="n">vec3</span> <span class="n">xPos</span> <span class="o">=</span> <span class="n">vec3</span><span class="p">(</span><span class="mf">0.01</span><span class="p">,</span> <span class="mf">0.03</span><span class="p">,</span> <span class="mf">0.05</span><span class="p">);</span>
</span><span class='line'>  <span class="n">vec3</span> <span class="n">yPos</span> <span class="o">=</span> <span class="n">vec3</span><span class="p">(</span><span class="mf">0.05</span><span class="p">,</span> <span class="mf">0.03</span><span class="p">,</span> <span class="mf">0.01</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">y</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">y</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="p">;</span> <span class="n">y</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="p">;</span> <span class="n">x</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="n">letter</span><span class="p">[</span><span class="n">y</span><span class="p">][</span><span class="n">x</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">){</span><span class="c1">// Show this part of the letter</span>
</span><span class='line'>        <span class="n">point</span> <span class="o">=</span> <span class="n">vec2</span><span class="p">(</span><span class="n">xPos</span><span class="p">[</span><span class="n">x</span><span class="p">]</span><span class="o">+</span><span class="n">offset</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="n">offset</span><span class="p">.</span><span class="n">y</span><span class="o">+</span><span class="n">yPos</span><span class="p">[</span><span class="n">y</span><span class="p">]);</span>
</span><span class='line'>        <span class="n">helloPoint</span> <span class="o">+=</span> <span class="n">buildCell</span><span class="p">(</span><span class="n">uv</span><span class="p">,</span> <span class="n">point</span><span class="p">,</span> <span class="n">STATIC_LETTERS</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">helloPoint</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">letter</span><span class="p">(</span><span class="n">LETTER_R</span><span class="p">,</span> <span class="mf">0.2</span><span class="p">,</span> <span class="n">uv</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>And the visual.</p>




<p><img src="http://blog.josephwilk.net/images/font-example.png" alt="Font example"/></p>




<h2>Visuals effected by frequencies</h2>




<p>Shadertone provides a 2x512 array with the frequency spectrum (FFT) and audio waveform data. It does this by loading the data into a 2D Texture. The audio data is taken from tapping the main Overtone audio bus.</p>


<p><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="c1">;;Tell Shadertone to fill iChannel0 with audio data</span>
</span><span class='line'><span class="p">(</span><span class="nf">shadetone/start</span> <span class="s">&quot;shaders/example.glsl&quot;</span> <span class="ss">:textures</span> <span class="p">[</span><span class="ss">:overtone-audio</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>It&rsquo;s always a challenge to utilise this without creating something jerky or causing motion sickness. Hence I tend to use the waveform or FFT as a distorter rather than a base for animations.</p>




<p>It also helps to concentrate on specific ranges of frequencies of the waveform data to create a stronger connection between a synth and the visuals.</p>


<p><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nb">float </span><span class="nv">sound</span> <span class="nb">= </span><span class="nv">texture2D</span><span class="p">(</span><span class="nf">iChannel0</span>, <span class="nv">vec2</span><span class="p">(</span><span class="nf">max</span><span class="p">(</span><span class="nf">uv.x</span>,<span class="mf">0.9</span><span class="p">)</span>,<span class="nv">.75</span><span class="p">))</span><span class="nv">.x</span><span class="c1">;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">//uv.xy</span> <span class="nv">=&gt;</span> <span class="nv">current</span> <span class="nv">x</span>,<span class="nv">y</span> <span class="nv">coordinates</span> <span class="nv">of</span> <span class="nv">pixel.</span>
</span><span class='line'>
</span><span class='line'><span class="nv">//First</span> <span class="nv">argument</span> <span class="nv">is</span> <span class="nv">an</span> <span class="nb">index into </span><span class="nv">the</span> <span class="mi">512</span> <span class="nv">values</span> <span class="nv">of</span> <span class="nv">the</span> <span class="nv">waveform.</span>
</span><span class='line'><span class="nv">//By</span> <span class="nv">limiting</span> <span class="nv">the</span> <span class="nb">first </span><span class="nv">argument</span> <span class="nv">we</span> <span class="nv">can</span> <span class="nv">ignore</span> <span class="nv">certain</span> <span class="nv">ranges.</span>
</span><span class='line'>
</span><span class='line'><span class="nv">//Second</span> <span class="nv">argument</span> <span class="nv">selects</span><span class="err">:</span>
</span><span class='line'><span class="nv">//</span>    <span class="mf">0.25</span> <span class="nv">=&gt;</span> <span class="nv">FFT</span>
</span><span class='line'><span class="nv">//</span>    <span class="mf">0.75</span> <span class="nv">=&gt;</span> <span class="nv">audio</span> <span class="nv">waveform</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Here is an example where I use the audio waveform to distort the scale &amp; jaggedness of a series of circle shapes.</p>


<p><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">const</span> <span class="kt">float</span> <span class="n">tau</span> <span class="o">=</span> <span class="mf">6.28318530717958647692</span><span class="p">;</span>
</span><span class='line'><span class="n">vec3</span> <span class="n">wave</span> <span class="o">=</span> <span class="n">vec3</span><span class="p">(</span><span class="mf">0.0</span><span class="p">);</span>
</span><span class='line'><span class="kt">float</span> <span class="n">width</span> <span class="o">=</span> <span class="mf">4.0</span><span class="o">/</span><span class="mi">500</span><span class="p">;</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">60</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>  <span class="kt">float</span> <span class="n">sound</span> <span class="o">=</span> <span class="n">texture2D</span><span class="p">(</span><span class="n">iChannel0</span><span class="p">,</span> <span class="n">vec2</span><span class="p">(</span><span class="n">uv</span><span class="p">.</span><span class="n">x</span><span class="p">,</span><span class="mf">.75</span><span class="p">)).</span><span class="n">x</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">float</span> <span class="n">a</span> <span class="o">=</span> <span class="mf">0.1</span><span class="o"><em></span><span class="kt">float</span><span class="p">(</span><span class="n">i</span><span class="p">)</span><span class="o"></em></span><span class="n">tau</span><span class="o">/</span><span class="kt">float</span><span class="p">(</span><span class="n">n</span><span class="p">);</span>
</span><span class='line'>  <span class="n">vec3</span> <span class="n">phase</span> <span class="o">=</span> <span class="n">smoothstep</span><span class="p">(</span><span class="o">&ndash;</span><span class="mf">1.0</span><span class="p">,</span><span class="mf">.5</span><span class="p">,</span> <span class="n">vec3</span><span class="p">(</span><span class="n">cos</span><span class="p">(</span><span class="n">a</span><span class="p">),</span> <span class="n">cos</span><span class="p">(</span><span class="n">a</span><span class="o">&ndash;</span><span class="n">tau</span><span class="o">/</span><span class="mf">3.0</span><span class="p">),</span> <span class="n">cos</span><span class="p">(</span><span class="n">a</span><span class="o">&ndash;</span><span class="n">tau</span><span class="o"><em></span><span class="mf">2.0</span><span class="o">/</span><span class="mf">3.0</span><span class="p">)));</span>
</span><span class='line'>  <span class="n">wave</span> <span class="o">+=</span> <span class="n">phase</span> <span class="o"></em></span> <span class="n">smoothstep</span><span class="p">(</span><span class="n">width</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">,</span> <span class="n">abs</span><span class="p">(</span><span class="n">uv</span><span class="p">.</span><span class="n">y</span> <span class="o">&ndash;</span> <span class="p">((</span><span class="n">sound</span><span class="o"><em></span><span class="mf">0.9</span><span class="p">)</span><span class="o">+</span><span class="mf">0.2</span><span class="p">)));</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//This shift of uv.x means our index into the sound data also </span>
</span><span class='line'>  <span class="c1">//moves along, examining a different part of the audio wave. </span>
</span><span class='line'>  <span class="n">uv</span><span class="p">.</span><span class="n">x</span> <span class="o">+=</span> <span class="mf">0.4</span><span class="o">/</span><span class="kt">float</span><span class="p">(</span><span class="n">n</span><span class="p">);</span>
</span><span class='line'>  <span class="n">uv</span><span class="p">.</span><span class="n">y</span> <span class="o">&ndash;=</span> <span class="mf">0.05</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">wave</span> <span class="o"></em>=</span> <span class="mf">10.0</span><span class="o">/</span><span class="kt">float</span><span class="p">(</span><span class="n">n</span><span class="p">);</span>
</span><span class='line'><span class="k">return</span> <span class="nf">vec4</span><span class="p">(</span><span class="n">wave</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>And the resulting visual:</p>




<p><img src="http://blog.josephwilk.net/images/fft-example.png" alt="FFT example"/></p>




<h2>Final thoughts on Live coding visuals</h2>




<p>Through Clojure&rsquo;s binding of atoms with Fragment shaders we have the power to live code visuals and music. Though it comes at a cost of complexity having to wrap lots of functions in order to have powerfully connected visuals. Fragment shaders are extremely terse, and can be pushed to replicate many advanced effects <em>but</em> they are also performance intense, and often taking a non-shader route will be much more performant.</p>




<h4>Stability</h4>




<p>My knowledge of LWJGL is small, but crashes in the fragment shaders often occur leaving the JVM wedged. This has happened to me quite a lot practicing, but never in a performance. Its worth reflecting that something (be it fixable) leaves a risk of a freeze in a performance.</p>




<h4>Combining State &amp; Shaders</h4>




<p>I&rsquo;ve started to explore what a shader application might look like if it was a server and provided a state machine so the live coding language does have this complexity. In turn producing a freer and more spontaneous interaction. This project is <a href="https://github.com/josephwilk/shaderview">Shaderview</a> and steals all the good ideas of Shadertone while adding some new features like <a href="http://www.vertexshaderart.com">vertex shader art</a>. I&rsquo;ll be writing up more about Shaderview soon.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Animations with Emacs]]></title>
    <link href="http://blog.josephwilk.net/art/emacs-animation.html"/>
    <updated>2015-10-02T15:58:00+01:00</updated>
    <id>http://blog.josephwilk.net/art/emacs-animation</id>
    <content type="html"><![CDATA[<p>Emacs is designed for fast, highly customisable manipulation of text.
ASCII animation requires manipulating text at a sufficient speed that it appears animated. Emacs is also used by a number of performers to live code musical &amp; visual performances (and many other things). Where the audience can see the code in emacs and hear it.</p>




<p><img src="http://blog.josephwilk.net/images/live-coding-emacs.png" alt="Live Coding with Emacs" /></p>




<p>In my live coding performances as <a href="http://www.repl-electric.com">Repl Electric</a> I&rsquo;ve used emacs animations to  augment emacs with more feedback for the performer and a chance to destroy the order and structure the programmer has spent the entire performance building. Reminding us that we are looking at thoughts expressed through code that seem magical but are ultimately nothing more than text.</p>




<p>Maybe something akin to the creation and destruction of Sand Mandalas.</p>




<p><img src="http://blog.josephwilk.net/images/sandmandala.jpg" alt="Sand Mandala" /></p>




<h2>Framework for Emacs Animation</h2>




<p>Zone Mode is an Emacs plugin which provides a framework for screensaver like animations.</p>




<p><a href="http://www.emacswiki.org/emacs/ZoneMode">http://www.emacswiki.org/emacs/ZoneMode</a></p>




<p>Importantly it allows us to turn on an animation using our current code buffer as input and to terminate the animation, returning to the original code on a key press. So we can safely mangle the text knowing we can also return to safety. Well so far I&rsquo;ve always found it to be safe but there is a small risk as mentioned in the zoning warning:</p>


<p><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='lisp'><span class='line'><span class="p">(</span><span class="nv">message</span> <span class="s">&quot;&hellip;here&#39;s hoping we didn&#39;t hose your buffer!&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>A nice property of taking our buffer as input is we are never quite sure what text will be there and hence the properties of the animation.</p>




<h3>Example: Uppercase all letters</h3>




<p>A simple function that finds non-whitespace in the buffer and tries to uppercase the char. It knows nothing about the zoning framework, its just a plain old function that operates on the active buffer.</p>


<p><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='lisp'><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">zone-upper-case-text</span> <span class="p">()</span>
</span><span class='line'>  <span class="p">(</span><span class="nv">zone-fill-out-screen</span> <span class="p">(</span><span class="nv">window-width</span><span class="p">)</span> <span class="p">(</span><span class="nv">window-height</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">random</span> <span class="no">t</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nv">goto-char</span> <span class="p">(</span><span class="nv">point-min</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nv">while</span> <span class="p">(</span><span class="nb">not</span> <span class="p">(</span><span class="nv">input-pending-p</span><span class="p">))</span>
</span><span class='line'>    <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">wbeg</span> <span class="p">(</span><span class="nv">window-start</span><span class="p">))</span>
</span><span class='line'>          <span class="p">(</span><span class="nv">wend</span> <span class="p">(</span><span class="nv">window-end</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">;;Keep moving the char cursor until its not whitespace</span>
</span><span class='line'>      <span class="p">(</span><span class="nv">while</span> <span class="p">(</span><span class="nv">looking-at</span> <span class="s">&quot;[ \n\f]&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">(</span><span class="nv">goto-char</span> <span class="p">(</span><span class="nb">+</span> <span class="nv">wbeg</span> <span class="p">(</span><span class="nb">random</span> <span class="p">(</span><span class="nb">&ndash;</span> <span class="nv">wend</span> <span class="nv">wbeg</span><span class="p">))))))</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">;;If we are at the end of the buffer go to the last char</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">when</span> <span class="p">(</span><span class="nv">eobp</span><span class="p">)</span> <span class="p">(</span><span class="nv">goto-char</span> <span class="p">(</span><span class="nv">point-min</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">;;Read the char at the cursor</span>
</span><span class='line'>    <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">c</span> <span class="p">(</span><span class="nv">char-after</span> <span class="p">(</span><span class="nv">point</span><span class="p">))))</span>
</span><span class='line'>      <span class="p">(</span><span class="nv">delete-char</span> <span class="mi">1</span><span class="p">)</span>           <span class="c1">;; Remove the char</span>
</span><span class='line'>      <span class="p">(</span><span class="nv">insert-char</span> <span class="p">(</span><span class="nv">upcase</span> <span class="nv">c</span><span class="p">)))</span> <span class="c1">;; Reinsert with caps      </span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">;;Sleep</span>
</span><span class='line'>    <span class="p">(</span><span class="nv">zone-park/sit-for</span> <span class="p">(</span><span class="nv">point-min</span><span class="p">)</span> <span class="mf">0.1</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>The animation in all its glory:</p>




<iframe src="https://player.vimeo.com/video/141312958" width="500" height="281" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>




<h3>Zoning Setup</h3>




<p>We can override all other zoning programs and just specify our zone-fn. When we activate zoning our animation will be run.</p>


<p><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='lisp'><span class='line'><span class="p">(</span><span class="nv">eval-after-load</span> <span class="s">&quot;zone&quot;</span>
</span><span class='line'>  <span class="o">&#39;</span><span class="p">(</span><span class="nb">unless</span> <span class="p">(</span><span class="nv">memq</span> <span class="ss">&#39;zone-upper-case-text</span> <span class="p">(</span><span class="nb">append</span> <span class="nv">zone-programs</span> <span class="no">nil</span><span class="p">))</span>
</span><span class='line'>         <span class="p">(</span><span class="k">setq</span> <span class="nv">zone-programs</span> <span class="nv">[zone-upper-case-text]</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure></p>

<h3>Zoning Examples:</h3>




<p>Zoning mode comes with lots of example animations that are good starting points:</p>




<p><a href="http://www.opensource.apple.com/source/emacs/emacs-51/emacs/lisp/play/zone.el">http://www.opensource.apple.com/source/emacs/emacs-51/emacs/lisp/play/zone.el</a></p>




<ul>
<li>zone-pgm-jitter</li>
<li>zone-pgm-putz-with-case</li>
<li>zone-pgm-dissolve</li>
<li>zone-pgm-whack-chars</li>
<li>zone-pgm-rotate</li>
<li>zone-pgm-rotate-LR-lockstep</li>
<li>zone-pgm-rotate-RL-lockstep</li>
<li>zone-pgm-rotate-LR-variable</li>
<li>zone-pgm-rotate-RL-variable</li>
<li>zone-pgm-drip</li>
<li>zone-pgm-drip-fretfully</li>
<li>zone-pgm-five-oclock-swan-dive</li>
<li>zone-pgm-martini-swan-dive</li>
<li>zone-pgm-paragraph-spaz</li>
<li>zone-pgm-stress</li>
</ul>




<h2>Open Sound Control Protocol Based animation</h2>




<p>OSC is a handy protocol for sending data between networked devices using url like endpoints.
Emacs has a plugin to run an OSC server (<a href="http://delysid.org/emacs/osc.html">http://delysid.org/emacs/osc.html</a>).
Hence if we have some kind of beat signal we could send a message to Emacs and in turn it could render changes based on our musics timing.</p>




<p>With my Overtone setup for Repl-Electric I have the following flow of OSC messages:</p>


<p><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='lisp'><span class='line'><span class="nv">[Supercollider]</span> <span class="nv">&ndash;&gt;</span> <span class="nv">OSC</span> <span class="nv">&ndash;&gt;</span> <span class="nv">[Clojure]</span> <span class="nv">&ndash;&gt;</span> <span class="nv">OSC</span> <span class="nv">&ndash;&gt;</span> <span class="nv">[Emacs]</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Within Emacs setup an OSC server and define two call backs which change the color of the window face number</p>


<p><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='emacs-lisp'><span class='line'><span class="p">(</span><span class="nb">require</span> <span class="ss">&#39;osc</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nb">require</span> <span class="ss">&#39;cl</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defvar</span> <span class="nv">osc-server</span> <span class="no">nil</span> <span class="s">&quot;Connection to receive msgs&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nb">defvar</span> <span class="nv">flip-state</span> <span class="no">t</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">osc-connect</span> <span class="p">()</span>
</span><span class='line'>  <span class="s">&quot;Create an OSC server and bind our fallback functions&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">when</span> <span class="p">(</span><span class="nb">not</span> <span class="nv">osc-server</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="k">setq</span> <span class="nv">osc-server</span>
</span><span class='line'>          <span class="p">(</span><span class="nv">osc-make-server</span>
</span><span class='line'>           <span class="s">&quot;localhost&quot;</span> <span class="mi">4558</span>
</span><span class='line'>           <span class="p">(</span><span class="k">lambda</span> <span class="p">(</span><span class="nv">path</span> <span class="k">&amp;rest</span> <span class="nv">args</span><span class="p">)</span>
</span><span class='line'>             <span class="p">(</span><span class="nb">cond</span>
</span><span class='line'>              <span class="p">((</span><span class="nv">string-match</span> <span class="s">&quot;/beat&quot;</span> <span class="nv">path</span><span class="p">)</span>
</span><span class='line'>               <span class="p">(</span><span class="k">progn</span> <span class="p">(</span><span class="k">if</span> <span class="nv">flip-state</span> <span class="p">(</span><span class="nv">on-beat</span><span class="p">)</span> <span class="p">(</span><span class="nv">off-beat</span><span class="p">))</span>
</span><span class='line'>                      <span class="p">(</span><span class="k">setq</span> <span class="nv">flip-state</span> <span class="p">(</span><span class="nb">not</span> <span class="nv">flip-state</span><span class="p">))))))))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">osc-make-server</span> <span class="p">(</span><span class="nv">host</span> <span class="nv">port</span> <span class="nv">default-handler</span><span class="p">)</span>
</span><span class='line'>  <span class="s">&quot;Settings for OSC server&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nv">make-network-process</span>
</span><span class='line'>   <span class="ss">:name</span> <span class="s">&quot;emacs OSC server&quot;</span>
</span><span class='line'>   <span class="ss">:host</span> <span class="nv">host</span>
</span><span class='line'>   <span class="ss">:server</span> <span class="no">t</span>
</span><span class='line'>   <span class="ss">:service</span> <span class="nv">port</span>
</span><span class='line'>   <span class="ss">:filter</span> <span class="nf">#&#39;</span><span class="nv">osc-filter</span>
</span><span class='line'>   <span class="ss">:type</span> <span class="ss">&#39;datagram</span>
</span><span class='line'>   <span class="ss">:family</span> <span class="ss">&#39;ipv4</span>
</span><span class='line'>   <span class="ss">:plist</span> <span class="p">(</span><span class="nb">list</span> <span class="ss">:generic</span> <span class="nv">default-handler</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">on-beat</span> <span class="p">()</span>
</span><span class='line'>  <span class="p">(</span><span class="nv">custom-set-faces</span>
</span><span class='line'>   <span class="o">&#39;</span><span class="p">(</span><span class="nv">window-number-face</span> <span class="p">((</span><span class="no">t</span> <span class="p">(</span><span class="ss">:foreground</span> <span class="s">&quot;deeppink&quot;</span><span class="p">))))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">off-beat</span> <span class="p">()</span>
</span><span class='line'>  <span class="p">(</span><span class="nv">custom-set-faces</span>
</span><span class='line'>   <span class="o">&#39;</span><span class="p">(</span><span class="nv">window-number-face</span> <span class="p">((</span><span class="no">t</span> <span class="p">(</span><span class="ss">:foreground</span> <span class="s">&quot;#FDDD0C&quot;</span><span class="p">))))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nv">osc-connect</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nb">provide</span> <span class="ss">&#39;osc-server</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>In Overtone/Clojure the sending signal:</p>


<p><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defonce </span><span class="nv">emacs-client</span> <span class="p">(</span><span class="nf">osc-client</span> <span class="s">&quot;localhost&quot;</span> <span class="mi">4558</span><span class="p">))</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">emacs-trigger</span>    <span class="p">(</span><span class="nf">on-beat-trigger</span> <span class="mi">8</span> <span class="o">#</span><span class="p">(</span><span class="k">do </span><span class="p">(</span><span class="nf">osc-send</span> <span class="nv">emacs-client</span> <span class="s">&quot;/beat&quot;</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Heres a little demo with the brackets and window number changing colour based on the Overtone beat.</p>




<p><img src="http://blog.josephwilk.net/images/brackets.gif" alt="Emacs rendering to the beat" /></p>




<h3>Synchronisation</h3>




<p>Given some small local lag we now have a timing signal which is threaded through all our tools. <a href="http://supercollider.github.io/">Supercollider</a>, <a href="http://overtone.github.io/">Overtone</a> and Emacs.</p>




<p>Which means our emacs animations can start to change to the beat of the music&hellip;</p>




<h2>Sound in ASCII</h2>




<p>Now that we have ways to animate and to connect audio data with emacs we can go a little further (way too far) and start to visualise the data about our sound in ASCII.</p>




<p>From Overtone or SuperCollider we can create a synth which tracks the peak and power of an audio signal. It sends us messages back with the data which we then forward on as OSC messages to Emacs.</p>


<p><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#Triggers a Sin Wave Oscillator and sends signals about power/peak</span>
</span><span class='line'><span class="n">SynthDef</span><span class="p">(</span><span class="err">&lt;/span><span class="n">pulse</span><span class="p">,{</span>
</span><span class='line'>  <span class="n">var</span> <span class="n">sig</span><span class="p">,</span> <span class="n">chain</span><span class="p">,</span> <span class="n">onsets</span><span class="p">;</span>
</span><span class='line'>  <span class="n">sig</span> <span class="o">=</span> <span class="n">SinOsc</span><span class="p">.</span><span class="n">ar</span><span class="p">(</span><span class="n">Rand</span><span class="p">(</span><span class="mf">220.0</span><span class="p">,</span><span class="mf">440.0</span><span class="p">))</span>
</span><span class='line'>  <span class="o"><em></span><span class="n">EnvGen</span><span class="p">.</span><span class="n">ar</span><span class="p">(</span><span class="n">Env</span><span class="p">.</span><span class="n">perc</span><span class="p">(</span><span class="nl">releaseTime</span><span class="p">:</span><span class="mf">0.5</span><span class="p">),</span><span class="n">Dust</span><span class="p">.</span><span class="n">ar</span><span class="p">(</span><span class="mf">0.5</span><span class="p">))</span><span class="o"></em></span><span class="mf">0.7</span><span class="p">;</span>
</span><span class='line'>  <span class="n">Out</span><span class="p">.</span><span class="n">ar</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="n">sig</span> <span class="o">!</span><span class="mi">2</span><span class="p">);</span>
</span><span class='line'>  <span class="c1">//</span>
</span><span class='line'>  <span class="n">chain</span> <span class="o">=</span> <span class="n">FFT</span><span class="p">({</span><span class="n">LocalBuf</span><span class="p">(</span><span class="mi">512</span><span class="p">,</span> <span class="mi">1</span><span class="p">)},</span> <span class="n">sig</span><span class="p">);</span>
</span><span class='line'>  <span class="n">onsets</span> <span class="o">=</span> <span class="n">Onsets</span><span class="p">.</span><span class="n">kr</span><span class="p">(</span><span class="n">chain</span><span class="p">,</span><span class="mf">0.1</span><span class="p">,</span><span class="err">&lt;/span><span class="n">power</span><span class="p">);</span>
</span><span class='line'>  <span class="n">SendTrig</span><span class="p">.</span><span class="n">kr</span><span class="p">(</span><span class="n">onsets</span><span class="p">);</span>
</span><span class='line'>  <span class="n">SendPeakRMS</span><span class="p">.</span><span class="n">kr</span><span class="p">(</span><span class="n">sig</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="s">&quot;/replyAddress&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}).</span><span class="n">add</span><span class="p">;</span>
</span><span class='line'><span class="cp">#Run the crazy synth above</span>
</span><span class='line'><span class="n">Synth</span><span class="p">(</span><span class="err">&lt;/span><span class="n">pulse</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#Forward the data on as an OSC message</span>
</span><span class='line'><span class="cp">#to emacs</span>
</span><span class='line'><span class="o">~</span><span class="n">host</span> <span class="o">=</span> <span class="n">NetAddr</span><span class="p">(</span><span class="s">&quot;localhost&quot;</span><span class="p">,</span> <span class="mi">4859</span><span class="p">);</span>
</span><span class='line'><span class="n">p</span> <span class="o">=</span> <span class="n">OSCFunc</span><span class="p">({</span> <span class="o">|</span><span class="n">msg</span><span class="o">|</span>
</span><span class='line'>  <span class="o">~</span><span class="n">host</span><span class="p">.</span><span class="n">sendMsg</span><span class="p">(</span><span class="s">&quot;/peakpower&quot;</span><span class="p">,</span><span class="n">msg</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span> <span class="n">msg</span><span class="p">[</span><span class="mi">4</span><span class="p">]);</span>
</span><span class='line'>  <span class="s">&quot;peak: %, rms: %&quot;</span><span class="p">.</span><span class="n">format</span><span class="p">(</span><span class="n">msg</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span> <span class="n">msg</span><span class="p">[</span><span class="mi">4</span><span class="p">]).</span><span class="n">postln</span>
</span><span class='line'><span class="p">},</span> <span class="err">&#39;</span><span class="o">/</span><span class="n">replyAddress</span><span class="err">&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>And in our emacs OSC server:</p>


<p><figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='emacs-lisp'><span class='line'><span class="p">((</span><span class="nv">string-match</span> <span class="s">&quot;/peakpower&quot;</span> <span class="nv">path</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">progn</span>
</span><span class='line'>    <span class="p">(</span><span class="nv">with-current-buffer</span> <span class="s">&quot;flatiron.clj&quot;</span>
</span><span class='line'>      <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">sig</span> <span class="p">(</span><span class="nb">round</span> <span class="p">(</span><span class="nb">*</span> <span class="mf">100.0</span> <span class="p">(</span><span class="nb">first</span> <span class="nv">args</span><span class="p">)))))</span>
</span><span class='line'>        <span class="p">(</span><span class="nv">message</span> <span class="p">(</span><span class="nb">format</span> <span class="s">&quot;%f&quot;</span> <span class="p">(</span><span class="nb">first</span> <span class="nv">args</span><span class="p">)))</span>
</span><span class='line'>        <span class="p">(</span><span class="nb">dotimes</span> <span class="p">(</span><span class="nv">n</span> <span class="nv">sig</span><span class="p">)</span>
</span><span class='line'>          <span class="p">(</span><span class="nv">insert</span> <span class="s">&quot;‚ñì&quot;</span><span class="p">))</span>
</span><span class='line'>        <span class="p">(</span><span class="nv">insert</span> <span class="s">&quot;‚ñí‚ñë&quot;</span><span class="p">))</span>
</span><span class='line'>      <span class="p">(</span><span class="nv">insert</span> <span class="s">&quot;\n&quot;</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure></p>

<iframe src="https://player.vimeo.com/video/141159277" width="500" height="281" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>




<h2>Repl Electric Emacs animations</h2>




<p>All my Emacs animations are used to conclude the performance.
Heres lies the source code, some screenshots and tricks &amp; tips that made the animations possible.</p>




<p>Here&rsquo;s a demo of all the Repl Electric animations discussed in action:</p>




<iframe src="https://player.vimeo.com/video/141310772" width="500" height="375" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>




<h3>End of Buffer</h3>




<p><a href="https://github.com/repl-electric/view-pane/blob/master/animations/end-of-buffer.el">https://github.com/repl-electric/view-pane/blob/master/animations/end-of-buffer.el</a></p>




<p><img src="http://blog.josephwilk.net/images/endofbuffer01.png"/ alt="end-of-buffer-01"><img src="http://blog.josephwilk.net/images/endofbuffer02.png" alt="end-of-buffer-02"/><img src="http://blog.josephwilk.net/images/endofbuffer03.png" alt="end-of-buffer-03"/></p>




<p>In this animations the text gets slowly broken up with white spaces and then like the wind, blows the characters away. Sometimes words are ripped apart as they blow in the wind (if we get lucky).</p>




<p>Two main phases:</p>




<ul>
<li><p>Injection of spaces.
This starts to distort the text while keeping it readable. It provides a way to increase the effect of expanding whitespace in the next stage.</p></li>
<li><p>Transforming whitespace into lots of whitespace.
A Regex matches whitespace and replaces it with a randomly increasing amount of whitespace. Which leads to the effect of the characters of the code blowing away. I spent a while trying to improve the speed of this phase and Regexs proved to be the fastest way.</p></li>
</ul>




<p>If we move the text fast enough soft word wrapping means the text appears to re-enter from the left side of the screen and eventually disappear out of the buffer. Without soft wrapping we get a horrible jitter as emacs moves back and forth between left and right side of the buffer.</p>




<p>A couple of other tricks/tactics used:</p>




<ul>
<li>Continually incrementing integer. Useful for injecting movement or using sin/cos fn with a continuous value.</li>
<li>Perserving the syntax highlighting of the original code in an attempt to maintain some of the meaning of the code.</li>
</ul>




<h3>The Stars</h3>




<p><a href="https://github.com/repl-electric/view-pane/blob/master/animations/the-stars.el">https://github.com/repl-electric/view-pane/blob/master/animations/the-stars.el</a></p>




<p><img src="http://blog.josephwilk.net/images/thestars01.png"/></p>




<p>This was my first animation and was based heavily on <code>zone-pgm-drip-fretfully</code>.</p>




<p>It randomly picks a single character and moves it down the screen until it hits another letter or exits the screen.</p>




<p>When running Emacs + Overtone + OpenGL, Emacs starts to slow down so part of the challenge was ensuring the animation ran as fast as possible.</p>




<p>A nice property of this is that as the OpenGL shaders shutdown, the speed of the animation increases and the code destroys itself more quickly.</p>




<h3>Waves</h3>




<p><a href="https://github.com/repl-electric/view-pane/blob/master/animations/waves.el">https://github.com/repl-electric/view-pane/blob/master/animations/waves.el</a></p>




<p><img src="http://blog.josephwilk.net/images/waves01.png"/><img src="http://blog.josephwilk.net/images/waves02.png"/></p>




<p>This animations attempts to simulate the effect of waves using line wrapping and mixing deletions with insertions of different sizes to create lines that seem to move at different speeds.</p>




<h2>Breaking Tools</h2>




<p>While it may seem silly to bend Emacs to do things it was never intended to do, it&rsquo;s an important part of discovering for yourself how you want your tools to work. Not just doing what you are expected but breaking them apart and discovering for yourself how you want to use them.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Live Coding - Repl Electric]]></title>
    <link href="http://blog.josephwilk.net/art/live-coding-repl-electric.html"/>
    <updated>2014-06-13T15:58:12+01:00</updated>
    <id>http://blog.josephwilk.net/art/live-coding-repl-electric</id>
    <content type="html"><![CDATA[<p>Live coding is the act of turning a programming session into a performance. This can constitute improvisation, music, visuals, poetry, hardware, robots, dance, textiles and people. Pretty much anything with an input and output can be controlled live by programming.</p>

<p>This is not just a performance by programmers for programmers. While this is often where it starts as a live coder, the type of audience and the accessibility of the performance lies in the performers imagination. Abstraction can get us pretty much anywhere.</p>

<p><code>clojure
(def the-stars (dark-matter))
</code></p>

<h2>Repl Electric</h2>

<p><img src="https://camo.githubusercontent.com/d1711cc92a1b79af187344f461be35e2ced44e3f/687474703a2f2f7333302e706f7374696d672e6f72672f7633336377783668642f53637265656e5f53686f745f323031345f30345f32385f61745f32305f31345f33352e706e67"/></p>

<p><a href="http://www.repl-electric.com">Repl Electric</a> is a project I started in order to discover more about music composition and Artificial intelligent based aids to creativity. Which in turn through the inspiration of people like <a href="http://meta-ex.com/">Meta-ex</a> lead me to live programming music.</p>

<p>Here is a performance live coding music and graphics, inspired by a performance in London:</p>

<h3>The Stars</h3>

<iframe src="http://player.vimeo.com/video/95988263" width="500" height="313" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>


<h3>Open Live Coding</h3>

<p>All the tools and code used to create this performance are open for all to see on Github: <a href="https://github.com/repl-electric">https://github.com/repl-electric</a></p>

<p>Three programming languages were used to create this piece:</p>

<ul>
<li>Clojure (Sound)</li>
<li>GLSL (Visuals)</li>
<li>Emacs Lisp (Animations &amp; Navigation)</li>
</ul>


<h3>Tools</h3>

<p>Here are the tools used and a little detail around how they where used in performing &ldquo;The Stars&rdquo;:</p>

<h4>Clojure: <a href="http://clojure.org">http://clojure.org</a></h4>

<p>Clojure is a LISP language based on the JVM.</p>

<p>Clojure focuses on interactive REPL (Read, Evaluate, Print &amp; Loop) driven development. Which makes it a good choice for interactively coding music. It also turns out functional programming is a good fit for operating over music as data.</p>

<h4>Emacs Live: <a href="https://github.com/overtone/emacs-live">https://github.com/overtone/emacs-live</a></h4>

<p>Emacs live is a Emacs release with packages and defaults that are Live Coding centric. Something I use for both for my work and for my live coding.</p>

<p>To execute our code, we launch a repl instance in our project (NEVER launch inside emacs, since then if emacs crashes the repl and music dies) and connect to it from emacs using <code>cider</code> <a href="https://github.com/clojure-emacs/cider.">https://github.com/clojure-emacs/cider.</a></p>

<p>A simple trick to combine Emacs code and visualizations is to launch an OpenGL window in full screen (see Shadertone) and then put a full screen transparent terminal window running emacs over it.</p>

<p><img src="/images/terminal.png" alt="" /></p>

<p>The tumbling text effect seen at the end of the performance is an emacs animation using <code>Zone Mode</code> which supports writing your own text destructors: <a href="http://www.emacswiki.org/emacs/ZoneMode">http://www.emacswiki.org/emacs/ZoneMode</a></p>

<h4>Overtone: <a href="https://github.com/overtone/overtone">https://github.com/overtone/overtone</a></h4>

<p>Overtone is a Clojure based client to <a href="http://supercollider.sourceforge.net">SuperCollider</a>. Supercollider is an environment for real time audio synthesis and algorithmic composition.</p>

<p>Overtone provides us with:</p>

<ul>
<li>Timing (beat generation &ndash; <a href="https://github.com/repl-electric/cassiopeia/blob/master/src/cassiopeia/engine/timing.clj">example timing code</a>).</li>
<li>Building Synths (engineer sound).</li>
<li>Running samples (both your own and from <a href="https://www.freesound.org/">Freesound</a>).</li>
<li>Live Synth control (changing notes, durations, reverb, etc).</li>
<li>Hardware interaction (through midi or OSC).</li>
</ul>


<p>An example of a synth used in The Stars:</p>

<p>```clojure
(use &lsquo;overtone.live)
(defsynth dark-ambience [out-bus 0 amp 1 mul 0.2 room-size 70 rev-time 99 freq 60 ring-mul 55]
  (let [pink (hpf:ar (<em> (</em> 0.005 (pink-noise)) (line:kr 0 1 9)) 5)</p>

<pre><code>    src1 (ringz (* pink (lf-noise1:kr 0.15)) (+ freq (* ring-mul 0)) mul)
    src2 (ringz (* pink (lf-noise1:kr 0.15)) (+ freq (* ring-mul 1)) mul)
    src3 (ringz (* pink (lf-noise1:kr 0.15)) (+ freq (* ring-mul 2)) mul)
    src (tanh (g-verb (sum [src1 src2 src3]) room-size rev-time))]
(out out-bus (* amp src))))
</code></pre>

<p>(def the-stars (dark-ambience))
```</p>

<h6>Timing</h6>

<p>Timing is a complicated issue but so important its worth touching on. You have a choice with Overtone to use Java for timing or Supercollider. I use Supercollider since I have found it to be much more reliable.
Everything you need is here (<a href="https://github.com/repl-electric/cassiopeia/blob/master/src/cassiopeia/engine/timing.clj">copy and paste</a>), thanks to the hard work of <a href="https://github.com/samaaron">Sam Aaron</a>.</p>

<p>The key concept to take away is there are two types of timing, a beat counter which is forever incrementing and a beat trigger which flips back and forth between 1/0.</p>

<p>```clojure
(require &lsquo;[cassiopeia.engine.timing :as time])</p>

<p>;;The beat trigger
(:beat time/main-beat) ;=> 0,1,0,1,0,1,0</p>

<p>;;The beat counter
(:count time/main-beat) ;=> 0,1,2,3,4,5,6,7,8,9
```</p>

<p>The counter is useful for indexing buffers, the trigger is useful in controlling the gate of an envelope (which turns a sound on or off).</p>

<p>In Clojure we can still get access to the beat, in our timing code we send a message using <code>send-trig</code> on every beat. We can hook a Clojure function to callback on this beat:</p>

<p>```
(on-trigger (:trig-id time/main-beat)
  (fn [beat-no]</p>

<pre><code>(when (= 0.0 (mod beat-no 32))
  ;;play a sample
  (boom-s)))
</code></pre>

<p>  ::on-beat-trigger)
```</p>

<p>I use this extensively to time graphic transitions with the music.</p>

<h6>Buffers</h6>

<p>Most of my live coding performance was writing to buffers which are hooked into synths. Buffers are just fixed size arrays but they are stored in Supercollider rather than in Clojure. Here is an example from The Stars where the midi notes are read from a buffer at a rate based on my beat timing signal (a 16th of the main beat here).</p>

<p>```clojure
(use &lsquo;overtone.live)
(use 'cassiopeia.engine.core)
(require &rsquo;[cassiopeia.engine.timing :as time])</p>

<p>(defsynth growl [out-bus 0 note-buf 0 beat-bus 0 beat-trg-bus 0 amp 1]
  (let [cnt (in:kr beat-bus)</p>

<pre><code>    trg (in:kr beat-trg-bus)
    note (buf-rd:kr 1 note-buf cnt)
    freq (midicps note)
    vol (&gt; note 0)

    e (env-gen (perc :attack 10 :sustain 1 :release 1) :gate trg)
    src (lpf (mix [(saw (* 0.25 freq))
                   (sin-osc (* 1.01 freq))]))
    src (pitch-shift src 0.4 1 0 0.01)
    src (pan2:ar (* vol amp e src))]
(out out-bus src)))
</code></pre>

<p>(defonce nebular (buffer 96))</p>

<p>(def nebula (growl :note-buf nebula-note-buf :beat-trg-bus (:beat time/beat-16th) :beat-bus (:count time/beat-16th)))</p>

<p>(pattern! nebula-note-buf (degrees [1 3 7] :major :A2))
```</p>

<h4>GLSL + Shadertone:  <a href="https://github.com/overtone/shadertone">https://github.com/overtone/shadertone</a></h4>

<p>Shaders generate imagery directly on your Graphics Processing Unit rather than going through your CPU. Through a language called GLSL (which is C like) we can express very simple functions which get called on every single pixel generating complex visuals. Here is a simple extract from The Stars that generates all the background small dots:</p>

<p><img src="/images/glsl-dots.png" alt="" /></p>

<p>```glsl
void main(void){
  vec2 current_pixel_position = mod(gl_FragCoord.xy, vec2(5.0)) &ndash; vec2(0.0);
  float distance_squared = dot(current_pixel_position, current_pixel_position);</p>

<p>  vec4 black = vec4(.0, .0, .0, 0.0);
  vec4 white = vec4(1.0, 1.0, 1.0, 1.0);</p>

<p>  //Test the current pixel position and if it should be a circle shade it.
  vec4 circles = (distance_squared &lt; 0.6) ? white : black;</p>

<p>  gl_FragColor = circles;
}
```</p>

<p>For more examples of whats possible with Shaders checkout <a href="https://www.shadertoy.com">Shader Toy</a></p>

<p>Shadertone is the Clojure library that provides a convenient way of running shaders from Clojure and for feeding in data about our synths. It provides access in your Shader to:</p>

<ul>
<li>Overtone&rsquo;s Volume (<code>iOvertoneVolume</code>)</li>
<li>The frequency spectrum &amp; audio waveform data (Passed as a 2D texture <code>:textures [:overtone-audio]</code>)</li>
</ul>


<p>To synchronize the graphics with the music I created a special Overtone synth which does not generate any sound, it instead feeds information in realtime to my shader.</p>

<p>```clojure
(use &lsquo;overtone.live)
(require &rsquo;[shadertone.core :as t])</p>

<p>;;A synth that exposes through taps all the lovely timing information.
(defsynth buffer->tap [beat-buf 0 beat-bus 0 beat-size 16 measure 6]
  (let [cnt (in:kr beat-bus)</p>

<pre><code>    beat (buf-rd:kr 1 beat-buf cnt)
    _  (tap "beat"          60 (a2k beat))
    _  (tap "beat-count"    60 (a2k (mod cnt beat-size)))
    _  (tap "measure-count" 60 (a2k (/ (mod cnt (* measure beat-size)) measure)))])
</code></pre>

<p>  (out 0 0))</p>

<p>;;; Used to store our drum beat, 1 for a hit 0 and for a miss
(defonce drum-sequence-buffer (buffer 256))</p>

<p>(def beats (buffer->tap drum-sequence-buffer (:count timing/main-beat)))</p>

<p>;;Open a OpenGL window running our shader
(t/start-fullscreen &ldquo;resources/shaders/electric.glsl&rdquo;</p>

<pre><code>                :user-data {
                "iBeat"         (atom {:synth beats :tap "beat"})
                "iBeatCount"    (atom {:synth beats :tap "beat-count"})
                "iMeasureCount" (atom {:synth beats :tap "measure-count"})})
</code></pre>

<p>```</p>

<p>Inside our shader code:</p>

<p><code>glsl
uniform float iBeat;
uniform float iBeatCount;
uniform float iMeasureCount;
...
</code></p>

<p>The other main way of controlling a shader from Clojure is using <code>atoms</code>.</p>

<p>```clojure
(require &lsquo;[shadertone.core :as t])</p>

<p>(defonce cellular-growth (atom 0.0))</p>

<p>(t/start-fullscreen &ldquo;resources/shaders/electric.glsl&rdquo; :user-data {&ldquo;iCellularGrowth&rdquo; cellular-growth})</p>

<p>(swap! cellular-growth + 0.01)
```</p>

<h4>Hardware: Monome: <a href="http://monome.org">http://monome.org</a></h4>

<p>Something you don&rsquo;t see in the video is that I&rsquo;m using a 8x16 <a href="http://monome.org">Monome</a>. For this performance its primary function was a visual aid to show the beat/measure information.</p>

<p><img src="/images/monome.jpg" alt="Monome" /></p>

<p>The hardware is driven by Clojure communicating with the Monome through a serial port: <a href="https://github.com/josephwilk/monome-serial/tree/protocols">https://github.com/josephwilk/monome-serial/tree/protocols</a></p>

<h1>Live Coding</h1>

<p>Live coding music and graphics combines skills in sound engineering, 3d graphics, geometry, physics, musical theory, composition, improvisation &amp; hardware to name a few.</p>

<p>It is difficult, and requires a lot of work and practice.</p>

<p>But of all the code I&rsquo;ve written over the years this is one of the things I&rsquo;m most proud of. And i&rsquo;m only at the beginning of discovering what&rsquo;s possible.</p>
]]></content>
  </entry>
  
</feed>
