<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: clojure | Joseph Wilk]]></title>
  <link href="http://blog.josephwilk.net/clojure/atom.xml" rel="self"/>
  <link href="http://blog.josephwilk.net/"/>
  <updated>2017-02-07T14:43:09+00:00</updated>
  <id>http://blog.josephwilk.net/</id>
  <author>
    <name><![CDATA[Joseph Wilk]]></name>
    <email><![CDATA[joe@josephwilk.net]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Functions Explained Through Patterns]]></title>
    <link href="http://blog.josephwilk.net/clojure/functions-explained-through-patterns.html"/>
    <updated>2017-02-07T14:00:00+00:00</updated>
    <id>http://blog.josephwilk.net/clojure/functions-explained-through-patterns</id>
    <content type="html"><![CDATA[<p>Exploring patterns as a means of documenting Clojure functions to aid recall and understanding.</p>

<p>Whats the difference in Clojure between:
<code>partition</code> and <code>partition-all</code>?
<code>interpose</code> and <code>interleave</code>?
<code>cons</code> and <code>conj</code>?</p>

<h2>Documenting Functions</h2>

<p>All non-side effecting functions create or alter a pattern. To explain a function&rsquo;s pattern we use a number of descriptions.</p>

<ul>
<li>A function signature:</li>
</ul>


<p><code>(nthrest col nth)</code></p>

<ul>
<li>A textual description:</li>
</ul>


<p><code>
Returns a lazy seq of the elements of coll separated by sep.
Returns a stateful transducer when no collection is provided.
</code></p>

<ul>
<li>Examples showing application of the function:</li>
</ul>


<p><code>clojure
(interpose 1.0 [0.3 0.4])
;;=&gt; [0.3 1.0 0.4 1.0]
</code></p>

<h2>Exploration vs Recall</h2>

<p>As someone with a brain far more orientated to visuals than text I struggled to remember and understand many Clojure functions: <code>nthrest</code>, <code>conj</code> <code>cons</code>, etc.
The documentation of patterns in the Clojure documentation is all text. Even with the documentation brought into the editor I struggle. Example from <a href="https://github.com/clojure-emacs/cider">Cider</a> &amp; Emacs:</p>

<p><img src="http://blog.josephwilk.net/images/emacs-cider.png"></p>

<p>Clojure has a strong focus on REPL driven development. If you don&rsquo;t understand a function use an interactive REPL to explore examples.</p>

<p>Critically this favours <strong>discovery over recall</strong>. I can never remember the difference between <code>conj</code> and <code>cons</code>, but I can find out through the REPL.</p>

<p>To help aid memory and understanding I&rsquo;ve turn the examples of the collection orientated functions in Clojure into visual patterns. I won&rsquo;t try and make any general case on visuals vs text (Its a fuzzy research area: <a href="http://studiokayama.com/text-vs-visuals/">http://studiokayama.com/text-vs-visuals/</a>).</p>

<h2>Patterns for the visual brain</h2>

<p>Applying functions to collections of data using: <a href="https://github.com/josephwilk/functions-as-patterns">https://github.com/josephwilk/functions-as-patterns</a></p>

<h2><code>(butlast col)</code></h2>

<pre><code>Return a seq of all but the last item in coll, in linear time
</code></pre>

<div>
<span><span style="font-size: 2em;">(</span><code>butlast <img  style="vertical-align:middle" src="https://raw.githubusercontent.com/josephwilk/functions-as-patterns/master/doc/clojure.core%24butlast_arg0.png"> <span style="font-size: 2em;">)</span></code></span>
</div>


<div><code>;;=></code></div>


<div style="padding-bottom: 40px;">
<span><img src="https://raw.githubusercontent.com/josephwilk/functions-as-patterns/master/doc/clojure.core%24butlast_post.png"></span>
</div>


<h2><code>(concat x y)</code></h2>

<pre><code>Returns a lazy seq representing the concatenation of the elements
in the supplied colls.
</code></pre>

<div>
<span><span style="font-size: 2em;">(</span><code>concat <img  style="vertical-align:middle" src="https://raw.githubusercontent.com/josephwilk/functions-as-patterns/master/doc/clojure.core%24concat_arg0.png"> <img  style="vertical-align:middle" src="https://raw.githubusercontent.com/josephwilk/functions-as-patterns/master/doc/clojure.core%24concat_arg1.png"> <span style="font-size: 2em;">)</span></code></span>
</div>


<div><code>;;=></code></div>


<div style="padding-bottom: 40px;">
<span><img src="https://raw.githubusercontent.com/josephwilk/functions-as-patterns/master/doc/clojure.core%24concat_post.png"></span>
</div>


<h2><code>(conj coll x) (conj coll x &amp; xs)</code></h2>

<pre><code>conj[oin]. Returns a new collection with the xs
'added'. (conj nil item) returns (item).  The 'addition' may
happen at different 'places' depending on the concrete type.
</code></pre>

<h5><code>conj vector</code></h5>

<div>
<span><span style="font-size: 2em;">(</span><code>conj <img  style="vertical-align:middle" src="https://raw.githubusercontent.com/josephwilk/functions-as-patterns/master/doc/clojure.core%24conj_arg0_vec.png"> <img  style="vertical-align:middle" src="https://raw.githubusercontent.com/josephwilk/functions-as-patterns/master/doc/clojure.core%24conj_arg1_vec.png"> <span style="font-size: 2em;">)</span></code></span>
</div>


<div><code>;;=></code></div>


<div style="padding-bottom: 40px;">
<span><img src="https://raw.githubusercontent.com/josephwilk/functions-as-patterns/master/doc/clojure.core%24conj_post_vec.png"></span>
</div>


<h5><code>conj list</code></h5>

<div>
<span><span style="font-size: 2em;">(</span><code>conj <img  style="vertical-align:middle" src="https://raw.githubusercontent.com/josephwilk/functions-as-patterns/master/doc/clojure.core%24conj_arg0_list.png"> <img  style="vertical-align:middle" src="https://raw.githubusercontent.com/josephwilk/functions-as-patterns/master/doc/clojure.core%24conj_arg1_list.png"> <span style="font-size: 2em;">)</span></code></span>
</div>


<div><code>;;=></code></div>


<div style="padding-bottom: 40px;">
<span><img src="https://raw.githubusercontent.com/josephwilk/functions-as-patterns/master/doc/clojure.core%24conj_post_list.png"></span>
</div>


<h2><code>(cons x seq)</code></h2>

<pre><code>Returns a new seq where x is the first element and seq is
the rest.
</code></pre>

<div>
<span><span style="font-size: 2em;">(</span><code>cons <img  style="vertical-align:middle" src="https://raw.githubusercontent.com/josephwilk/functions-as-patterns/master/doc/clojure.core%24cons_arg0.png"> <img  style="vertical-align:middle" src="https://raw.githubusercontent.com/josephwilk/functions-as-patterns/master/doc/clojure.core%24cons_arg1.png"> <span style="font-size: 2em;">)</span></code></span>
</div>


<div><code>;;=></code></div>


<div style="padding-bottom: 40px;">
<span><img src="https://raw.githubusercontent.com/josephwilk/functions-as-patterns/master/doc/clojure.core%24cons_post.png"></span>
</div>


<h2><code>(distinct col)</code></h2>

<pre><code>Returns a lazy sequence of the elements of coll with duplicates removed.
Returns a stateful transducer when no collection is provided.
</code></pre>

<div>
<span><span style="font-size: 2em;">(</span><code>distinct <img  style="vertical-align:middle" src="https://raw.githubusercontent.com/josephwilk/functions-as-patterns/master/doc/clojure.core%24distinct_arg0.png"> <span style="font-size: 2em;">)</span></code></span>
</div>


<div><code>;;=></code></div>


<div style="padding-bottom: 40px;">
<span><img src="https://raw.githubusercontent.com/josephwilk/functions-as-patterns/master/doc/clojure.core%24distinct_post.png"></span>
</div>


<h2><code>(drop-last n col)</code></h2>

<pre><code>Return a lazy sequence of all but the last n (default 1) items in coll
</code></pre>

<div>
<span><span style="font-size: 2em;">(</span><code>drop-last 2 <img  style="vertical-align:middle" src="https://raw.githubusercontent.com/josephwilk/functions-as-patterns/master/doc/clojure.core%24drop_last_arg1.png"> <span style="font-size: 2em;">)</span></code></span>
</div>


<div><code>;;=></code></div>


<div style="padding-bottom: 40px;">
<span><img src="https://raw.githubusercontent.com/josephwilk/functions-as-patterns/master/doc/clojure.core%24drop_last_post.png"></span>
</div>


<h2><code>(flatten col)</code></h2>

<pre><code>Takes any nested combination of sequential things (lists, vectors,
etc.) and returns their contents as a single, flat foldable
collection.
</code></pre>

<div>
<span><span style="font-size: 2em;">(</span><code>flatten <img  style="vertical-align:middle" src="https://raw.githubusercontent.com/josephwilk/functions-as-patterns/master/doc/clojure.core%24flatten_arg0.png"> <span style="font-size: 2em;">)</span></code></span>
</div>


<div><code>;;=></code></div>


<div style="padding-bottom: 40px;">
<span><img src="https://raw.githubusercontent.com/josephwilk/functions-as-patterns/master/doc/clojure.core%24flatten_post.png"></span>
</div>


<h2><code>(interpose col col)</code></h2>

<pre><code>Returns a lazy seq of the elements of coll separated by sep.
Returns a stateful transducer when no collection is provided.
</code></pre>

<div style="padding-bottom: 10px;">
<span><span style="font-size: 2em;">(</span><code>interpose <img  style="vertical-align:middle" src="https://raw.githubusercontent.com/josephwilk/functions-as-patterns/master/doc/clojure.core%24interpose_arg0.png"> <img  style="vertical-align:middle" src="https://raw.githubusercontent.com/josephwilk/functions-as-patterns/master/doc/clojure.core%24interpose_arg1.png"><span style="font-size: 2em;">)</span></code></span>
</div>


<div><code>;;=></code></div>


<div style="padding-bottom: 40px;">
<span><img src="https://raw.githubusercontent.com/josephwilk/functions-as-patterns/master/doc/clojure.core%24interpose_post.png"></span>
</div>


<h2><code>(interleave col col)</code></h2>

<pre><code>Returns a lazy seq of the first item in each coll, then the second etc.
</code></pre>

<div>
<span><span style="font-size: 2em;">(</span><code>interleave <img  style="vertical-align:middle" src="https://raw.githubusercontent.com/josephwilk/functions-as-patterns/master/doc/clojure.core%24interleave_arg0.png"> <img  style="vertical-align:middle" src="https://raw.githubusercontent.com/josephwilk/functions-as-patterns/master/doc/clojure.core%24interleave_arg1.png"><span style="font-size: 2em;">)</span></code></span>
</div>


<div><code>;;=></code></div>


<div style="padding-bottom: 40px;">
<span><img src="https://raw.githubusercontent.com/josephwilk/functions-as-patterns/master/doc/clojure.core%24interleave_post.png"></span>
</div>


<h2><code>(nthnext col n)</code></h2>

<pre><code>Returns the nth next of coll, (seq coll) when n is 0.
</code></pre>

<div>
<span><span style="font-size: 2em;">(</span><code>nthnext <img  style="vertical-align:middle" src="https://raw.githubusercontent.com/josephwilk/functions-as-patterns/master/doc/clojure.core%24nthnext_arg0.png"> 3<span style="font-size: 2em;">)</span></code></span>
</div>


<div><code>;;=></code></div>


<div style="padding-bottom: 40px;">
<span><img src="https://raw.githubusercontent.com/josephwilk/functions-as-patterns/master/doc/clojure.core%24nthnext_post.png"></span>
</div>


<h2><code>(nthrest n col)</code></h2>

<pre><code>Returns the nth rest of coll, coll when n is 0.
</code></pre>

<div>
<span><span style="font-size: 2em;">(</span><code>nthrest 3 <img  style="vertical-align:middle" src="https://raw.githubusercontent.com/josephwilk/functions-as-patterns/master/doc/clojure.core%24nthrest_arg0.png"><span style="font-size: 2em;">)</span></code></span>
</div>


<div><code>;;=></code></div>


<div style="padding-bottom: 40px;">
<span><img src="https://raw.githubusercontent.com/josephwilk/functions-as-patterns/master/doc/clojure.core%24nthrest_post.png"></span>
</div>


<h2><code>(partition n col)</code></h2>

<pre><code>Returns a lazy sequence of lists of n items each, at offsets step apart.
If step is not supplied, defaults to n, i.e. the partitions do not overlap.
If a pad collection is supplied, use its elements as necessary to complete
last partition upto n items. In case there are not enough padding elements,
return a partition with less than n items.
</code></pre>

<div>
<span><span style="font-size: 2em;">(</span><code>partition 3 <img  style="vertical-align:middle" src="https://raw.githubusercontent.com/josephwilk/functions-as-patterns/master/doc/clojure.core%24partition_arg1.png"> <span style="font-size: 2em;">)</span></code></span>
</div>


<div><code>;;=></code></div>


<div style="padding-bottom: 40px;">
<span><img src="https://raw.githubusercontent.com/josephwilk/functions-as-patterns/master/doc/clojure.core%24partition_post.png"></span>
</div>


<h2><code>(partition-all n col)</code></h2>

<pre><code>Returns a lazy sequence of lists like partition, but may include
partitions with fewer than n items at the end.  Returns a stateful
transducer when no collection is provided.
</code></pre>

<div>
<span><span style="font-size: 2em;">(</span><code>partition-all 3 <img  style="vertical-align:middle" src="https://raw.githubusercontent.com/josephwilk/functions-as-patterns/master/doc/clojure.core%24partition_all_arg1.png"> <span style="font-size: 2em;">)</span></code></span>
</div>


<div><code>;;=></code></div>


<div style="padding-bottom: 40px;">
<span><img src="https://raw.githubusercontent.com/josephwilk/functions-as-patterns/master/doc/clojure.core%24partition_all_post.png"></span>
</div>


<h2><code>(replace smap col)</code></h2>

<pre><code>Given a map of replacement pairs and a vector/collection, returns a vector/seq
with any elements = a key in smap replaced with the corresponding val in smap.  
Returns a transducer when no collection is provided.
</code></pre>

<div>
<span><span style="font-size: 2em;">(</span><code>replace <img  style="vertical-align:middle" src="https://raw.githubusercontent.com/josephwilk/functions-as-patterns/master/doc/clojure.core%24replace_arg0.png"> [0 3 4] <span style="font-size: 2em;">)</span></code></span>
</div>


<div><code>;;=></code></div>


<div style="padding-bottom: 40px;">
<span><img src="https://raw.githubusercontent.com/josephwilk/functions-as-patterns/master/doc/clojure.core%24replace_post.png"></span>
</div>


<h2><code>(rest col)</code></h2>

<pre><code>Returns a possibly empty seq of the items after the first. Calls seq on its
argument.
</code></pre>

<div>
<span><span style="font-size: 2em;">(</span><code>rest <img  style="vertical-align:middle" src="https://raw.githubusercontent.com/josephwilk/functions-as-patterns/master/doc/clojure.core%24rest_arg0.png"> <span style="font-size: 2em;">)</span></code></span>
</div>


<div><code>;;=></code></div>


<div style="padding-bottom: 40px;">
<span><img src="https://raw.githubusercontent.com/josephwilk/functions-as-patterns/master/doc/clojure.core%24rest_post.png"></span>
</div>


<h2><code>(reverse col)</code></h2>

<pre><code>Returns a seq of the items in coll in reverse order. Not lazy.
</code></pre>

<div>
<span><span style="font-size: 2em;">(</span><code>reverse <img  style="vertical-align:middle" src="https://raw.githubusercontent.com/josephwilk/functions-as-patterns/master/doc/clojure.core%24reverse_arg0.png"> <span style="font-size: 2em;">)</span></code></span>
</div>


<div><code>;;=></code></div>


<div style="padding-bottom: 40px;">
<span><img src="https://raw.githubusercontent.com/josephwilk/functions-as-patterns/master/doc/clojure.core%24reverse_post.png"></span>
</div>


<h2><code>(shuffle coll)</code></h2>

<pre><code>Return a random permutation of coll.
</code></pre>

<div>
<span><span style="font-size: 2em;">(</span><code>shuffle <img style="vertical-align:middle" src="https://raw.githubusercontent.com/josephwilk/functions-as-patterns/master/doc/clojure.core%24shuffle_arg0.png"> <span style="font-size: 2em;">)</span></code></span>
</div>


<div><code>;;=></code></div>


<div style="padding-bottom: 40px;">
<span><img src="https://raw.githubusercontent.com/josephwilk/functions-as-patterns/master/doc/clojure.core%24shuffle_post.png"></span>
</div>


<h2><code>(sort coll)</code></h2>

<pre><code>Returns a sorted sequence of the items in coll. If no comparator is
supplied, uses compare.  comparator must implement
java.util.Comparator.  Guaranteed to be stable: equal elements will
not be reordered.  If coll is a Java array, it will be modified.  To
avoid this, sort a copy of the array.
</code></pre>

<div>
<span><span style="font-size: 2em;">(</span><code>sort <img style="vertical-align:middle" src="https://raw.githubusercontent.com/josephwilk/functions-as-patterns/master/doc/clojure.core%24sort_arg0.png"> <span style="font-size: 2em;">)</span></code></span>
</div>


<div><code>;;=></code></div>


<div style="padding-bottom: 40px;">
<span><img src="https://raw.githubusercontent.com/josephwilk/functions-as-patterns/master/doc/clojure.core%24sort_post.png"></span>
</div>


<h2><code>(take-nth n coll)</code></h2>

<pre><code>Returns a lazy seq of every nth item in coll.
</code></pre>

<div>
<span><span style="font-size: 2em;">(</span><code>take-nth 3 <img style="vertical-align:middle" src="https://raw.githubusercontent.com/josephwilk/functions-as-patterns/master/doc/clojure.core%24take_nth_arg1.png"> <span style="font-size: 2em;">)</span></code></span>
</div>


<div><code>;;=></code></div>


<div style="padding-bottom: 40px;">
<span><img src="https://raw.githubusercontent.com/josephwilk/functions-as-patterns/master/doc/clojure.core%24take_nth_post.png"></span>
</div>


<h2><code>(split-at n col)</code></h2>

<pre><code>Returns a vector of [(take n coll) (drop n coll)]
</code></pre>

<div>
<span><span style="font-size: 2em;">(</span><code>split-at 2 <img  style="vertical-align:middle" src="https://raw.githubusercontent.com/josephwilk/functions-as-patterns/master/doc/clojure.core%24split_at_arg1.png"> <span style="font-size: 2em;">)</span></code></span>
</div>


<div><code>;;=></code></div>


<div style="padding-bottom: 40px;">
<span><img src="https://raw.githubusercontent.com/josephwilk/functions-as-patterns/master/doc/clojure.core%24split_at_post.png"></span>
</div>


<h2>Conclusions</h2>

<p>As someone who performs live coding to an audience I perhaps have a different value on recall vs exploration. Hundreds of eyes staring at you tends to have that effect.
While some examples are stronger through patterns than others, at least for myself the use of a visual aid as part of development and documentation is beneficial. Its the only way I can the remember the oddity of <code>conj</code>.</p>

<p>Within my REPL interaction I use the <a href="https://github.com/josephwilk/functions-as-patterns">functions-as-patterns</a> toolkit, providing a higher level representation of the patterns and data. I can understand a drum pattern faster through colour than I can through a 1 &amp; 0 data structure.</p>

<p>In creating the cheatsheet the value of the comparison of functions through patterns also became clear. I discovered almost identical functions such as <code>nthnext</code> and <code>nthrest</code> which only differed in a special case (with an empty sequence).</p>

<h3>Problems of turning data into colour</h3>

<p>While this visual cheatsheet is useful there are caveats:</p>

<h4>Semantic&rsquo;s of arguments</h4>

<p>Its not always clear if an argument is an index or a value. If we look at the <code>replace</code> function example:</p>

<p><code>(replace (take 5 (hues-of-color)) [0 3 4])</code></p>

<p>0,3 &amp; 4 are references to indices within the first argument. Ideally it would be nice to replace those with the relevant colour.
However the functions-as-patterns library cannot tell these are not values, it assumes everything is a value. Hence you end up with <code>[0 3 4]</code> drawn in shades of black:</p>

<p><img src="https://raw.githubusercontent.com/josephwilk/functions-as-patterns/master/doc/clojure.core%24replace_arg1.png"></p>

<h4>Pattern of emptyness</h4>

<p>I&rsquo;ve not tried to visually represent, <code>empty</code> or <code>nil</code>. Some functions are defined by the difference in handling the empty case. The patterns might mis-lead you to think <code>nthnext</code> and <code>nthrest</code> are identical when they are not.</p>

<h4>What type is a square?</h4>

<p>Clojure has multiple types of sequences, <code>char-arrays</code>, <code>lists</code>, <code>vectors</code>, <code>lazy-seq</code> ,etc. To keep the visual pattern simple I&rsquo;ve not represented these types.</p>

<h4>Functions applying functions</h4>

<p>I&rsquo;ve purposely skipped the <code>map</code>/<code>reduce</code>/<code>remove</code>/<code>filter</code> functions as they tend to mix two patterns together. That of the core function and the applied function. The value of the patterns gets lost.</p>

<h4>Brains seek patterns.</h4>

<p>Do you see a pattern in the randomness? A single example might reveal a false pattern. Many examples would be required to re-enforce the randomness of the resulting patterns. Example <code>shuffle</code>.</p>

<h4>Ordering</h4>

<p>Colours don’t always imply a logical order. Example <code>sort</code>.</p>

<h2>Sources</h2>

<p>Inspired by the work of Alex McLean (<a href="https://github.com/yaxu">@yaxu</a>) using visual patterns to explain the live coding language Tidal: <a href="https://www.academia.edu/467099/TIDAL_PATTERN_LANGUAGE_FOR_LIVE_CODING_OF_MUSIC">Tidal Pattern Language for Live Coding of Music</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure and Kinesis at scale]]></title>
    <link href="http://blog.josephwilk.net/clojure/clojure-and-kinesis-at-scale.html"/>
    <updated>2015-09-30T15:58:12+01:00</updated>
    <id>http://blog.josephwilk.net/clojure/clojure-and-kinesis-at-scale</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been working over the last year in the data team at SoundCloud building a realtime data pipeline using Clojure and Amazon&rsquo;s Kinesis. Kinesis is Amazons equivalent to Kafka, &ldquo;Real-Time data processing on the Cloud&rdquo;. This is a summary of what was built, some lessons learnt and all the details in-between.</p>

<p><figure>
<img src="http://blog.josephwilk.net/images/kinesis_pipeline.png" alt="Kinesis pipeline"/>
<figcaption>Fig1: Overall System flow</figcaption>
</figure></p>

<h2>Tapping Real traffic</h2>

<p>The first step was to tee the traffic from a live system to a test system without comprising its function.
The main function of the live system is logging JSON events to file (which eventually end up somewhere like HDFS).
Tailing the logs of the live system gives us access to the raw data we want to forward on to our test system.
A little Go watches the logs, parses out the data and then forwards them in batch to test instances that will push to kinesis. Hence we had live data flowing through the system and after launch a test setup to experiment with. <a href="https://twitter.com/brapse">Sean Braithwaite</a> was the mastermind behind this little bit of magic.</p>

<p><figure>
<img src="http://blog.josephwilk.net/images/canary.png" alt="Canary Kinesis pipeline"/>
<figcaption>Tapping Traffic</figcaption>
</figure></p>

<h2>Sending to Kinesis</h2>

<p>All kinesis sending happens in an application called the EventGateway (also written in Clojure). This endpoint is one of the heaviestly loaded services in SoundCloud (at points it has more traffic than the rest of SoundCloud combined). The Eventgateway does a couple of things but at its core it validates and broadcasts JSON messages. Hence this is where our Kinesis client slots in.</p>

<h5>Squeezing Clojure Reflection</h5>

<p>Its worth mentioning that in order for the Eventgateway service to be performant we had to remove all reflection in tight loops through type hints. It simply could not keep up without this. It became a common pattern to turn reflection warnings on while working in Clojure.</p>

<p>Project.clj
<code>clojure
:profiles {:dev {:global-vars {*warn-on-reflection* true *assert* false}}}
</code></p>

<h4>Kinesis</h4>

<p>The Eventgateway posts to Kinesis in batch using a <a href="http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/ConcurrentLinkedQueue.html">ConcurrentLinkedQueue</a> and separate producers and consumers. Messages are pushed into a <code>ConcurrentLinkedQueue</code>. We rolled our own Clojure kinesis client using Amazons Java library rather than using <a href="https://github.com/mcohen01/amazonica">Amazonica</a>.</p>

<p><code>clojure
;; Java Amazon libraries used
[com.amazonaws/aws-java-sdk "1.9.33"         :exclusions [joda-time]]
[com.amazonaws/amazon-kinesis-client "1.1.0" :exclusions [joda-time]]
</code>
Amazonica was good to get started quickly in the initial phase but there are a couple of reasons we switched to our own unique snowflake (which still looked a little like Amazonica):</p>

<ul>
<li>Amazonica did not support batch mode for Kinesis. Under initial tests it was impossible to scale this without batch.</li>
<li>Injecting our own telemetry at low levels to learn more about Kinesis running.</li>
<li>Some of its sensible defaults where not so sensible (for example default encoding the data using nippy).</li>
<li>Ultimately most of any Kinesis client/server is configuration and tuning.</li>
<li>Amazonica&rsquo;s source is hard to read with a little too much <code>alter-var-root</code> going on.</li>
</ul>


<p>```clojure
;;Ugh. Its not just me right?
(alter-var-root
  #&lsquo;amazonica.aws.kinesis/get-shard-iterator
  (fn [f]</p>

<pre><code>(fn [&amp; args]
  (:shard-iterator (apply f args)))))
</code></pre>

<p>```</p>

<h4>Pushing Messages in a Queue</h4>

<p>Very simple, just adding a message to the <code>ConcurrentLinkedQueue</code>. A environment variable allows us to gradually scale up or down the percentage of traffic that is added to the queue.</p>

<p>```clojure
(require &lsquo;[environ.core :refer :all])</p>

<p>(def kinesis-message-queue (ConcurrentLinkedQueue.))
(def hard-limit-queue-size 1000)
(def queue-size (atom 0))</p>

<p>(defn send [message]
  (when-let [threshold (env :kinesis-traffic)]</p>

<pre><code>(when (&gt; (rand-int 100) (- 100 (or (Integer/valueOf ^String threshold) 0)))
(when (&lt;= @queue-size hard-limit-queue-size)
  (.add kinesis-message-queue message)
  (swap! queue-size inc)))))
</code></pre>

<p>```</p>

<h5>Failure</h5>

<p>The queue pusher operates within a wider system and any failures due to Amazon being unreachable should not impede the function of the system. For the client this means:</p>

<ul>
<li>Not exceeding memory limits with a hard queue size (since ConcurrentLinkedQueue is unbound in size).</li>
<li>Backing off workers if the queue is full to prevent cpu throttling.</li>
</ul>


<p>When we cannot send messages to kinesis we instead log them to disk, and into our normal logging pipeline (usually ending up in HDFS). Hence we coule replay at a later date if required.</p>

<h4>Sending batches to Kinesis</h4>

<p>The workers, operating in separate threads consuming messages from the <code>ConcurrentLinkedQueue</code> collecting them into a batch:</p>

<p>```clojure</p>

<pre><code>(loop [batch []
       batch-start-time (time/now)
       poll-misses 0]
  (if (batch-ready-to-send? batch batch-start-time)
    batch
    (if-let [event (.poll kinesis-message-queue)]
      (do
        (swap! queue-size dec)
        (recur (conj batch event) batch-start-time 0))
      (do
        (Thread/sleep (exponential-backoff-sleep poll-misses))
        (recur batch batch-start-time (inc poll-misses))))))))
</code></pre>

<p>```</p>

<p>When polling from the queue an exponential back-off if no messages are on the queue.</p>

<p>```clojure
(defn exponential-backoff-sleep
  &ldquo;Exponential backoff with jitter and a max &rdquo;
  [misses]
  (let [max-timeout 1000</p>

<pre><code>    jitter-order 10]
(Math/min
 max-timeout
 (Math/round (+ (Math/exp misses)
                (* (Math/random)
                   jitter-order))))))
</code></pre>

<p>```</p>

<p>Once the batch is ready (in terms of age or size) its sent to Kinesis.</p>

<p>```
(defn- send-events
  &ldquo;Perform putRecords request to send the batch to kinesis
   returns a list of events that failed.&rdquo;
  [^AmazonKinesisClient client stream-name events]
  (try+
   (let [result (.putRecords client (events->put-records-request events stream-name telemetry))]</p>

<pre><code> (if (pos? (.getFailedRecordCount result))
   (let [failed-events (failures-&gt;events result events)]
     (count-failures telemetry (failures-&gt;error-codes result))
     failed-events)
   []))
</code></pre>

<p>```</p>

<p>Note this is where we also decided the partition key. In our case its important for the same user to be located on the same partition.
For example when consuming from Kinesis a worker is allocated a partition to work from and would miss events if they where across multiple partitions.</p>

<p>```clojure
(defn- events->put-records-request
  &ldquo;Take client and a vector of JsonNodes and produce a PutRecord&rdquo;
  [batch event-stream]
  (let [batch-list  (java.util.ArrayList.)</p>

<pre><code>    put-request (PutRecordsRequest.)]
(.setStreamName put-request event-stream)
(doseq [^ObjectNode event batch]
  (.remove event ^String failure-metadata)
  (let [request-entry (PutRecordsRequestEntry.)
        request-data  (.getBytes (str event))
        request-buf   (ByteBuffer/wrap request-data 0 (alength request-data))
        partition-key (:user-id event)]
    (doto request-entry
      (.setData         request-buf)
      (.setPartitionKey partition-key))
    (.add batch-list request-entry)))
(.setRecords put-request batch-list)
put-request))
</code></pre>

<p>```</p>

<h5>Failure</h5>

<p>Failure can occur on individual records within a batch or in the batch as a whole.</p>

<h6>Individual failures</h6>

<ol>
<li>These messages are re-added to the queue so we can try again. If the messages fail for some nth time they are considered invalid and rejected from kinesis and logged as an error.</li>
</ol>


<h6>Batch level</h6>

<ol>
<li><p>Amazon had an Internal Failure. We don&rsquo;t know what went wrong. (We see this regularly in normal function).</p></li>
<li><p>Amazon Kinesis is not resolvable (AmazonClientException/AmazonServiceException).</p></li>
<li><p>Exceeding the read/write limits of Kinesis (ProvisionedThroughputExceededException).</p></li>
</ol>


<p>This is our backpressure signal, in which case at worst we need to log to disk for replay later</p>

<h2>Consuming Messages from Kinesis</h2>

<p>With the consumption of events we have a different application stream for every worker. All workers have their own streams, and own checkpoints so they operate independently of each other. Some example of the workers we gave running:</p>

<ul>
<li>Logging Events to s3</li>
<li>Calculating listening time</li>
<li>Forwarding certain messages on to various other systems (like RabbitMQ).</li>
</ul>


<p>Launching a worker is pretty simple with the Amazon Java Kinesis library.</p>

<p>```
(:import [com.amazonaws.services.kinesis.clientlibrary.lib.worker Worker])</p>

<p>(defn -main [&amp; args]
  (let [worker-fn (fn [events] (print events))</p>

<pre><code>    config (KinesisClientLibConfiguration.   worker-fn  )   ;;I'm airbrushing over the Java classes
    processor (reify IRecordProcessorFactory worker-fn)   ;;Ultimately this is a lot of config wrapped in Java fun
    [^Worker worker uuid] (Worker. processor config)]                                            
      (future (.run worker))))
</code></pre>

<p>```</p>

<p>One of the hardest parts of setting up the a worker is getting the configuration right to ensure that the consumers are getting through the events fast enough. Events are held in Amazon for 24 hours after entry, and hence there is a minimum consumption rate.</p>

<p>Counting events in and events out with <a href="http://prometheus.io/">Prometheus</a> made it easier to get the correct consumption rates.
<img src="http://blog.josephwilk.net/images/kinesis_entry_exit_rates.png" alt="Entry/exit rates"/></p>

<p>Via the Amazon console you also get access to various graphs around read/write rates and limits:</p>

<p><img src="http://blog.josephwilk.net/images/amazon_kinesis_graphs.png"/></p>

<p>Finally you can also look at Amazon&rsquo;s Dynamodb instance for the Kinesis stream providing insight into metrics around leases, how many where revoked, stolen, never finished, etc.</p>

<p>Here is an example of one of our Kinesis workers configuration covered in scribblings of me trying to work out the right settings.</p>

<p>```clojure
  {
   ;;default 1 sec, cannot be lower than 200ms
   ;;If we are not reading fast enough this is a good value to tweak
   :idle-time-between-reads-in-millis 500</p>

<p>   ;;Clean up leases for shards that we&rsquo;ve finished processing (don&rsquo;t wait
   ;;until they expire)
   :cleanup-leases-upon-shard-completion true</p>

<p>   ;;If the heartbeat count does not increase within the configurable timeout period,
   ;;other workers take over processing of that shard.
   ;;<em>IMPORTANT</em> If this time is shorter than time for a worker to checkpoint all nodes
   ;;will keep stealing each others leases producing a lot of contention.
   :failover-time-millis &hellip;</p>

<p>   ;;Max records in a single returned in a <code>GetRecords</code>. Cannot exceed 10,000
   :max-records 4500</p>

<p>   ;;Process records even if GetRecords returned an empty record list.
   :call-process-records-even-for-empty-record-list false</p>

<p>   ;;Sleep for this duration if the parent shards have not completed processing,
   ;;or we encounter an exception.
   :parent-shard-poll-interval-millis 10000</p>

<p>   ;;By default, the KCL begins withs the most recently added record.
   ;;Instead always reads data from the beginning of the stream.
   :initial-position-in-stream  :TRIM_HORIZON}
```</p>

<h2>Monitoring</h2>

<p>Prometheus (<a href="http://prometheus.io/">http://prometheus.io/</a>) a monitoring tool built at SoundCloud was <em>core</em> to developing, scaling and monitoring all of this pipeline. Amazon does provide some useful graphs within the AWS console but more detailed feedback was very helpful even if it was removed later.</p>

<h4>Exception Logging pattern</h4>

<p>All Exceptions are counted and sent to log. This was a very useful pattern for driving out errors and spotting leaks in the interactions with Kinesis and consumption:</p>

<p>(Using a Clojure wrapper around Prometheus: <a href="https://github.com/josephwilk/prometheus-clj">https://github.com/josephwilk/prometheus-clj</a>)
<code>clojure
(try+
  (worker-fn raw-events)
(catch Exception e
  ;;Count based on exception class
  (inc-counter :failed-batches {:type worker-type :error-code (str (.getClass e))})
  (log/error e)))]
</code></p>

<p>Note Kinesis regularly spits out &ldquo;InternalFailure&rdquo; Exceptions. Thats all you get&hellip;</p>

<p><img src="http://blog.josephwilk.net/images/kinesis_failures.png" alt="Kinesis Internal failures"/></p>

<h2>A Cloud Pipeline in Pictures</h2>

<p>In my previous post about <a href="http://blog.josephwilk.net/clojure/building-clojure-services-at-scale.html">Building Clojure services at scale</a> I converted the system metrics to sound. With so many machines processing so many events its easy to loose track of the amount of work being done in the cloud.
To make this feel more real I captured metrics across all the machines involved and created 3d renderings using <a href="http://openframeworks.cc">OpenFrameworks</a> and meshes of the systems function:</p>

<p><img src="/images/soundcloud_kinesis.png" alt="" />
<img src="/images/soundcloud_kinesis2.png" alt="" /></p>

<h2>Thanks</h2>

<p>This work constitues a team effort by the Data team at SoundCloud. A lot of advice, collaboration and hard work. Kudos to everyone.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure and Overtone driving Minecraft]]></title>
    <link href="http://blog.josephwilk.net/clojure/overtone-driving-minecraft.html"/>
    <updated>2015-03-01T14:58:12+00:00</updated>
    <id>http://blog.josephwilk.net/clojure/overtone-driving-minecraft</id>
    <content type="html"><![CDATA[<p>Using Clojure we create interesting 3D shapes in Minecraft to the beat of music generated from Overtone.</p>

<p>We achieve this by embedding a Clojure REPL inside a Java Minecraft server which loads Overtone and connects to an external Supercollider instance (What Overtone uses for sound).</p>

<h3>Demo</h3>

<iframe src="http://player.vimeo.com/video/120907923" width="500" height="375" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>


<p>Demo Source code: <a href="https://github.com/josephwilk/clj-minecraft/blob/master/src/cljminecraft/overtone.clj">https://github.com/josephwilk/clj-minecraft/blob/master/src/cljminecraft/overtone.clj</a></p>

<h4>Tools</h4>

<ul>
<li>Java Minecraft server Craftbukkit/Spigot: <a href="http://www.spigotmc.org/">http://www.spigotmc.org/</a></li>
<li>Minecraft client (requires purchase) <a href="https://minecraft.net">https://minecraft.net</a></li>
<li>clj-minecraft Bukkit plugin: <a href="https://github.com/josephwilk/clj-minecraft">https://github.com/josephwilk/clj-minecraft</a></li>
<li>Overtone (patched): <a href="https://github.com/josephwilk/overtone/tree/minecraft_overtone">https://github.com/josephwilk/overtone/tree/minecraft_overtone</a></li>
<li>MUD (useful helpers for Overtone): <a href="https://github.com/josephwilk/mud">https://github.com/josephwilk/mud</a></li>
<li>Supercollider: <a href="http://supercollider.sourceforge.net">http://supercollider.sourceforge.net</a></li>
</ul>


<p>(Dependent on your IDE of choice)</p>

<ul>
<li>Emacs &ndash; cider: <a href="https://github.com/clojure-emacs/cider">https://github.com/clojure-emacs/cider</a></li>
<li>Vim   &ndash; fireplace: <a href="https://github.com/tpope/vim-fireplace">https://github.com/tpope/vim-fireplace</a></li>
</ul>


<h2>Building the world</h2>

<p>We need to install Spigot which is an optimized version of the Craftbukkit Java Minecraft server and install clj-minecraft project as a plugin. Things are complicated by Bukkit no longer being registered in Maven.</p>

<p>Read through the Makefile install:</p>

<p><a href="https://github.com/josephwilk/clj-minecraft/blob/master/Makefile">https://github.com/josephwilk/clj-minecraft/blob/master/Makefile</a></p>

<p>If your happy clone and run:</p>

<p><code>
git clone git@github.com:josephwilk/clj-minecraft.git &amp;&amp; make install
</code></p>

<p>Bukkit + clj-minecraft will be installed for you.</p>

<h2>Running the world</h2>

<p>You will need to edit the <code>minecraft/eula.txt</code> indicating you agree with the license. Then you can run your Minecraft server:</p>

<p><code>
java -XX:MaxPermSize=1G -jar spigot-1.8.jar
</code></p>

<h2>Seeing the world</h2>

<p>Buy and install a Minecraft client: <a href="https://minecraft.net">https://minecraft.net</a></p>

<p>Select >&ldquo;Multiplayer&rdquo; >&ldquo;Direct connect&rdquo; and enter the &ldquo;Server Address&rdquo; as localhost.</p>

<h1>Bring music to the world</h1>

<h3>Install and Boot Supercollider</h3>

<p><a href="http://supercollider.github.io">http://supercollider.github.io</a></p>

<p>Once installed:</p>

<p>```</p>

<h1>Find the Supercollider binary (scsynth)</h1>

<p>$ sudo find /. -name &ldquo;scsynth&rdquo;</p>

<p>/Applications/SuperCollider/SuperCollider.app/Contents/Resources/scsynth</p>

<h1>Run Supercollider server</h1>

<p>/Applications/SuperCollider/SuperCollider.app/Contents/Resources/scsynth -u 57110
```</p>

<h3>Speaking to the Minecraft REPL</h3>

<p>clj-minecraft opens a REPL on localhost port 4005.  Using emacs and <code>cider</code> connect to this REPL instance.</p>

<p>Boot and connect Overtone:</p>

<p>```clojure
(use &lsquo;overtone.core)</p>

<p>(connect-external-server)  #=> :happy-hacking
```</p>

<h3>Interaction</h3>

<p>Using <code>MUD</code> we have some useful wrappers around Overtone for scheduling functions on beats.</p>

<p>To coordinate graphics and sound we schedule both within a single function.</p>

<p>```clojure
(require &lsquo;[mud.core :as mud])</p>

<p>(defonce highhat-sample (freesound 53532))</p>

<p>(def ride-trigger
  (mud/on-beat-trigger 8       ;; Every 8th beat
   (fn []</p>

<pre><code> (highhat-sample)      ;; Play sample
 (block 2 10 2 :grass) ;; Place a block into the Minecraft world
</code></pre>

<p>)))
```</p>

<p>Most functions that change the state of the Minecraft world need to be run in the main GUI thread. To achieve this we wrap any state changing function within  <code>ui-sync</code> (<a href="https://github.com/CmdrDats/clj-minecraft/blob/a3331e925b56becf88d9ef96cab225856e2f7ead/src/cljminecraft/bukkit.clj#L39-L42">https://github.com/CmdrDats/clj-minecraft/blob/a3331e925b56becf88d9ef96cab225856e2f7ead/src/cljminecraft/bukkit.clj#L39-L42</a>).</p>

<p>For example a function to place a block into the Minecraft world:</p>

<p>```clojure
(import &lsquo;[org.bukkit Location Material])
(require &rsquo;[cljminecraft.bukkit :as bk])
(require &lsquo;[cljminecraft.items :as i])</p>

<p>(def player (first (.getOnlinePlayers (bk/server))))</p>

<p>(defn block
  &ldquo;place a block relative to current players position
  Example:</p>

<pre><code>(block 2 10 2 :grass)
</code></pre>

<p>  &ldquo;
  [x y z material]
  (let [l (.getLocation player))</p>

<pre><code>    m (i/get-material material)]
(doto l
  (.setX (+ x (.getX l)))
  (.setY (+ y (.getY l)))
  (.setZ (+ z (.getZ l))))
(bk/ui-sync
 @cljminecraft.core/clj-plugin
 (fn []
   (doto (.getBlock l)
     (.setData 0)
     (.setType (.getItemType m))
     (.setData (.getData m)))))))
</code></pre>

<p>```</p>

<p>For further documentation of whats possible, the Bukkit Java docs:
<a href="https://hub.spigotmc.org/javadocs/bukkit/">https://hub.spigotmc.org/javadocs/bukkit/</a></p>

<p>clj-minecaft has lots of helpers + examples: <a href="https://github.com/CmdrDats/clj-minecraft/tree/master/src/cljminecraft">https://github.com/CmdrDats/clj-minecraft/tree/master/src/cljminecraft</a></p>

<h2>Fun</h2>

<p>Create, play and share all the crazy things you can come up with using Clojure and Minecraft.</p>

<p><img src="http://blog.josephwilk.net/images/pig_algo_rave.png" width="450" alt="The Pig Algo Rave"/></p>

<p>For more live programming music and sound checkout my performances as Repl Electric: <a href="http://www.repl-electric.com">http://www.repl-electric.com</a></p>

<h2>Credits</h2>

<p>Built on the back of lots of great open source projects.
Thanks to the Craftbukkit/Spigot contributors, <a href="https://twitter.com/cmdrdats">@CmdrDats</a> for clj-minecraft and <a href="https://twitter.com/samaaron">@samaaron</a> for Overtone and inspiring this crazy journey with the musical <a href="http://sonic-pi.net/">Sonic Pi</a> (which supports combining music and Minecraft on the RaspberryPi).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creative Machines]]></title>
    <link href="http://blog.josephwilk.net/clojure/creative_machines.html"/>
    <updated>2014-02-23T13:23:00+00:00</updated>
    <id>http://blog.josephwilk.net/clojure/creative_machines</id>
    <content type="html"><![CDATA[<p>When Alan Turing asked if a machine can be intelligent one aspect of this question focused on &ldquo;could machines be creative&rdquo;?</p>

<p>Ada Lovelace seemed convinced that originality was not a feat a computer was capable of:</p>

<blockquote><p>it can do whatever we know how to order it to perform,
it has no pretensions whatever to originate anything</p></blockquote>

<p>Before we outrightly dismiss the idea of creative machines do we even understand what creativity is?</p>

<p>Join me on a journey examining these questions while also meeting a new generation of artists born through code. Looking into their hearts and brains examining different algorithms/techniques and there effectiveness at exhibiting creativity.</p>

<p><strong>Decide for yourself, can machines be creative?</strong></p>

<p>My Strangeloop talk: Creative Machines &ndash; <a href="http://www.infoq.com/presentations/ai-machine-creativity">http://www.infoq.com/presentations/ai-machine-creativity</a></p>

<p>Slides: <script async class="speakerdeck-embed" data-id="9b2acfa020760131db422ebaf23009b5" data-ratio="1.33333333333333" src="http://blog.josephwilk.net//speakerdeck.com/assets/embed.js"></script></p>

<p>Full source code: <a href="https://github.com/josephwilk/musical-creativity">https://github.com/josephwilk/musical-creativity</a></p>

<h3>Continuing the Journey</h3>

<p>In order to continue my research into creativity and music I&rsquo;ve started the project <a href="http://www.repl-electric.com">Repl Electric</a>.
A space for humans and machines to learn and create music together.</p>

<h2>Further Reading</h2>

<ul>
<li>The Creative Mind: Myths and Mechanisms <br/> <a href="http://www.amazon.com/The-Creative-Mind-Myths-Mechanisms/dp/0415314534">http://www.amazon.com/The-Creative-Mind-Myths-Mechanisms/dp/0415314534</a></li>
<li>Explaining Creativity: The Science of Human Innovation <br/> <a href="http://www.amazon.com/gp/product/0199737576">http://www.amazon.com/gp/product/0199737576</a></li>
<li>Artificial Intelligence and Literary Creativity: Inside the Mind of Brutus, A Storytelling Machine <br/> <a href="http://www.amazon.com/Artificial-Intelligence-Literary-Creativity-Storytelling/dp/0805819878">http://www.amazon.com/Artificial-Intelligence-Literary-Creativity-Storytelling/dp/0805819878</a>)</li>
<li>Computer Models of Musical Creativity <br/> <a href="http://www.amazon.com/Computer-Models-Musical-Creativity-David/dp/0262033380">http://www.amazon.com/Computer-Models-Musical-Creativity-David/dp/0262033380</a></li>
<li>Virtual Music: Computer Synthesis of Musical Style <br/> <a href="http://www.amazon.com/Virtual-Music-Computer-Synthesis-Musical/dp/0262532611/">http://www.amazon.com/Virtual-Music-Computer-Synthesis-Musical/dp/0262532611/</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sounds of the human brain]]></title>
    <link href="http://blog.josephwilk.net/clojure/sounds-of-the-human-brain.html"/>
    <updated>2013-12-02T13:23:00+00:00</updated>
    <id>http://blog.josephwilk.net/clojure/sounds-of-the-human-brain</id>
    <content type="html"><![CDATA[<p>What does your brain sound like? Does it sound like &ldquo;Rise of the Valkyrie&rdquo; or more like &ldquo;Hit me baby one more time&rdquo;?</p>

<h2>Step 1: Acquire a human brain (alive)</h2>

<p><img src="http://blog.josephwilk.net/images/brain.png" width="200px"></p>

<p>We are interested in capturing the brain waves. Specifically the:</p>

<ul>
<li>Delta waves: Deepest stages of sleep.</li>
<li>Beta waves:  Normal waking consciousness.</li>
<li>Alpha waves: Relaxation and meditation (creativity).</li>
<li>Theta waves: REM sleep (dreams).</li>
<li>Gamma waves: Hyper-alertness, perception, and integration of sensory input.</li>
</ul>


<h2>Step 2: EEG machine</h2>

<p>I am using a EEG machine brought from <a href="http://www.neurosky.com">Neurosky</a> which is rated as Research grade (whatever that means).
This measures voltage fluctuations resulting from ionic current flows within the neurons of the brain. While EEG machines are not the most accurate they are now reasonably cheap.</p>

<h2>Step 3: EEG &ndash;> Overtone</h2>

<p>In order to generate music I want to import the EEG brainwave data into <a href="http://overtone.github.io">Overtone</a>.</p>

<p>We interact with the EEG machine over a serial port. The most mature library for this interface is in Python so there is a little jiggery pokery to get the data into Overtone.</p>

<p><img src="http://blog.josephwilk.net/images/brain-diagram.png"></p>

<h4>The Brainwave Poller</h4>

<p>We use <a href="https://github.com/akloster/python-mindwave">https://github.com/akloster/python-mindwave</a> to interface with the EEG machines data.</p>

<p>Writing all the data out to a <a href="http://www.gnu.org/software/libc/manual/html_node/FIFO-Special-Files.html">FIFO file</a> file as json.</p>

<p>```python
import re
import time
import json
import unicodedata</p>

<p>import gevent
from gevent import monkey</p>

<p>from pymindwave import headset
from pymindwave.pyeeg import bin_power</p>

<p>monkey.patch_all()</p>

<h1>connect to the headset</h1>

<p>hs = None
hs = headset.Headset(&lsquo;/dev/tty.MindWave&rsquo;)
hs.disconnect()
time.sleep(1)
print &lsquo;connecting to headset&hellip;&rsquo;
hs.connect()
time.sleep(1)
while hs.get(&lsquo;state&rsquo;) != &lsquo;connected&rsquo;:</p>

<pre><code>print hs.get('state')
time.sleep(0.5)
if hs.get('state') == 'standby':
    hs.connect()
    print 'retrying connecting to headset'
</code></pre>

<p>def raw_to_spectrum(rawdata):</p>

<pre><code>flen = 50
spectrum, relative_spectrum = bin_power(rawdata, range(flen), 512)
return spectrum
</code></pre>

<p>while True:</p>

<pre><code>t = time.time()
waves_vector = hs.get('waves_vector')
meditation = hs.get('meditation')
attention = hs.get('attention')
spectrum = raw_to_spectrum(hs.get('rawdata')).tolist()

with open("/tmp/brain-data","w") as fp:
    s = {'timestamp': t,
         'meditation': meditation,
         'attention': attention,
         'raw_spectrum': spectrum,
         'delta_waves': waves_vector[0],
         'theta_waves': waves_vector[1],
         'alpha_waves': (waves_vector[2]+waves_vector[3])/2,
         'low_alpha_waves': waves_vector[2],
         'high_alpha_waves': waves_vector[3],
         'beta_waves': (waves_vector[4]+waves_vector[5])/2,
         'low_beta_waves': waves_vector[4],
         'high_beta_waves': waves_vector[5],
         'gamma_waves': (waves_vector[6]+waves_vector[7])/2,
         'low_gamma_waves': waves_vector[6],
         'mid_gamma_waves': waves_vector[7]}

    s = json.dumps(s)
    fp.write(s)
gevent.sleep(0.4)
</code></pre>

<p>```</p>

<p>Reading from the FIFO file is simple in Clojure.</p>

<p>```clojure
(while true
  (with-open [reader (clojure.java.io/reader &ldquo;/tmp/brain-data&rdquo;)]</p>

<pre><code>(brainwave-&gt;music (json/decode (first (line-seq reader)) true))))
</code></pre>

<p>```</p>

<h2>Step 3: Sonification</h2>

<p>Sonification is the process of taking data and turning it into sound. Here is an example of the data we are now receiving:</p>

<p>A single JSON brainwave packet:</p>

<p><code>
 {"gamma_waves": 95408,
  "high_beta_waves": 205681,
  "beta_waves": 293928,
  "low_beta_waves": 382176,
  "mid_gamma_waves": 84528,
  "low_alpha_waves": 172417,
  "delta_waves": 117933,
  "low_gamma_waves": 106288,
  "alpha_waves": 112605,
  "theta_waves": 635628,
  "high_alpha_waves": 52793,
  "attention": 0,
  "meditation": 0,
  "timestamp": 1.375811275696894E9}
</code></p>

<p>We will focus on the beta-waves for simplicity. Beta-waves fall between 16.5–20Hz.</p>

<p><img alt="EEG beta waves" src="http://blog.josephwilk.net/images/eeg_beta.png"></p>

<p>Beta waves related to:</p>

<ul>
<li>Alertness</li>
<li>Logic</li>
<li>Critical reasoning</li>
</ul>


<p> We need to map a signal within 16.5-20Hz into the musical pitches of a sampled piano (21-108 pitches).</p>

<p>```clojure
(require &lsquo;[clojure.math.numeric-tower :as math])</p>

<p>(defn linear-map [x0 x1 y0 y1 x]
  (let [dydx (/ (&ndash; y1 y0) (&ndash; x1 x0))</p>

<pre><code>    dx (- x x0)]  
(+ y0 (* dydx dx))))
</code></pre>

<p>;; Piano range: 0..87
;; Beta wave range: 16500..20000</p>

<p>(defn beta-wave->pitch [signal] (&ndash;> (linear-map 16500 20000 21 108 signal) float math/round))</p>

<p>(beta-wave->pitch 16500) ;&ndash;> 21
(beta-wave->pitch 20000) ;&ndash;> 108
```</p>

<p>Now we extract the beta-waves from the brainwave data and play them. We play them live as they arrive rather than worrying about scheduling notes:</p>

<p>```
(use &lsquo;overtone.live)
(use 'overtone.inst.sampled-piano)
(require &rsquo;[cheshire.core :as json])</p>

<p>(while true
  (with-open [reader (clojure.java.io/reader &ldquo;/tmp/brain-data&rdquo;)]</p>

<pre><code>(let [beta-wave (-&gt; (first (line-seq reader)) (json/decode true) :beta_waves)]
  (println beta-wave)
  (sampled-piano :note (beta-wave-&gt;pitch beta-wave) :sustain 0.2))))
</code></pre>

<p>```</p>

<h1>Would you like to hear my brain?</h1>

<p>The results, please listen to my brain.</p>

<div><iframe width="100%" height="166" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=http%3A%2F%2Fapi.soundcloud.com%2Ftracks%2F108320470&amp;color=ff6600&amp;auto_play=false&amp;show_artwork=false"></iframe></div>


<p>Not really music is it? With beta-waves we get a serious of high to low transitions. While we can control at what pitch the transitions occur by performing activities that shape our brain waves the transitions don&rsquo;t provide the order or structure we need to recognize this as music.</p>

<h2>Brain controlled Dubstep</h2>

<p>The only logical path left is to try and control Dubstep with our brain. Rather than generative music we can use our brain waves to control the tempo and volume of existing synthesized music.</p>

<p>Here is a Dubstep synth taken from Overtone:</p>

<p>```
(use &lsquo;overtone.live)</p>

<p>(defsynth dubstep [bpm 120 wobble 1 note 50 snare-vol 1 kick-vol 1 volume 1 out-bus 0]
  (let [trig (impulse:kr (/ bpm 120))</p>

<pre><code>    freq (midicps note)
    swr (demand trig 0 (dseq [wobble] INF))
    sweep (lin-exp (lf-tri swr) -1 1 40 3000)
    wob (apply + (saw (* freq [0.99 1.01])))
    wob (lpf wob sweep)
    wob (* 0.8 (normalizer wob))
    wob (+ wob (bpf wob 1500 2))
    wob (+ wob (* 0.2 (g-verb wob 9 0.7 0.7)))

    kickenv (decay (t2a (demand (impulse:kr (/ bpm 30)) 0 (dseq [1 0 0 0 0 0 1 0 1 0 0 1 0 0 0 0] INF))) 0.7)
    kick (* (* kickenv 7) (sin-osc (+ 40 (* kickenv kickenv kickenv 200))))
    kick (clip2 kick 1)

    snare (* 3 (pink-noise) (apply + (* (decay (impulse (/ bpm 240) 0.5) [0.4 2]) [1 0.05])))
    snare (+ snare (bpf (* 4 snare) 2000))
    snare (clip2 snare 1)]

   (out out-bus (* volume (clip2 (+ wob (* kick-vol kick) (* snare-vol snare)) 1)))))
</code></pre>

<p>```</p>

<p>Once the synth is running we can send it control signals which will vary any of the properties defined in the arguments to the dubstep function:</p>

<ul>
<li>bpm</li>
<li>wobble</li>
<li>note</li>
<li>snare-vol</li>
<li>kick-vol</li>
<li>volume</li>
</ul>


<p>```
(def d (dubstep))</p>

<p>(ctl d :snare-vol 0)
(ctl d :kick-vol 0)
(ctl d :wooble 0)
(ctl d :bpm 20)
(ctl d :v 0.2)
```</p>

<p>We again have to linearise the beta wave signal to the range of volume 0.0-1.1 and to the bpm 0-400.</p>

<p>Now all thats left to do is connect it to our brain.</p>

<p>Here&rsquo;s what brain controlled Dubstep sounds like:</p>

<div><iframe width="100%" height="166" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/119776808&amp;color=ff6600&amp;auto_play=false&amp;show_artwork=false"></iframe></div>


<p>And for comparison what playing Go does to your brain activity (I turned the Dubstep down while playing, concentrating with that noise is hard):</p>

<div><iframe width="100%" height="166" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/122704897&amp;color=ff6600&amp;auto_play=false&amp;show_artwork=false"></iframe></div>


<h1>Discovery through sound</h1>

<p>Mapping brain waves into live music is a challenging task and while we can control music through an EEG machine that control is hard since we are using the brain to do many other things. What is interesting in the path of this experiment is not in fact the music generated but the use of sound to provide a way to hear the differences in datasets.</p>

<p>Hearing the difference between play Go or sleeping, between young people or old people.</p>

<p>Sound as a means of discovering patterns is a largely untapped source.</p>
]]></content>
  </entry>
  
</feed>
