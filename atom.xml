<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Joseph Wilk]]></title>
  <link href="http://josephwilk.github.io/atom.xml" rel="self"/>
  <link href="http://josephwilk.github.io/"/>
  <updated>2017-01-03T21:21:48+00:00</updated>
  <id>http://josephwilk.github.io/</id>
  <author>
    <name><![CDATA[Joseph Wilk]]></name>
    <email><![CDATA[joe@josephwilk.net]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>


  <entry>
    <title type="html"><![CDATA[Audio Fingerprint Smudges]]></title>
    <link href="http://blog.josephwilk.net/art/audio-fingerprint-smudges.html"/>
    <updated>2016-12-31T10:12:00+01:00</updated>
    <id>http://blog.josephwilk.net/art/audio-fingerprint-smudges</id>
    <content type="html"><![CDATA[<p>Procedurally generating music, scoring generations based on an audio service (like SoundCloud) identifying it as an existing song/artist. The more famous the track&#47;artist the better.</p>

	  <p>Machines identifying audio tend to:</p>

	  <ul>
	  <li>Reduce the audio features to their essence (facilitating fast lookup or accuracy on a sliding scale).</li>
	  <li>Rely on computer vision techniques to create audio fingerprints.</li>
	  <li>Account for differing audio quality and ambient background noise.</li>
	  <li>Use a training set of sane music to teach the algorithm to recognise music.</li>
	  </ul>


	 <p><small>Audiofinger print generated by <a href="https://github.com/acoustid/chromaprint">Chromaprint</a>:</small><br/>
	 	<img src="/images/heavenflac.png" alt="Example audio fingerprint generated by Chromaprint for: Heaven by UNKLE" /></p>

	  <p>We use these properties to create new music for machines that explores the smudged edges around machine listening. Highlighting how differently humans and machines identify music. And for fun.</p>

<p>To try and match our generative audio to songs we will use a number of music services and some open-source fingerprint tools. Most commercial audio fingerprinting algorithms are secret and patented up to the eyeballs. So there is a lot of trial and errors. Some services used to evalute a song match:</p>

<ul>
<li>Soundcloud (copyright detection)</li>
<li>Youtube (copyright detection)</li>
<li>Shazam (audio lookup)</li>
<li>Chromaprint (Open-source audio fingerpinter)</li>
</ul>

	  <h2>Music for Machines</h2>

	  <p>All generated tracks have comments exactly when a song was detected.</p>

	  <p><strong>Warning: The audio clips are designed for machines and not your weak human ears. Hence keep your volume low before listening</strong></p>

	  <p>Audio generations by <a href="https://twitter.com/Finger_smudger">@Finger_smudger</a></p>

	  <h3>Generation #1 &ndash; 1467636802259</h3>

	  <p>Artists/Songs identified:</p>

	  <ul>
	  <li>Sophonic Media &ndash; Make It Shine</li>
	  <li>Pachanga Boys &ndash; Time</li>
	  <li>Johan Vilborg &ndash; Second Wind (Illuminor Remix)</li>
	  <li>Oelki &ndash; Galileo</li>
	  <li>Lipps, Inc &ndash; Funkytown</li>
	  <li>Spaceanddisco &ndash; Nights</li>
	  <li>Matt Fax &ndash; Voyage orignal mix Bullistik</li>
	  <li>Katty Perry &ndash; Birthday (Cash Cash Remix)</li>
	  </ul>


	  <iframe width="90%" height="200" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/272121435&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false&amp;visual=true"></iframe>
	  <br/><br/>

	  <h3>Generation #1.1 &ndash; 1469483772764</h3>

	  <p>Artists/Songs identified:</p>

	  <ul>
	  <li>George Michael &ndash; A Different Corner</li>
	  <li>Dezt &ndash; Last Year</li>
	  <li>Axiuw &ndash; Be Yourself (Original Mix)</li>
	  <li>Duran Duran &ndash; Thank You</li>
	  </ul>


	  <iframe width="90%" height="200" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/275449291&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false&amp;visual=true"></iframe>
	  <br/><br/>

	  <h3>Generation #2.0 &ndash; 1470683054969</h3>

	  <p>Artist/Songs identified:</p>

	  <ul>
	  <li>Dimension &ndash; Mangata</li>
	  <li>Michael Jackson &ndash; You Are Not Alone (tempo 60 bpm / B major)</li>
	  </ul>


	  <iframe width="90%" height="200" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/277511054&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false&amp;visual=true"></iframe>
	  <br/><br/>

	  <h3>Generation #2.0 &ndash; 1470700413305</h3>

	  <p>Artist/Songs identified:</p>

	  <ul>
	  <li>T-Pain Vs Chuckie Feat. Pitbull &ndash; Its Not You (Its Me)</li>
	  <li>Pink Floyd &ndash; Cymbaline</li>
	  </ul>


	  <iframe width="90%" height="200" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/277510353&amp;auto_play=false&amp;hide_related=false&amp;show_comments=true&amp;show_user=true&amp;show_reposts=false&amp;visual=true"></iframe>
	  <br/><br/>

	  <h2>Machines listening with ambient background noise</h2>

	  <p>While I experimented with lots of different services the above examples were most successful when using Shazam for identification. This focuses on operating in noisy environments and identifying a sound as quickly as possible based only on partial song information. This tolerance makes it easy to get Shazam to mis-match audio to songs.</p>

	  <p>The other services also had a nasty habit of banning new accounts uploading what appeared to be copyrighted infringing content (who would have thought!). Which makes the whole mass procedural generation somewhat challenging.</p>
	  

	  <p>Shazam has a <a href="https://www.shazam.com/">desktop app</a> which will run detection on audio for 8 hours continuously. So over that time we generate a large set of audio and pick the winners from each generation.</p>

	  <h3>Overtone synths &amp; score generation</h3>

	  <p>Using <a href="https://github.com/overtone/overtone">Overtone</a> and Clojure a single audio generation works by:</p>
	  <ol>
	  <li><p>Dynamically generating Overtone synths using generative testing framework <a href="https://github.com/clojure/test.check">test.check</a>.
	  Using QuickCheck style generators is a cheap way of exploring a permutation space given grammar rules, like those of a synth definition in Overtone. Supports selection of:
	  <ul>
	  <li>Audio wave (potentially many combined)</li>
	  <li>Envelope type</li>
	  <li>Effects (reverb/echo/pitchshift/delays)</li>
	  <li>Filters (low pass/high pass)
	  The various properties of the audio units are selected randomly.</li>
	  </ul></p>
	  </li>
	  <li><p>Dynamically generating a score varying:
	  <ul>
	  <li>Clock tempo</li>
	  <li>Note lengths</li>
	  <li>Root note / scale</li>
	  <li>Octaves</li>
	  </ul>
	  </p>
	  </li>
	  <li><p>Dynamically generating synth control parameters:
	  <ul>
	  <li>Distortion</li>
	  <li>Changing audio wave (sin/saw/triangle/square/etc)</li>
	  </ul>
	  </p>
	  </li>
	  <li><p>Running for 3 minutes with a random chance of mutation to score and parameters.</p></li>
	  <li><p>Each generation scored based on number of Shazam matches (scraped from Notification alerts on OS X).</p></li>
	  <li><p>Each generation scored by popularity of artists matched (manually üòê).</p></li>
	  </ol>


	<p>To avoid any background noise or messing with microphones we use <a href="https://github.com/mattingalls/Soundflower">SoundFlower</a> with the following setup:</p>
	<p>	Overtone main audio ->üîà Soundflower input device<br/>
		Soundflower output device ->üîà Shazam Desktop.</p>
	

	  <p>For every generation we store the state and mutations (edn) for reference and for guiding future generations: <a href="https://gist.githubusercontent.com/josephwilk/410f68a857f81e8073815999bf1a4b4f/raw/78319023141b18dfe90ab1183ecc13b30c4def33/1470683054969.edn">Example state for one generation</a></p>

	  <h2>Conclusion</h2>
	
	  <p>There is a clear difference in the strength of accuracy when it comes to fingerprinting audio for copyright infringement. It's noticeable that Soundcloud or YouTube are matching when  processing the entire track (even though it will check for partial matches) while Shazam focuses on as small a segment as possible LIVE. Open-source alternatives (like Chromaprint) while useful, provided little help in there methods in acting as a guide to trick the commercial services.
	
	  	Coming back to Shazam, what actually made the tracks remains somewhat of a mystery. If we look at one example "Michael Jackson - You Are Not Alone" our generative score was not even in the same scale or tempo! We can identify things that made it hard to match, for example adding drums patterns killed off all matches. More layers of audio, more permutations to explore.</p>

	  <p>One thing is clear, the way machines learn and the specialisation on a single application rules out a whole subset of sound that is unlikely to enter the realm of music. Hence for the algorithms a mismatch is of little relevance.</p>

	  <p>This lost ghost music is perhaps just for the machines.</p>
	
	 
	  <h3>Source code</h3>

	  <ul>
	  <li><p><strong>Finger Smudge</strong>: <a href="https://github.com/josephwilk/finger-smudge">https://github.com/josephwilk/finger-smudge</a>.
	  Core engine behind generating audio and container for all failed and future audio fingerprint smudge experiments:</p></li>
	  <li><p><strong>Synthatron</strong>: <a href="https://github.com/josephwilk/synthatron">https://github.com/josephwilk/synthatron</a>.
	  Overtone Synth generator using <code>test.check</code>:</p></li>
	  </ul>

]]></content>
  </entry>

  
  <entry>
    <title type="html"><![CDATA[Visuals with Overtone and Shadertone]]></title>
    <link href="http://josephwilk.github.io/art/overtone-shader-visuals.html"/>
    <updated>2016-01-08T14:58:12+00:00</updated>
    <id>http://josephwilk.github.io/art/overtone-shader-visuals</id>
    <content type="html"><![CDATA[<p>Exploring techniques for creating live coded performances with Overtone and <a href="https://www.opengl.org/wiki/Fragment_Shader">OpenGL Fragment Shaders</a>. Much learnt from my work performing as <a href="https://vimeo.com/replelectric">Repl Electric</a>. All my shader source code for these performances is open: <a href="https://github.com/repl-electric/cassiopeia/tree/master/resources/shaders">https://github.com/repl-electric/cassiopeia/tree/master/resources/shaders</a></p>

<p><img src="http://josephwilk.github.io/images/end-of-buffer.png" alt="shaders"/></p>

<p>To bring OpenGl to Clojure I use <a href="https://github.com/overtone/shadertone">Shadertone</a> written by <a href="https://github.com/rogerallen">rogerallen</a>. This utilises LWJGL (Java Light Weight Java Game Library <a href="https://www.lwjgl.org">https://www.lwjgl.org</a>).</p>

<h3>The Bridge between Clojure and Shaders</h3>

<p>A vital feature of Shadertone is a map between Clojure atoms and shader Uniforms. What is a shader Uniform? Well think of it as a read-only global variable in your shader. A Clojure watcher ensures any updates to your Clojure atom persist into your Uniform. A little clunky but all uniforms start with the letter <code>i</code>.</p>

<p>The shader:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">uniform</span> <span class="kt">float</span> <span class="n">iExample</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>And in Clojure</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">example-weight</span> <span class="p">(</span><span class="nf">atom</span> <span class="mf">0.5</span><span class="p">))</span>
</span><span class='line'><span class="p">(</span><span class="nf">shadertone/start-fullscreen</span> <span class="s">&quot;resources/shaders/example.glsl&quot;</span>
</span><span class='line'>  <span class="ss">:user-data</span> <span class="p">{</span><span class="s">&quot;iExample&quot;</span> <span class="nv">example-weight</span><span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;;iExample Uniform will also be updated.</span>
</span><span class='line'><span class="p">(</span><span class="nf">reset!</span> <span class="nv">example-weight</span> <span class="mf">0.2</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Live editing shaders</h2>

<p>When a shader file is edited Shadertone is watching the file (using <a href="https://github.com/ibdknox/watchtower">watchtower</a>) and will reload/recompile the changed file. This results in a slight freeze as the new code is run (This might be down to my graphics card).
Hence most of the time I prefer alternatives to live editing the shader to create smoother transitions.</p>

<h2>Injecting movement</h2>

<p>To make static images move we need a continuously changing value.</p>

<p>Shadertone gives us <code>iGlobalTime</code> using the number of seconds since the shader was started:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">uniform</span> <span class="n">iGlobalTime</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span>
</span><span class='line'>  <span class="c1">//Use the continuously changing time signal as the value for a color.  </span>
</span><span class='line'>  <span class="n">gl_FragColor</span> <span class="o">=</span> <span class="n">vec4</span><span class="p">(</span><span class="n">sin</span><span class="p">(</span><span class="n">iGlobalTime</span><span class="p">)</span><span class="o">*</span><span class="mf">0.5</span><span class="o">+</span><span class="mf">0.5</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Putting a continuously changing value through a function like sin/cos is the
bread and butter of creating animations with shaders.</p>

<h2>Randomness</h2>

<p>We often need a cheap and fast way to generate random floats in Shaders. Without persistent state and preservation of a seed it can be difficult. One solution is to use a noise image and the current pixel coordinates as an index into the image for a  float value.</p>

<p>Shadertone supports loading custom textures into your shaders:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">shadetone/start</span> <span class="s">&quot;shaders/example.glsl&quot;</span>
</span><span class='line'>         <span class="ss">:textures</span> <span class="p">[</span><span class="s">&quot;/josephwilk/textures/noise.png&quot;</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>


<p>The noise texture:</p>

<p><img src="http://raw.githubusercontent.com/josephwilk/shaderview/master/bin/data/textures/tex10.png" /></p>

<p>And finally the shader:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="c1">//Turning the current pixel coordinates (uv) into a random float. </span>
</span><span class='line'><span class="n">vec2</span> <span class="n">uv</span> <span class="o">=</span> <span class="n">gl_FragCoord</span><span class="p">.</span><span class="n">xy</span> <span class="o">/</span> <span class="n">iResolution</span><span class="p">.</span><span class="n">xy</span><span class="p">;</span>
</span><span class='line'><span class="k">return</span> <span class="nf">texture2D</span><span class="p">(</span><span class="n">iChannel0</span><span class="p">,</span> <span class="n">vec2</span><span class="p">(</span><span class="n">uv</span><span class="p">)</span><span class="o">/</span><span class="mf">256.0</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Composing visual effects</h2>

<p>I attach a weight to each function or visual phase of the shader. Through this we can select which visual effect is visible or combine multiple effects. Its a bit messy, since I have all my functions in a single shader file. I&rsquo;ve not explored including of external files with shaders.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">uniform</span> <span class="kt">float</span> <span class="n">iCircularWeight</span><span class="p">;</span>
</span><span class='line'><span class="n">uniform</span> <span class="kt">float</span> <span class="n">iPopulationWeight</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">vec4</span> <span class="nf">circular</span><span class="p">(){...}</span>
</span><span class='line'><span class="n">vec4</span> <span class="nf">population</span><span class="p">(){..}</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span>
</span><span class='line'>  <span class="n">vec4</span> <span class="n">circleResult</span>     <span class="o">=</span> <span class="n">vec4</span><span class="p">(</span><span class="mf">0.0</span><span class="p">);</span>
</span><span class='line'>  <span class="n">vec4</span> <span class="n">populationResult</span> <span class="o">=</span> <span class="n">vec4</span><span class="p">(</span><span class="mf">0.0</span><span class="p">);</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">iCircularWeight</span> <span class="o">&gt;</span> <span class="mf">0.0</span><span class="p">){</span>
</span><span class='line'>    <span class="n">circleResult</span> <span class="o">=</span> <span class="n">circular</span><span class="p">()</span> <span class="o">*</span> <span class="n">iCircularWeight</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">iPopulationWeight</span> <span class="o">&gt;</span> <span class="mf">0.0</span><span class="p">){</span>
</span><span class='line'>    <span class="n">populationResult</span> <span class="o">=</span> <span class="n">population</span><span class="p">()</span> <span class="o">*</span> <span class="n">iPopulationWeight</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="n">gl_FragColor</span> <span class="o">=</span> <span class="p">(</span><span class="n">populationResult</span> <span class="o">+</span> <span class="n">circleResult</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And within Clojure:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">circular-w</span> <span class="p">(</span><span class="nf">atom</span> <span class="mf">1.0</span><span class="p">))</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">population-w</span> <span class="p">(</span><span class="nf">atom</span> <span class="mf">1.0</span><span class="p">))</span>
</span><span class='line'><span class="p">(</span><span class="nf">shadertone/start-fullscreen</span> <span class="s">&quot;resources/shaders/example.glsl&quot;</span>
</span><span class='line'>  <span class="ss">:user-data</span> <span class="p">{</span><span class="s">&quot;iCircularWeight&quot;</span> <span class="nv">circular-w</span>
</span><span class='line'>              <span class="s">&quot;iPopulationWeight&quot;</span> <span class="nv">population-w</span><span class="p">})</span>
</span><span class='line'><span class="p">(</span><span class="nf">reset!</span> <span class="nv">circular-weight</span> <span class="mf">1.0</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Synchronisation</h2>

<p>Shadertone uses the seconds since start (<code>iGlobalTime</code>) while Overtone via Supercollider uses the soundcard&rsquo;s clock. Hence there is no guarantee these two sources will be in sync.</p>

<p>Replacing iGlobalTime is the only option. We create a special synth called <code>data-probes</code> which sole function is to transfer data from the Supercollider world to the Clojure world. Overtone provides a Supercollider to Clojure binding called a <code>tap</code>. We add a tap into our Overtone synth which is polling our global timing signal (this powers all synths and is how we co-ordinate everything).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">defsynth</span> <span class="nv">data-probes</span> <span class="p">[</span><span class="nv">timing-signal-bus</span> <span class="mi">0</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">beat-count</span> <span class="p">(</span><span class="nf">in</span><span class="ss">:kr</span> <span class="nv">timing-signal-bus</span><span class="p">)</span>
</span><span class='line'>        <span class="nv">_</span>  <span class="p">(</span><span class="nf">tap</span> <span class="s">&quot;global-beat-count&quot;</span> <span class="mi">60</span><span class="p">(</span><span class="nf">a2k</span> <span class="nv">beat-count</span><span class="p">))</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">out</span> <span class="mi">0</span> <span class="mi">0</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">active-data-probes</span> <span class="p">(</span><span class="nf">data-probes</span> <span class="p">(</span><span class="ss">:count</span> <span class="nv">time/beat-1th</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">shadertone/start-fullscreen</span> <span class="s">&quot;resources/shaders/example.glsl&quot;</span>
</span><span class='line'>  <span class="ss">:user-data</span>
</span><span class='line'>  <span class="c1">;;An atom wrapping the tap and the running synth instance</span>
</span><span class='line'>   <span class="s">&quot;global-beat-count&quot;</span> <span class="p">{</span><span class="s">&quot;iGlobalBeatCount&quot;</span> <span class="p">(</span><span class="nf">atom</span> <span class="p">{</span><span class="ss">:synth</span> <span class="nv">active-data-probes</span> <span class="ss">:tap</span> <span class="s">&quot;global-beat-count&quot;</span><span class="p">})})</span>
</span></code></pre></td></tr></table></div></figure>


<p>Using our <code>iGlobalBeatCount</code> in our shader now means anything requiring a continuously increasing value flows to our beat.</p>

<h2>Shaders &amp; global mutable state</h2>

<p>Persistent mutable state between executions is not possible in OpenGL Shaders. Uniforms are read-only.</p>

<p>Lets look at an example. On a drum hit I want the color of a visual to change and <em>persist</em> until the next drum hit.
The drum signal is 1 for a hit 0 for silence:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">[</span><span class="mi">1</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">1</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">1</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>The current value based on the global clock is passed into the Shader as the iBeat Uniform.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">uniform</span> <span class="kt">float</span> <span class="n">iBeat</span><span class="p">;</span>
</span><span class='line'><span class="kt">float</span> <span class="n">color</span> <span class="o">=</span> <span class="mf">0.0</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">vec4</span> <span class="n">function</span> <span class="nf">showColor</span><span class="p">(){</span>
</span><span class='line'>  <span class="k">if</span><span class="p">(</span><span class="n">iBeat</span> <span class="o">==</span> <span class="mf">1.0</span><span class="p">){</span>
</span><span class='line'>    <span class="n">color</span> <span class="o">+=</span> <span class="mf">1.0</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">vec4</span><span class="p">(</span><span class="n">color</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Will return:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">vec4</span><span class="p">(</span><span class="mf">1.0</span><span class="p">);</span>
</span><span class='line'><span class="n">vec4</span><span class="p">(</span><span class="mf">0.0</span><span class="p">);</span>
</span><span class='line'><span class="n">vec4</span><span class="p">(</span><span class="mf">0.0</span><span class="p">);</span>
</span><span class='line'><span class="n">vec4</span><span class="p">(</span><span class="mf">0.0</span><span class="p">);</span>
</span><span class='line'><span class="n">vec4</span><span class="p">(</span><span class="mf">1.0</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>What we were after is actually:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">vec4</span><span class="p">(</span><span class="mf">1.0</span><span class="p">);</span>
</span><span class='line'><span class="n">vec4</span><span class="p">(</span><span class="mf">1.0</span><span class="p">);</span>
</span><span class='line'><span class="n">vec4</span><span class="p">(</span><span class="mf">1.0</span><span class="p">);</span>
</span><span class='line'><span class="n">vec4</span><span class="p">(</span><span class="mf">1.0</span><span class="p">);</span>
</span><span class='line'><span class="n">vec4</span><span class="p">(</span><span class="mf">2.0</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>My solution is to move to Clojure where mutable state using atoms is simple.</p>

<p>Our timing is guided by Supercollider and a global clock. The value of our kick buffer at anyone time is only known inside the synth and hence inside Supercollider. But if we want to have mutable state we need access to this value in Clojure. So we create a custom synth that taps the value of the kick buffer based on the global clock signal.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">defsynth</span> <span class="nv">drum-data-probe</span> <span class="p">[</span><span class="nv">kick-drum-buffer</span> <span class="nv">timing-signal-bus</span> <span class="mi">0</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">beat-count</span> <span class="p">(</span><span class="nf">in</span><span class="ss">:kr</span> <span class="nv">timing-signal-bus</span><span class="p">)</span>
</span><span class='line'>    <span class="nv">drum-beat</span> <span class="p">(</span><span class="nf">buf-rd</span><span class="ss">:kr</span> <span class="mi">1</span> <span class="nv">kick-drum-buffer</span> <span class="nv">beat-count</span><span class="p">)</span>
</span><span class='line'>    <span class="nv">_</span>  <span class="p">(</span><span class="nf">tap</span> <span class="s">&quot;drum-beat&quot;</span> <span class="mi">60</span> <span class="p">(</span><span class="nf">a2k</span> <span class="nv">drum-beat</span><span class="p">))])</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">out</span> <span class="mi">0</span> <span class="mi">0</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defonce </span><span class="nv">kick-drum-buffer</span> <span class="p">(</span><span class="nf">buffer</span> <span class="mi">256</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;;Create the synth with the &quot;drum-beat&quot; tap</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">drum-data-probe</span> <span class="p">(</span><span class="nf">drum-data-probe</span> <span class="nv">kick-drum-buffer</span> <span class="p">(</span><span class="ss">:count</span> <span class="nv">time/beat-1th</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;;Bind the running synth and the tap</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">kick-atom</span> <span class="p">(</span><span class="nf">atom</span> <span class="p">{</span><span class="ss">:synth</span> <span class="nv">drum-data-probe</span> <span class="ss">:tap</span> <span class="s">&quot;drum-beat&quot;</span><span class="p">}))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;;Extract the tap atom</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">kick-tap</span> <span class="p">(</span><span class="nf">get-in</span> <span class="p">(</span><span class="ss">:synth</span> <span class="o">@</span><span class="nv">kick-atom</span><span class="p">)</span> <span class="p">[</span><span class="ss">:taps</span> <span class="p">(</span><span class="ss">:tap</span> <span class="o">@</span><span class="nv">kick-atom</span><span class="p">)]))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now in the Clojure world its simple to watch our tap atom and hence get alerted when it changes value. Overtone is dealing with the magic of updating the atom under the covers, the watcher is a nice implementation independent way of hooking into this. We now know the value of our kick buffer in Clojure. If we use another atom as our accumulator we can update it when the tap atom changes. Finally pushing this new accumulator to the Shader.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">active-color</span> <span class="p">(</span><span class="nf">atom</span> <span class="mf">0.0</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">add-watch</span> <span class="nv">kick-tap</span> <span class="ss">:cell-color</span>
</span><span class='line'>  <span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">_</span> <span class="nv">_</span> <span class="nv">old</span> <span class="nv">new</span><span class="p">]</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">when </span><span class="p">(</span><span class="nb">and </span><span class="p">(</span><span class="nb">= </span><span class="nv">old</span> <span class="mf">0.0</span><span class="p">)</span> <span class="p">(</span><span class="nb">= </span><span class="mf">1.0</span> <span class="nv">new</span><span class="p">))</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">reset!</span> <span class="nv">active-color</span> <span class="p">(</span><span class="nf">mod</span> <span class="p">(</span><span class="nb">+ </span><span class="o">@</span><span class="nv">active-color</span> <span class="mf">1.0</span><span class="p">)</span> <span class="mi">100</span><span class="p">)))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">shadertone/start-fullscreen</span> <span class="s">&quot;resources/shaders/example.glsl&quot;</span>
</span><span class='line'>  <span class="ss">:user-data</span> <span class="p">{</span><span class="ss">:iActiveColor</span> <span class="nv">active-color</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Within the shader:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">uniform</span> <span class="kt">float</span> <span class="n">iActiveColor</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="n">vec4</span> <span class="n">function</span> <span class="nf">showColor</span><span class="p">(){</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">vec4</span><span class="p">(</span><span class="n">iActiveColor</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Thats a lot of work, but I&rsquo;m very happy with the results in my <a href="https://vimeo.com/117516352">(end-of-buffer)</a> performance.</p>

<h2>Buffer events</h2>

<p>Writing to a buffer is a common way of live coding in Overtone. Its very useful to attach some visual effect based on the settings of a buffer.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="c1">;;Setting notes to a buffer</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">notes-buf</span> <span class="p">(</span><span class="nf">buffer</span> <span class="mi">256</span><span class="p">))</span>
</span><span class='line'><span class="p">(</span><span class="nf">pattern!</span> <span class="nv">notes-buf</span> <span class="p">(</span><span class="nf">degrees-seq</span> <span class="p">[</span><span class="ss">:f3</span> <span class="mi">1314</span><span class="p">]))</span>
</span></code></pre></td></tr></table></div></figure>


<p>We could put a tap into the synth and grab the current note and pass this into the shader. As I&rsquo;ve mentioned taps are expensive and they are always on while we may not always be using them.
This also gets more complicated when say we have 3 instances of the same synth running playing simultaneous to form a chord.</p>

<p>An alternative is to invent an atom which is used as a signal on every buffer write.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="c1">;;Could also do this with OSC messages...</span>
</span><span class='line'><span class="p">(</span><span class="nf">do</span>
</span><span class='line'>  <span class="p">(</span><span class="kd">defonce </span><span class="nv">buffer-change-event-notes-buf</span> <span class="p">(</span><span class="nf">atom</span> <span class="mf">0.0</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">pattern!</span> <span class="nv">notes-buf</span> <span class="p">(</span><span class="nf">degrees-seq</span> <span class="p">[</span><span class="ss">:f3</span> <span class="mi">1314</span><span class="p">]))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">swap!</span> <span class="nv">buffer-change-event-notes-buf</span> <span class="nb">+ </span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>And adding a watcher</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">add-watch</span>
</span><span class='line'>  <span class="nv">buffer-change-event-notes-buf</span>
</span><span class='line'>  <span class="ss">:buffer-change-event-notes-buf</span>
</span><span class='line'>  <span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="o">&amp;</span> <span class="nv">_</span><span class="p">]</span>
</span><span class='line'>    <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">n</span> <span class="p">(</span><span class="nb">int </span><span class="p">(</span><span class="nf">buffer-get</span> <span class="nv">notes-buf</span> <span class="mi">0</span><span class="p">))]</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">case</span> <span class="nv">n</span>
</span><span class='line'>        <span class="mi">29</span> <span class="p">(</span><span class="nf">reset!</span> <span class="nv">color</span> <span class="mf">0.4</span><span class="p">)</span>
</span><span class='line'>           <span class="p">(</span><span class="nf">reset!</span> <span class="nv">color</span> <span class="mf">0.0</span><span class="p">)))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">buffer-atoms</span> <span class="p">(</span><span class="nf">atom</span> <span class="p">{}))</span>
</span><span class='line'><span class="p">(</span><span class="nf">pattern!</span> <span class="nv">notes-buf</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nf">reset!</span> <span class="nv">buffer-atoms</span> <span class="p">(</span><span class="nb">assoc </span><span class="o">@</span><span class="nv">buffer-atoms</span> <span class="p">(</span><span class="ss">:id</span> <span class="nv">notes-buf</span><span class="p">)</span> <span class="p">(</span><span class="nb">inc </span><span class="p">(</span><span class="o">@</span><span class="nv">buffer-atoms</span> <span class="p">(</span><span class="ss">:id</span> <span class="nv">notes-buf</span><span class="p">)))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>I use this trick in (end-of-buffer) to use the bass note to control the level of distortion of the visuals (<a href="https://github.com/repl-electric/cassiopeia/blob/master/src/cassiopeia/destination/flatiron.clj#L84-L99">source</a>). Its wonderful to focus on the notes and feel the visuals following you automatically.</p>

<h2>Midi notes to visuals</h2>

<p>I often want to map a midi note to a visual effect. All my notes are mapped to buffers. Much like we did with the drums I can use a tap to get access to the current note being played in a buffer. Skipping over the details, when we have a midi note we send it as an float (to support crazy 42.333 like notes) to the shader via an atom.</p>

<p>We then map it to a nice range value to effect visuals:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">uniform</span> <span class="kt">float</span> <span class="n">iLeadNote</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//midi note: 42 =&gt; F#2  </span>
</span><span class='line'><span class="c1">//midi note: 78 =&gt; F#5</span>
</span><span class='line'><span class="kt">float</span> <span class="n">noteMapped</span> <span class="o">=</span> <span class="n">smoothstep</span><span class="p">(</span><span class="mf">42.0</span><span class="p">,</span> <span class="mf">78.0</span><span class="p">,</span> <span class="n">iLeadNote</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//noteMapped now spans =&gt; 0..1</span>
</span></code></pre></td></tr></table></div></figure>


<p>A cheap way to scale effects based on the height of the note.</p>

<h2>Gradual transitions</h2>

<p>Often I want a smooth fading it or out of a shader function. Say for example fading to black. Pretty simple, just fire a thread which sleeps and ticks an atom. The atom is fed into the Shader.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="n">uniform</span> <span class="kt">float</span> <span class="n">iColor</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="kt">void</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">){</span>
</span><span class='line'>  <span class="n">gl_color</span> <span class="o">=</span> <span class="n">vec4</span><span class="p">(</span><span class="n">iColor</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Since I use this a lot I created a helper fn in <a href="https://github.com/josephwilk/mud/blob/4866f9db8077f8d4244fdd94b42bc0fef0e69f40/src/mud/core.clj#L90">MUD</a>:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">color</span> <span class="p">(</span><span class="nf">atom</span> <span class="mf">1.0</span><span class="p">))</span>
</span><span class='line'><span class="c1">;;         atom / target /  rate</span>
</span><span class='line'><span class="p">(</span><span class="nf">overtime!</span> <span class="nv">color</span>   <span class="mf">0.0</span>      <span class="mf">0.001</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Text</h2>

<p>In end-of-buffer I spell the word Repl Electric out of floating lights. We are bound to only a few data structures with fragment Shaders. I used a simple 3x3 matrix mapping each part of a character. Then using this to decided the position of the lights.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">const</span> <span class="n">mat3</span> <span class="n">LETTER_R</span>        <span class="o">=</span> <span class="n">mat3</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>                                  <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>                                  <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'><span class="k">const</span> <span class="n">mat3</span> <span class="n">LETTER_E</span>        <span class="o">=</span> <span class="n">mat3</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span>
</span><span class='line'>                                  <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span>
</span><span class='line'>                                  <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="n">vec4</span> <span class="nf">letter</span><span class="p">(</span><span class="n">mat3</span> <span class="n">letter</span><span class="p">,</span> <span class="n">vec2</span> <span class="n">offset</span><span class="p">,</span> <span class="n">vec2</span> <span class="n">uv</span><span class="p">){</span>
</span><span class='line'>  <span class="n">vec2</span> <span class="n">point</span> <span class="o">=</span> <span class="n">vec2</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>  <span class="n">vec4</span> <span class="n">helloPoint</span> <span class="o">=</span> <span class="n">vec4</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">,</span><span class="mi">0</span><span class="p">);</span>
</span><span class='line'>  <span class="n">vec3</span> <span class="n">xPos</span> <span class="o">=</span> <span class="n">vec3</span><span class="p">(</span><span class="mf">0.01</span><span class="p">,</span> <span class="mf">0.03</span><span class="p">,</span> <span class="mf">0.05</span><span class="p">);</span>
</span><span class='line'>  <span class="n">vec3</span> <span class="n">yPos</span> <span class="o">=</span> <span class="n">vec3</span><span class="p">(</span><span class="mf">0.05</span><span class="p">,</span> <span class="mf">0.03</span><span class="p">,</span> <span class="mf">0.01</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">y</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">y</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="p">;</span> <span class="n">y</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>    <span class="k">for</span><span class="p">(</span><span class="kt">int</span> <span class="n">x</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">x</span> <span class="o">&lt;</span> <span class="mi">3</span><span class="p">;</span> <span class="n">x</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>      <span class="k">if</span><span class="p">(</span><span class="n">letter</span><span class="p">[</span><span class="n">y</span><span class="p">][</span><span class="n">x</span><span class="p">]</span> <span class="o">==</span> <span class="mi">1</span><span class="p">){</span><span class="c1">// Show this part of the letter</span>
</span><span class='line'>        <span class="n">point</span> <span class="o">=</span> <span class="n">vec2</span><span class="p">(</span><span class="n">xPos</span><span class="p">[</span><span class="n">x</span><span class="p">]</span><span class="o">+</span><span class="n">offset</span><span class="p">.</span><span class="n">x</span><span class="p">,</span> <span class="n">offset</span><span class="p">.</span><span class="n">y</span><span class="o">+</span><span class="n">yPos</span><span class="p">[</span><span class="n">y</span><span class="p">]);</span>
</span><span class='line'>        <span class="n">helloPoint</span> <span class="o">+=</span> <span class="n">buildCell</span><span class="p">(</span><span class="n">uv</span><span class="p">,</span> <span class="n">point</span><span class="p">,</span> <span class="n">STATIC_LETTERS</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">helloPoint</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="n">letter</span><span class="p">(</span><span class="n">LETTER_R</span><span class="p">,</span> <span class="mf">0.2</span><span class="p">,</span> <span class="n">uv</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>And the visual.</p>

<p><img src="http://josephwilk.github.io/images/font-example.png" alt="Font example"/></p>

<h2>Visuals effected by frequencies</h2>

<p>Shadertone provides a 2x512 array with the frequency spectrum (FFT) and audio waveform data. It does this by loading the data into a 2D Texture. The audio data is taken from tapping the main Overtone audio bus.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="c1">;;Tell Shadertone to fill iChannel0 with audio data</span>
</span><span class='line'><span class="p">(</span><span class="nf">shadetone/start</span> <span class="s">&quot;shaders/example.glsl&quot;</span> <span class="ss">:textures</span> <span class="p">[</span><span class="ss">:overtone-audio</span><span class="p">])</span>
</span></code></pre></td></tr></table></div></figure>


<p>It&rsquo;s always a challenge to utilise this without creating something jerky or causing motion sickness. Hence I tend to use the waveform or FFT as a distorter rather than a base for animations.</p>

<p>It also helps to concentrate on specific ranges of frequencies of the waveform data to create a stronger connection between a synth and the visuals.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nb">float </span><span class="nv">sound</span> <span class="nb">= </span><span class="nv">texture2D</span><span class="p">(</span><span class="nf">iChannel0</span>, <span class="nv">vec2</span><span class="p">(</span><span class="nf">max</span><span class="p">(</span><span class="nf">uv.x</span>,<span class="mf">0.9</span><span class="p">)</span>,<span class="nv">.75</span><span class="p">))</span><span class="nv">.x</span><span class="c1">;</span>
</span><span class='line'>
</span><span class='line'><span class="nv">//uv.xy</span> <span class="nv">=&gt;</span> <span class="nv">current</span> <span class="nv">x</span>,<span class="nv">y</span> <span class="nv">coordinates</span> <span class="nv">of</span> <span class="nv">pixel.</span>
</span><span class='line'>
</span><span class='line'><span class="nv">//First</span> <span class="nv">argument</span> <span class="nv">is</span> <span class="nv">an</span> <span class="nb">index into </span><span class="nv">the</span> <span class="mi">512</span> <span class="nv">values</span> <span class="nv">of</span> <span class="nv">the</span> <span class="nv">waveform.</span>
</span><span class='line'><span class="nv">//By</span> <span class="nv">limiting</span> <span class="nv">the</span> <span class="nb">first </span><span class="nv">argument</span> <span class="nv">we</span> <span class="nv">can</span> <span class="nv">ignore</span> <span class="nv">certain</span> <span class="nv">ranges.</span>
</span><span class='line'>
</span><span class='line'><span class="nv">//Second</span> <span class="nv">argument</span> <span class="nv">selects</span><span class="err">:</span>
</span><span class='line'><span class="nv">//</span>    <span class="mf">0.25</span> <span class="nv">=&gt;</span> <span class="nv">FFT</span>
</span><span class='line'><span class="nv">//</span>    <span class="mf">0.75</span> <span class="nv">=&gt;</span> <span class="nv">audio</span> <span class="nv">waveform</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here is an example where I use the audio waveform to distort the scale &amp; jaggedness of a series of circle shapes.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='c'><span class='line'><span class="k">const</span> <span class="kt">float</span> <span class="n">tau</span> <span class="o">=</span> <span class="mf">6.28318530717958647692</span><span class="p">;</span>
</span><span class='line'><span class="n">vec3</span> <span class="n">wave</span> <span class="o">=</span> <span class="n">vec3</span><span class="p">(</span><span class="mf">0.0</span><span class="p">);</span>
</span><span class='line'><span class="kt">float</span> <span class="n">width</span> <span class="o">=</span> <span class="mf">4.0</span><span class="o">/</span><span class="mi">500</span><span class="p">;</span>
</span><span class='line'><span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span><span class="o">=</span><span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="mi">60</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">){</span>
</span><span class='line'>  <span class="kt">float</span> <span class="n">sound</span> <span class="o">=</span> <span class="n">texture2D</span><span class="p">(</span><span class="n">iChannel0</span><span class="p">,</span> <span class="n">vec2</span><span class="p">(</span><span class="n">uv</span><span class="p">.</span><span class="n">x</span><span class="p">,</span><span class="mf">.75</span><span class="p">)).</span><span class="n">x</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="kt">float</span> <span class="n">a</span> <span class="o">=</span> <span class="mf">0.1</span><span class="o">*</span><span class="kt">float</span><span class="p">(</span><span class="n">i</span><span class="p">)</span><span class="o">*</span><span class="n">tau</span><span class="o">/</span><span class="kt">float</span><span class="p">(</span><span class="n">n</span><span class="p">);</span>
</span><span class='line'>  <span class="n">vec3</span> <span class="n">phase</span> <span class="o">=</span> <span class="n">smoothstep</span><span class="p">(</span><span class="o">-</span><span class="mf">1.0</span><span class="p">,</span><span class="mf">.5</span><span class="p">,</span> <span class="n">vec3</span><span class="p">(</span><span class="n">cos</span><span class="p">(</span><span class="n">a</span><span class="p">),</span> <span class="n">cos</span><span class="p">(</span><span class="n">a</span><span class="o">-</span><span class="n">tau</span><span class="o">/</span><span class="mf">3.0</span><span class="p">),</span> <span class="n">cos</span><span class="p">(</span><span class="n">a</span><span class="o">-</span><span class="n">tau</span><span class="o">*</span><span class="mf">2.0</span><span class="o">/</span><span class="mf">3.0</span><span class="p">)));</span>
</span><span class='line'>  <span class="n">wave</span> <span class="o">+=</span> <span class="n">phase</span> <span class="o">*</span> <span class="n">smoothstep</span><span class="p">(</span><span class="n">width</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">,</span> <span class="n">abs</span><span class="p">(</span><span class="n">uv</span><span class="p">.</span><span class="n">y</span> <span class="o">-</span> <span class="p">((</span><span class="n">sound</span><span class="o">*</span><span class="mf">0.9</span><span class="p">)</span><span class="o">+</span><span class="mf">0.2</span><span class="p">)));</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//This shift of uv.x means our index into the sound data also </span>
</span><span class='line'>  <span class="c1">//moves along, examining a different part of the audio wave. </span>
</span><span class='line'>  <span class="n">uv</span><span class="p">.</span><span class="n">x</span> <span class="o">+=</span> <span class="mf">0.4</span><span class="o">/</span><span class="kt">float</span><span class="p">(</span><span class="n">n</span><span class="p">);</span>
</span><span class='line'>  <span class="n">uv</span><span class="p">.</span><span class="n">y</span> <span class="o">-=</span> <span class="mf">0.05</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'><span class="n">wave</span> <span class="o">*=</span> <span class="mf">10.0</span><span class="o">/</span><span class="kt">float</span><span class="p">(</span><span class="n">n</span><span class="p">);</span>
</span><span class='line'><span class="k">return</span> <span class="nf">vec4</span><span class="p">(</span><span class="n">wave</span><span class="p">,</span><span class="mi">1</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>And the resulting visual:</p>

<p><img src="http://josephwilk.github.io/images/fft-example.png" alt="FFT example"/></p>

<h2>Final thoughts on Live coding visuals</h2>

<p>Through Clojure&rsquo;s binding of atoms with Fragment shaders we have the power to live code visuals and music. Though it comes at a cost of complexity having to wrap lots of functions in order to have powerfully connected visuals. Fragment shaders are extremely terse, and can be pushed to replicate many advanced effects <em>but</em> they are also performance intense, and often taking a non-shader route will be much more performant.</p>

<h4>Stability</h4>

<p>My knowledge of LWJGL is small, but crashes in the fragment shaders often occur leaving the JVM wedged. This has happened to me quite a lot practicing, but never in a performance. Its worth reflecting that something (be it fixable) leaves a risk of a freeze in a performance.</p>

<h4>Combining State &amp; Shaders</h4>

<p>I&rsquo;ve started to explore what a shader application might look like if it was a server and provided a state machine so the live coding language does have this complexity. In turn producing a freer and more spontaneous interaction. This project is <a href="https://github.com/josephwilk/shaderview">Shaderview</a> and steals all the good ideas of Shadertone while adding some new features like <a href="http://www.vertexshaderart.com">vertex shader art</a>. I&rsquo;ll be writing up more about Shaderview soon.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Animations with Emacs]]></title>
    <link href="http://josephwilk.github.io/art/emacs-animation.html"/>
    <updated>2015-10-02T15:58:12+01:00</updated>
    <id>http://josephwilk.github.io/art/emacs-animation</id>
    <content type="html"><![CDATA[<p>Emacs is designed for fast, highly customisable manipulation of text.
ASCII animation requires manipulating text at a sufficient speed that it appears animated. Emacs is also used by a number of performers to live code musical &amp; visual performances (and many other things). Where the audience can see the code in emacs and hear it.</p>

<p><img src="http://josephwilk.github.io/images/live-coding-emacs.png" alt="Live Coding with Emacs" /></p>

<p>In my live coding performances as <a href="http://www.repl-electric.com">Repl Electric</a> I&rsquo;ve used emacs animations to  augment emacs with more feedback for the performer and a chance to destroy the order and structure the programmer has spent the entire performance building. Reminding us that we are looking at thoughts expressed through code that seem magical but are ultimately nothing more than text.</p>

<p>Maybe something akin to the creation and destruction of Sand Mandalas.</p>

<p><img src="http://josephwilk.github.io/images/sandmandala.jpg" alt="Sand Mandala" /></p>

<h2>Framework for Emacs Animation</h2>

<p>Zone Mode is an Emacs plugin which provides a framework for screensaver like animations.</p>

<p><a href="http://www.emacswiki.org/emacs/ZoneMode">http://www.emacswiki.org/emacs/ZoneMode</a></p>

<p>Importantly it allows us to turn on an animation using our current code buffer as input and to terminate the animation, returning to the original code on a key press. So we can safely mangle the text knowing we can also return to safety. Well so far I&rsquo;ve always found it to be safe but there is a small risk as mentioned in the zoning warning:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='lisp'><span class='line'><span class="p">(</span><span class="nv">message</span> <span class="s">&quot;...here&#39;s hoping we didn&#39;t hose your buffer!&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>A nice property of taking our buffer as input is we are never quite sure what text will be there and hence the properties of the animation.</p>

<h3>Example: Uppercase all letters</h3>

<p>A simple function that finds non-whitespace in the buffer and tries to uppercase the char. It knows nothing about the zoning framework, its just a plain old function that operates on the active buffer.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='lisp'><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">zone-upper-case-text</span> <span class="p">()</span>
</span><span class='line'>  <span class="p">(</span><span class="nv">zone-fill-out-screen</span> <span class="p">(</span><span class="nv">window-width</span><span class="p">)</span> <span class="p">(</span><span class="nv">window-height</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">random</span> <span class="no">t</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nv">goto-char</span> <span class="p">(</span><span class="nv">point-min</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nv">while</span> <span class="p">(</span><span class="nb">not</span> <span class="p">(</span><span class="nv">input-pending-p</span><span class="p">))</span>
</span><span class='line'>    <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">wbeg</span> <span class="p">(</span><span class="nv">window-start</span><span class="p">))</span>
</span><span class='line'>          <span class="p">(</span><span class="nv">wend</span> <span class="p">(</span><span class="nv">window-end</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'>      <span class="c1">;;Keep moving the char cursor until its not whitespace</span>
</span><span class='line'>      <span class="p">(</span><span class="nv">while</span> <span class="p">(</span><span class="nv">looking-at</span> <span class="s">&quot;[ \n\f]&quot;</span><span class="p">)</span>
</span><span class='line'>        <span class="p">(</span><span class="nv">goto-char</span> <span class="p">(</span><span class="nb">+</span> <span class="nv">wbeg</span> <span class="p">(</span><span class="nb">random</span> <span class="p">(</span><span class="nb">-</span> <span class="nv">wend</span> <span class="nv">wbeg</span><span class="p">))))))</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">;;If we are at the end of the buffer go to the last char</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">when</span> <span class="p">(</span><span class="nv">eobp</span><span class="p">)</span> <span class="p">(</span><span class="nv">goto-char</span> <span class="p">(</span><span class="nv">point-min</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">;;Read the char at the cursor</span>
</span><span class='line'>    <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">c</span> <span class="p">(</span><span class="nv">char-after</span> <span class="p">(</span><span class="nv">point</span><span class="p">))))</span>
</span><span class='line'>      <span class="p">(</span><span class="nv">delete-char</span> <span class="mi">1</span><span class="p">)</span>           <span class="c1">;; Remove the char</span>
</span><span class='line'>      <span class="p">(</span><span class="nv">insert-char</span> <span class="p">(</span><span class="nv">upcase</span> <span class="nv">c</span><span class="p">)))</span> <span class="c1">;; Reinsert with caps      </span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">;;Sleep</span>
</span><span class='line'>    <span class="p">(</span><span class="nv">zone-park/sit-for</span> <span class="p">(</span><span class="nv">point-min</span><span class="p">)</span> <span class="mf">0.1</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>The animation in all its glory:</p>

<iframe src="https://player.vimeo.com/video/141312958" width="500" height="281" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>


<h3>Zoning Setup</h3>

<p>We can override all other zoning programs and just specify our zone-fn. When we activate zoning our animation will be run.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='lisp'><span class='line'><span class="p">(</span><span class="nv">eval-after-load</span> <span class="s">&quot;zone&quot;</span>
</span><span class='line'>  <span class="o">&#39;</span><span class="p">(</span><span class="nb">unless</span> <span class="p">(</span><span class="nv">memq</span> <span class="ss">&#39;zone-upper-case-text</span> <span class="p">(</span><span class="nb">append</span> <span class="nv">zone-programs</span> <span class="no">nil</span><span class="p">))</span>
</span><span class='line'>         <span class="p">(</span><span class="k">setq</span> <span class="nv">zone-programs</span> <span class="nv">[zone-upper-case-text]</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Zoning Examples:</h3>

<p>Zoning mode comes with lots of example animations that are good starting points:</p>

<p><a href="http://www.opensource.apple.com/source/emacs/emacs-51/emacs/lisp/play/zone.el">http://www.opensource.apple.com/source/emacs/emacs-51/emacs/lisp/play/zone.el</a></p>

<ul>
<li>zone-pgm-jitter</li>
<li>zone-pgm-putz-with-case</li>
<li>zone-pgm-dissolve</li>
<li>zone-pgm-whack-chars</li>
<li>zone-pgm-rotate</li>
<li>zone-pgm-rotate-LR-lockstep</li>
<li>zone-pgm-rotate-RL-lockstep</li>
<li>zone-pgm-rotate-LR-variable</li>
<li>zone-pgm-rotate-RL-variable</li>
<li>zone-pgm-drip</li>
<li>zone-pgm-drip-fretfully</li>
<li>zone-pgm-five-oclock-swan-dive</li>
<li>zone-pgm-martini-swan-dive</li>
<li>zone-pgm-paragraph-spaz</li>
<li>zone-pgm-stress</li>
</ul>


<h2>Open Sound Control Protocol Based animation</h2>

<p>OSC is a handy protocol for sending data between networked devices using url like endpoints.
Emacs has a plugin to run an OSC server (<a href="http://delysid.org/emacs/osc.html">http://delysid.org/emacs/osc.html</a>).
Hence if we have some kind of beat signal we could send a message to Emacs and in turn it could render changes based on our musics timing.</p>

<p>With my Overtone setup for Repl-Electric I have the following flow of OSC messages:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='lisp'><span class='line'><span class="nv">[Supercollider]</span> <span class="nv">-&gt;</span> <span class="nv">OSC</span> <span class="nv">-&gt;</span> <span class="nv">[Clojure]</span> <span class="nv">-&gt;</span> <span class="nv">OSC</span> <span class="nv">-&gt;</span> <span class="nv">[Emacs]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Within Emacs setup an OSC server and define two call backs which change the color of the window face number</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
</pre></td><td class='code'><pre><code class='emacs-lisp'><span class='line'><span class="p">(</span><span class="nb">require</span> <span class="ss">&#39;osc</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nb">require</span> <span class="ss">&#39;cl</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defvar</span> <span class="nv">osc-server</span> <span class="no">nil</span> <span class="s">&quot;Connection to receive msgs&quot;</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nb">defvar</span> <span class="nv">flip-state</span> <span class="no">t</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">osc-connect</span> <span class="p">()</span>
</span><span class='line'>  <span class="s">&quot;Create an OSC server and bind our fallback functions&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">when</span> <span class="p">(</span><span class="nb">not</span> <span class="nv">osc-server</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="k">setq</span> <span class="nv">osc-server</span>
</span><span class='line'>          <span class="p">(</span><span class="nv">osc-make-server</span>
</span><span class='line'>           <span class="s">&quot;localhost&quot;</span> <span class="mi">4558</span>
</span><span class='line'>           <span class="p">(</span><span class="k">lambda</span> <span class="p">(</span><span class="nv">path</span> <span class="k">&amp;rest</span> <span class="nv">args</span><span class="p">)</span>
</span><span class='line'>             <span class="p">(</span><span class="nb">cond</span>
</span><span class='line'>              <span class="p">((</span><span class="nv">string-match</span> <span class="s">&quot;/beat&quot;</span> <span class="nv">path</span><span class="p">)</span>
</span><span class='line'>               <span class="p">(</span><span class="k">progn</span> <span class="p">(</span><span class="k">if</span> <span class="nv">flip-state</span> <span class="p">(</span><span class="nv">on-beat</span><span class="p">)</span> <span class="p">(</span><span class="nv">off-beat</span><span class="p">))</span>
</span><span class='line'>                      <span class="p">(</span><span class="k">setq</span> <span class="nv">flip-state</span> <span class="p">(</span><span class="nb">not</span> <span class="nv">flip-state</span><span class="p">))))))))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">osc-make-server</span> <span class="p">(</span><span class="nv">host</span> <span class="nv">port</span> <span class="nv">default-handler</span><span class="p">)</span>
</span><span class='line'>  <span class="s">&quot;Settings for OSC server&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nv">make-network-process</span>
</span><span class='line'>   <span class="ss">:name</span> <span class="s">&quot;emacs OSC server&quot;</span>
</span><span class='line'>   <span class="ss">:host</span> <span class="nv">host</span>
</span><span class='line'>   <span class="ss">:server</span> <span class="no">t</span>
</span><span class='line'>   <span class="ss">:service</span> <span class="nv">port</span>
</span><span class='line'>   <span class="ss">:filter</span> <span class="nf">#&#39;</span><span class="nv">osc-filter</span>
</span><span class='line'>   <span class="ss">:type</span> <span class="ss">&#39;datagram</span>
</span><span class='line'>   <span class="ss">:family</span> <span class="ss">&#39;ipv4</span>
</span><span class='line'>   <span class="ss">:plist</span> <span class="p">(</span><span class="nb">list</span> <span class="ss">:generic</span> <span class="nv">default-handler</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">on-beat</span> <span class="p">()</span>
</span><span class='line'>  <span class="p">(</span><span class="nv">custom-set-faces</span>
</span><span class='line'>   <span class="o">&#39;</span><span class="p">(</span><span class="nv">window-number-face</span> <span class="p">((</span><span class="no">t</span> <span class="p">(</span><span class="ss">:foreground</span> <span class="s">&quot;deeppink&quot;</span><span class="p">))))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">defun</span> <span class="nv">off-beat</span> <span class="p">()</span>
</span><span class='line'>  <span class="p">(</span><span class="nv">custom-set-faces</span>
</span><span class='line'>   <span class="o">&#39;</span><span class="p">(</span><span class="nv">window-number-face</span> <span class="p">((</span><span class="no">t</span> <span class="p">(</span><span class="ss">:foreground</span> <span class="s">&quot;#FDDD0C&quot;</span><span class="p">))))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nv">osc-connect</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nb">provide</span> <span class="ss">&#39;osc-server</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>In Overtone/Clojure the sending signal:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defonce </span><span class="nv">emacs-client</span> <span class="p">(</span><span class="nf">osc-client</span> <span class="s">&quot;localhost&quot;</span> <span class="mi">4558</span><span class="p">))</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">emacs-trigger</span>    <span class="p">(</span><span class="nf">on-beat-trigger</span> <span class="mi">8</span> <span class="o">#</span><span class="p">(</span><span class="k">do </span><span class="p">(</span><span class="nf">osc-send</span> <span class="nv">emacs-client</span> <span class="s">&quot;/beat&quot;</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Heres a little demo with the brackets and window number changing colour based on the Overtone beat.</p>

<p><img src="http://josephwilk.github.io/images/brackets.gif" alt="Emacs rendering to the beat" /></p>

<h3>Synchronisation</h3>

<p>Given some small local lag we now have a timing signal which is threaded through all our tools. <a href="http://supercollider.github.io/">Supercollider</a>, <a href="http://overtone.github.io/">Overtone</a> and Emacs.</p>

<p>Which means our emacs animations can start to change to the beat of the music&hellip;</p>

<h2>Sound in ASCII</h2>

<p>Now that we have ways to animate and to connect audio data with emacs we can go a little further (way too far) and start to visualise the data about our sound in ASCII.</p>

<p>From Overtone or SuperCollider we can create a synth which tracks the peak and power of an audio signal. It sends us messages back with the data which we then forward on as OSC messages to Emacs.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='c++'><span class='line'><span class="cp">#Triggers a Sin Wave Oscillator and sends signals about power/peak</span>
</span><span class='line'><span class="n">SynthDef</span><span class="p">(</span><span class="err">\</span><span class="n">pulse</span><span class="p">,{</span>
</span><span class='line'>  <span class="n">var</span> <span class="n">sig</span><span class="p">,</span> <span class="n">chain</span><span class="p">,</span> <span class="n">onsets</span><span class="p">;</span>
</span><span class='line'>  <span class="n">sig</span> <span class="o">=</span> <span class="n">SinOsc</span><span class="p">.</span><span class="n">ar</span><span class="p">(</span><span class="n">Rand</span><span class="p">(</span><span class="mf">220.0</span><span class="p">,</span><span class="mf">440.0</span><span class="p">))</span>
</span><span class='line'>  <span class="o">*</span><span class="n">EnvGen</span><span class="p">.</span><span class="n">ar</span><span class="p">(</span><span class="n">Env</span><span class="p">.</span><span class="n">perc</span><span class="p">(</span><span class="nl">releaseTime</span><span class="p">:</span><span class="mf">0.5</span><span class="p">),</span><span class="n">Dust</span><span class="p">.</span><span class="n">ar</span><span class="p">(</span><span class="mf">0.5</span><span class="p">))</span><span class="o">*</span><span class="mf">0.7</span><span class="p">;</span>
</span><span class='line'>  <span class="n">Out</span><span class="p">.</span><span class="n">ar</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="n">sig</span> <span class="o">!</span><span class="mi">2</span><span class="p">);</span>
</span><span class='line'>  <span class="c1">//</span>
</span><span class='line'>  <span class="n">chain</span> <span class="o">=</span> <span class="n">FFT</span><span class="p">({</span><span class="n">LocalBuf</span><span class="p">(</span><span class="mi">512</span><span class="p">,</span> <span class="mi">1</span><span class="p">)},</span> <span class="n">sig</span><span class="p">);</span>
</span><span class='line'>  <span class="n">onsets</span> <span class="o">=</span> <span class="n">Onsets</span><span class="p">.</span><span class="n">kr</span><span class="p">(</span><span class="n">chain</span><span class="p">,</span><span class="mf">0.1</span><span class="p">,</span><span class="err">\</span><span class="n">power</span><span class="p">);</span>
</span><span class='line'>  <span class="n">SendTrig</span><span class="p">.</span><span class="n">kr</span><span class="p">(</span><span class="n">onsets</span><span class="p">);</span>
</span><span class='line'>  <span class="n">SendPeakRMS</span><span class="p">.</span><span class="n">kr</span><span class="p">(</span><span class="n">sig</span><span class="p">,</span> <span class="mi">20</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="s">&quot;/replyAddress&quot;</span><span class="p">);</span>
</span><span class='line'><span class="p">}).</span><span class="n">add</span><span class="p">;</span>
</span><span class='line'><span class="cp">#Run the crazy synth above</span>
</span><span class='line'><span class="n">Synth</span><span class="p">(</span><span class="err">\</span><span class="n">pulse</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="cp">#Forward the data on as an OSC message</span>
</span><span class='line'><span class="cp">#to emacs</span>
</span><span class='line'><span class="o">~</span><span class="n">host</span> <span class="o">=</span> <span class="n">NetAddr</span><span class="p">(</span><span class="s">&quot;localhost&quot;</span><span class="p">,</span> <span class="mi">4859</span><span class="p">);</span>
</span><span class='line'><span class="n">p</span> <span class="o">=</span> <span class="n">OSCFunc</span><span class="p">({</span> <span class="o">|</span><span class="n">msg</span><span class="o">|</span>
</span><span class='line'>  <span class="o">~</span><span class="n">host</span><span class="p">.</span><span class="n">sendMsg</span><span class="p">(</span><span class="s">&quot;/peakpower&quot;</span><span class="p">,</span><span class="n">msg</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span> <span class="n">msg</span><span class="p">[</span><span class="mi">4</span><span class="p">]);</span>
</span><span class='line'>  <span class="s">&quot;peak: %, rms: %&quot;</span><span class="p">.</span><span class="n">format</span><span class="p">(</span><span class="n">msg</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span> <span class="n">msg</span><span class="p">[</span><span class="mi">4</span><span class="p">]).</span><span class="n">postln</span>
</span><span class='line'><span class="p">},</span> <span class="err">&#39;</span><span class="o">/</span><span class="n">replyAddress</span><span class="err">&#39;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>And in our emacs OSC server:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='emacs-lisp'><span class='line'><span class="p">((</span><span class="nv">string-match</span> <span class="s">&quot;/peakpower&quot;</span> <span class="nv">path</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">progn</span>
</span><span class='line'>    <span class="p">(</span><span class="nv">with-current-buffer</span> <span class="s">&quot;flatiron.clj&quot;</span>
</span><span class='line'>      <span class="p">(</span><span class="k">let</span> <span class="p">((</span><span class="nv">sig</span> <span class="p">(</span><span class="nb">round</span> <span class="p">(</span><span class="nb">*</span> <span class="mf">100.0</span> <span class="p">(</span><span class="nb">first</span> <span class="nv">args</span><span class="p">)))))</span>
</span><span class='line'>        <span class="p">(</span><span class="nv">message</span> <span class="p">(</span><span class="nb">format</span> <span class="s">&quot;%f&quot;</span> <span class="p">(</span><span class="nb">first</span> <span class="nv">args</span><span class="p">)))</span>
</span><span class='line'>        <span class="p">(</span><span class="nb">dotimes</span> <span class="p">(</span><span class="nv">n</span> <span class="nv">sig</span><span class="p">)</span>
</span><span class='line'>          <span class="p">(</span><span class="nv">insert</span> <span class="s">&quot;‚ñì&quot;</span><span class="p">))</span>
</span><span class='line'>        <span class="p">(</span><span class="nv">insert</span> <span class="s">&quot;‚ñí‚ñë&quot;</span><span class="p">))</span>
</span><span class='line'>      <span class="p">(</span><span class="nv">insert</span> <span class="s">&quot;\n&quot;</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>




<iframe src="https://player.vimeo.com/video/141159277" width="500" height="281" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>


<h2>Repl Electric Emacs animations</h2>

<p>All my Emacs animations are used to conclude the performance.
Heres lies the source code, some screenshots and tricks &amp; tips that made the animations possible.</p>

<p>Here&rsquo;s a demo of all the Repl Electric animations discussed in action:</p>

<iframe src="https://player.vimeo.com/video/141310772" width="500" height="375" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>


<h3>End of Buffer</h3>

<p><a href="https://github.com/repl-electric/view-pane/blob/master/animations/end-of-buffer.el">https://github.com/repl-electric/view-pane/blob/master/animations/end-of-buffer.el</a></p>

<p><img src="http://josephwilk.github.io/images/endofbuffer01.png"/ alt="end-of-buffer-01"><img src="http://josephwilk.github.io/images/endofbuffer02.png" alt="end-of-buffer-02"/><img src="http://josephwilk.github.io/images/endofbuffer03.png" alt="end-of-buffer-03"/></p>

<p>In this animations the text gets slowly broken up with white spaces and then like the wind, blows the characters away. Sometimes words are ripped apart as they blow in the wind (if we get lucky).</p>

<p>Two main phases:</p>

<ul>
<li><p>Injection of spaces.
This starts to distort the text while keeping it readable. It provides a way to increase the effect of expanding whitespace in the next stage.</p></li>
<li><p>Transforming whitespace into lots of whitespace.
A Regex matches whitespace and replaces it with a randomly increasing amount of whitespace. Which leads to the effect of the characters of the code blowing away. I spent a while trying to improve the speed of this phase and Regexs proved to be the fastest way.</p></li>
</ul>


<p>If we move the text fast enough soft word wrapping means the text appears to re-enter from the left side of the screen and eventually disappear out of the buffer. Without soft wrapping we get a horrible jitter as emacs moves back and forth between left and right side of the buffer.</p>

<p>A couple of other tricks/tactics used:</p>

<ul>
<li>Continually incrementing integer. Useful for injecting movement or using sin/cos fn with a continuous value.</li>
<li>Perserving the syntax highlighting of the original code in an attempt to maintain some of the meaning of the code.</li>
</ul>


<h3>The Stars</h3>

<p><a href="https://github.com/repl-electric/view-pane/blob/master/animations/the-stars.el">https://github.com/repl-electric/view-pane/blob/master/animations/the-stars.el</a></p>

<p><img src="http://josephwilk.github.io/images/thestars01.png"/></p>

<p>This was my first animation and was based heavily on <code>zone-pgm-drip-fretfully</code>.</p>

<p>It randomly picks a single character and moves it down the screen until it hits another letter or exits the screen.</p>

<p>When running Emacs + Overtone + OpenGL, Emacs starts to slow down so part of the challenge was ensuring the animation ran as fast as possible.</p>

<p>A nice property of this is that as the OpenGL shaders shutdown, the speed of the animation increases and the code destroys itself more quickly.</p>

<h3>Waves</h3>

<p><a href="https://github.com/repl-electric/view-pane/blob/master/animations/waves.el">https://github.com/repl-electric/view-pane/blob/master/animations/waves.el</a></p>

<p><img src="http://josephwilk.github.io/images/waves01.png"/><img src="http://josephwilk.github.io/images/waves02.png"/></p>

<p>This animations attempts to simulate the effect of waves using line wrapping and mixing deletions with insertions of different sizes to create lines that seem to move at different speeds.</p>

<h2>Breaking Tools</h2>

<p>While it may seem silly to bend Emacs to do things it was never intended to do, it&rsquo;s an important part of discovering for yourself how you want your tools to work. Not just doing what you are expected but breaking them apart and discovering for yourself how you want to use them.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure and Kinesis at scale]]></title>
    <link href="http://josephwilk.github.io/clojure/clojure-and-kinesis-at-scale.html"/>
    <updated>2015-09-30T15:58:12+01:00</updated>
    <id>http://josephwilk.github.io/clojure/clojure-and-kinesis-at-scale</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been working over the last year in the data team at SoundCloud building a realtime data pipeline using Clojure and Amazon&rsquo;s Kinesis. Kinesis is Amazons equivalent to Kafka, &ldquo;Real-Time data processing on the Cloud&rdquo;. This is a summary of what was built, some lessons learnt and all the details in-between.</p>

<figure>
<img src="http://josephwilk.github.io/images/kinesis_pipeline.png" alt="Kinesis pipeline"/>
<figcaption>Kinesis pipeline at SoundCloud</figcaption>
</figure>


<h2>Tapping Real traffic</h2>

<p>The first step was to tee the traffic from a live system to a test system without comprising its function.
The main function of the live system is logging JSON events to file (which eventually end up somewhere like HDFS).
Tailing the logs of the live system gives us access to the raw data we want to forward on to our test system.
A little Go script watches the logs, parses out the data and then forwards them in batch to test instances that will push to Kinesis. Hence we had live data flowing through the system and after launch a test setup to experiment with. <a href="https://twitter.com/brapse">Sean Braithwaite</a> was the mastermind behind this little bit of magic.</p>

<figure>
<img src="http://josephwilk.github.io/images/canary.png" alt="Canary Kinesis pipeline"/>
<figcaption>Tapping Traffic</figcaption>
</figure>


<h2>Sending to Kinesis</h2>

<p>All Kinesis sending happens in an application called the EventGateway (also written in Clojure). This endpoint is one of the most heavily loaded services in SoundCloud (at points it has more traffic than the rest of SoundCloud combined). The Eventgateway does a couple of things but at its core it validates and broadcasts JSON messages. Hence this is where our Kinesis client slots in.</p>

<h5>Squeezing Clojure Reflection</h5>

<p>Its worth mentioning that in order for the Eventgateway service to be performant we had to remove all reflection in tight loops through type hints. It simply could not keep up without this. It became a common pattern to turn reflection warnings on while working in Clojure.</p>

<p>Project.clj</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="ss">:profiles</span> <span class="p">{</span><span class="ss">:dev</span> <span class="p">{</span><span class="ss">:global-vars</span> <span class="p">{</span><span class="nv">*warn-on-reflection*</span> <span class="nv">true</span> <span class="nv">*assert*</span> <span class="nv">false</span><span class="p">}}}</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Kinesis</h4>

<p>The Eventgateway posts to Kinesis in batch using a <a href="http://docs.oracle.com/javase/7/docs/api/java/util/concurrent/ConcurrentLinkedQueue.html">ConcurrentLinkedQueue</a> and separate producers and consumers. Messages are pushed into a <code>ConcurrentLinkedQueue</code>. We rolled our own Clojure Kinesis client using Amazons Java library rather than using <a href="https://github.com/mcohen01/amazonica">Amazonica</a>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="c1">;; Java Amazon libraries used</span>
</span><span class='line'><span class="p">[</span><span class="nv">com.amazonaws/aws-java-sdk</span> <span class="s">&quot;1.9.33&quot;</span>         <span class="ss">:exclusions</span> <span class="p">[</span><span class="nv">joda-time</span><span class="p">]]</span>
</span><span class='line'><span class="p">[</span><span class="nv">com.amazonaws/amazon-kinesis-client</span> <span class="s">&quot;1.1.0&quot;</span> <span class="ss">:exclusions</span> <span class="p">[</span><span class="nv">joda-time</span><span class="p">]]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Amazonica was good to get started quickly in the initial phase but there are a couple of reasons we switched to our own unique snowflake (which still looked a little like Amazonica):</p>

<ul>
<li>Amazonica did not support batch mode for Kinesis. Under initial tests it was impossible to scale this without batch.</li>
<li>Injecting our own telemetry at low levels to learn more about Kinesis running.</li>
<li>Some of its sensible defaults where not so sensible (for example default encoding the data using nippy).</li>
<li>Ultimately most of any Kinesis client/server is configuration and tuning.</li>
<li>Amazonica&rsquo;s source is hard to read with a little too much <code>alter-var-root</code> going on.</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="c1">;;Ugh. Its not just me right?</span>
</span><span class='line'><span class="p">(</span><span class="nf">alter-var-root</span>
</span><span class='line'>  <span class="o">#</span><span class="ss">&#39;amazonica.aws.kinesis/get-shard-iterator</span>
</span><span class='line'>  <span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">f</span><span class="p">]</span>
</span><span class='line'>    <span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="o">&amp;</span> <span class="nv">args</span><span class="p">]</span>
</span><span class='line'>      <span class="p">(</span><span class="ss">:shard-iterator</span> <span class="p">(</span><span class="nb">apply </span><span class="nv">f</span> <span class="nv">args</span><span class="p">)))))</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Pushing Messages in a Queue</h4>

<p>Very simple, just adding a message to the <code>ConcurrentLinkedQueue</code>. A environment variable allows us to gradually scale up or down the percentage of traffic that is added to the queue.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">require</span> <span class="o">&#39;</span><span class="p">[</span><span class="nv">environ.core</span> <span class="ss">:refer</span> <span class="ss">:all</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">kinesis-message-queue</span> <span class="p">(</span><span class="nf">ConcurrentLinkedQueue.</span><span class="p">))</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">hard-limit-queue-size</span> <span class="mi">1000</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">queue-size</span> <span class="p">(</span><span class="nf">atom</span> <span class="mi">0</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nb">send </span><span class="p">[</span><span class="nv">message</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">when-let </span><span class="p">[</span><span class="nv">threshold</span> <span class="p">(</span><span class="nf">env</span> <span class="ss">:kinesis-traffic</span><span class="p">)]</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">when </span><span class="p">(</span><span class="nb">&gt; </span><span class="p">(</span><span class="nb">rand-int </span><span class="mi">100</span><span class="p">)</span> <span class="p">(</span><span class="nb">- </span><span class="mi">100</span> <span class="p">(</span><span class="nb">or </span><span class="p">(</span><span class="nf">Integer/valueOf</span> <span class="o">^</span><span class="nv">String</span> <span class="nv">threshold</span><span class="p">)</span> <span class="mi">0</span><span class="p">)))</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">when </span><span class="p">(</span><span class="nb">&lt;= </span><span class="o">@</span><span class="nv">queue-size</span> <span class="nv">hard-limit-queue-size</span><span class="p">)</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">.add</span> <span class="nv">kinesis-message-queue</span> <span class="nv">message</span><span class="p">)</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">swap!</span> <span class="nv">queue-size</span> <span class="nv">inc</span><span class="p">)))))</span>
</span></code></pre></td></tr></table></div></figure>


<h5>Failure</h5>

<p>The queue pusher operates within a wider system and any failures due to Amazon being unreachable should not impede the function of the system. For the client this means:</p>

<ul>
<li>Not exceeding memory limits with a hard queue size (since ConcurrentLinkedQueue is unbound in size).</li>
<li>Backing off workers if the queue is full to prevent cpu throttling.</li>
</ul>


<p>When we cannot send messages to Kinesis we instead log them to disk, and into our normal logging pipeline (usually ending up in HDFS). Hence we could replay at a later date if required.</p>

<h4>Sending batches to Kinesis</h4>

<p>The workers, operating in separate threads consuming messages from the <code>ConcurrentLinkedQueue</code> collecting them into a batch:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">loop </span><span class="p">[</span><span class="nv">batch</span> <span class="p">[]</span>
</span><span class='line'>       <span class="nv">batch-start-time</span> <span class="p">(</span><span class="nf">time/now</span><span class="p">)</span>
</span><span class='line'>       <span class="nv">poll-misses</span> <span class="mi">0</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nf">batch-ready-to-send?</span> <span class="nv">batch</span> <span class="nv">batch-start-time</span><span class="p">)</span>
</span><span class='line'>    <span class="nv">batch</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">if-let </span><span class="p">[</span><span class="nv">event</span> <span class="p">(</span><span class="nf">.poll</span> <span class="nv">kinesis-message-queue</span><span class="p">)]</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">do</span>
</span><span class='line'>        <span class="p">(</span><span class="nf">swap!</span> <span class="nv">queue-size</span> <span class="nv">dec</span><span class="p">)</span>
</span><span class='line'>        <span class="p">(</span><span class="nf">recur</span> <span class="p">(</span><span class="nb">conj </span><span class="nv">batch</span> <span class="nv">event</span><span class="p">)</span> <span class="nv">batch-start-time</span> <span class="mi">0</span><span class="p">))</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">do</span>
</span><span class='line'>        <span class="p">(</span><span class="nf">Thread/sleep</span> <span class="p">(</span><span class="nf">exponential-backoff-sleep</span> <span class="nv">poll-misses</span><span class="p">))</span>
</span><span class='line'>        <span class="p">(</span><span class="nf">recur</span> <span class="nv">batch</span> <span class="nv">batch-start-time</span> <span class="p">(</span><span class="nb">inc </span><span class="nv">poll-misses</span><span class="p">))))))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>When polling from the queue an exponential back-off if no messages are on the queue.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">exponential-backoff-sleep</span>
</span><span class='line'>  <span class="s">&quot;Exponential backoff with jitter and a max &quot;</span>
</span><span class='line'>  <span class="p">[</span><span class="nv">misses</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">max-timeout</span> <span class="mi">1000</span>
</span><span class='line'>        <span class="nv">jitter-order</span> <span class="mi">10</span><span class="p">]</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">Math/min</span>
</span><span class='line'>     <span class="nv">max-timeout</span>
</span><span class='line'>     <span class="p">(</span><span class="nf">Math/round</span> <span class="p">(</span><span class="nb">+ </span><span class="p">(</span><span class="nf">Math/exp</span> <span class="nv">misses</span><span class="p">)</span>
</span><span class='line'>                    <span class="p">(</span><span class="nb">* </span><span class="p">(</span><span class="nf">Math/random</span><span class="p">)</span>
</span><span class='line'>                       <span class="nv">jitter-order</span><span class="p">))))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Once the batch is ready (in terms of age or size) its sent to Kinesis.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn- </span><span class="nv">failures-&gt;events</span> <span class="p">[</span><span class="o">^</span><span class="nv">PutRecordsResult</span> <span class="nv">put-results</span> <span class="nv">events</span><span class="p">]</span>
</span><span class='line'>  <span class="s">&quot;Find the events that are marked as failed in the PutRecordsResult&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">-&gt;&gt;</span> <span class="nv">put-results</span>
</span><span class='line'>       <span class="nv">.getRecords</span>
</span><span class='line'>       <span class="p">(</span><span class="nb">map vector </span><span class="p">(</span><span class="nf">range</span><span class="p">))</span>
</span><span class='line'>       <span class="p">(</span><span class="nb">filter </span><span class="p">(</span><span class="k">fn </span><span class="p">[[</span><span class="nv">idx</span> <span class="o">^</span><span class="nv">PutRecordsResultEntry</span> <span class="nv">e</span><span class="p">]]</span> <span class="p">(</span><span class="nf">.getErrorCode</span> <span class="nv">e</span><span class="p">)))</span>
</span><span class='line'>       <span class="p">(</span><span class="nb">map </span><span class="p">(</span><span class="k">fn </span><span class="p">[[</span><span class="nv">idx</span> <span class="nv">_</span><span class="p">]]</span> <span class="p">(</span><span class="nb">nth </span><span class="nv">events</span> <span class="nv">idx</span><span class="p">)))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn- </span><span class="nv">send-events</span>
</span><span class='line'>  <span class="s">&quot;Perform putRecords request to send the batch to Kinesis</span>
</span><span class='line'><span class="s">   returns a list of events that failed.&quot;</span>
</span><span class='line'>  <span class="p">[</span><span class="o">^</span><span class="nv">AmazonKinesisClient</span> <span class="nv">client</span> <span class="nv">stream-name</span> <span class="nv">events</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">try+</span>
</span><span class='line'>   <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">result</span> <span class="p">(</span><span class="nf">.putRecords</span> <span class="nv">client</span> <span class="p">(</span><span class="nf">events-&gt;put-records-request</span> <span class="nv">events</span> <span class="nv">stream-name</span><span class="p">))]</span>
</span><span class='line'>     <span class="p">(</span><span class="k">if </span><span class="p">(</span><span class="nb">pos? </span><span class="p">(</span><span class="nf">.getFailedRecordCount</span> <span class="nv">result</span><span class="p">))</span>
</span><span class='line'>       <span class="p">(</span><span class="nf">failures-&gt;events</span> <span class="nv">result</span> <span class="nv">events</span><span class="p">))</span>
</span><span class='line'>       <span class="p">[])))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note this is where we also decided the partition key. In our case its important for the same user to be located on the same partition.
For example when consuming from Kinesis a worker is allocated a partition to work from and would miss events if they where across multiple partitions.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn- </span><span class="nv">events-&gt;put-records-request</span>
</span><span class='line'>  <span class="s">&quot;Take client and a vector of JsonNodes and produce a PutRecord&quot;</span>
</span><span class='line'>  <span class="p">[</span><span class="nv">batch</span> <span class="nv">event-stream</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">batch-list</span>  <span class="p">(</span><span class="nf">java.util.ArrayList.</span><span class="p">)</span>
</span><span class='line'>        <span class="nv">put-request</span> <span class="p">(</span><span class="nf">PutRecordsRequest.</span><span class="p">)]</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">.setStreamName</span> <span class="nv">put-request</span> <span class="nv">event-stream</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">doseq </span><span class="p">[</span><span class="o">^</span><span class="nv">ObjectNode</span> <span class="nv">event</span> <span class="nv">batch</span><span class="p">]</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">.remove</span> <span class="nv">event</span> <span class="o">^</span><span class="nv">String</span> <span class="nv">failure-metadata</span><span class="p">)</span>
</span><span class='line'>      <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">request-entry</span> <span class="p">(</span><span class="nf">PutRecordsRequestEntry.</span><span class="p">)</span>
</span><span class='line'>            <span class="nv">request-data</span>  <span class="p">(</span><span class="nf">.getBytes</span> <span class="p">(</span><span class="nb">str </span><span class="nv">event</span><span class="p">))</span>
</span><span class='line'>            <span class="nv">request-buf</span>   <span class="p">(</span><span class="nf">ByteBuffer/wrap</span> <span class="nv">request-data</span> <span class="mi">0</span> <span class="p">(</span><span class="nb">alength </span><span class="nv">request-data</span><span class="p">))</span>
</span><span class='line'>            <span class="nv">partition-key</span> <span class="p">(</span><span class="ss">:user-id</span> <span class="nv">event</span><span class="p">)]</span>
</span><span class='line'>        <span class="p">(</span><span class="nb">doto </span><span class="nv">request-entry</span>
</span><span class='line'>          <span class="p">(</span><span class="nf">.setData</span>         <span class="nv">request-buf</span><span class="p">)</span>
</span><span class='line'>          <span class="p">(</span><span class="nf">.setPartitionKey</span> <span class="nv">partition-key</span><span class="p">))</span>
</span><span class='line'>        <span class="p">(</span><span class="nf">.add</span> <span class="nv">batch-list</span> <span class="nv">request-entry</span><span class="p">)))</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">.setRecords</span> <span class="nv">put-request</span> <span class="nv">batch-list</span><span class="p">)</span>
</span><span class='line'>    <span class="nv">put-request</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<h5>Failure</h5>

<p>Failure can occur on individual records within a batch or in the batch as a whole.</p>

<h6>Individual failures</h6>

<ol>
<li>These messages are re-added to the queue so we can try again. If the messages fail for some nth time they are considered invalid and rejected from Kinesis and logged as an error.</li>
</ol>


<h6>Batch level</h6>

<ol>
<li><p>Amazon had an Internal Failure. We don&rsquo;t know what went wrong. (We see this regularly in normal function).</p></li>
<li><p>Amazon Kinesis is not resolvable (<code>AmazonClientException/AmazonServiceException</code>).</p></li>
<li><p>Exceeding the read/write limits of Kinesis (<code>ProvisionedThroughputExceededException</code>).</p></li>
</ol>


<p>This is our backpressure signal, in which case at worst we need to log to disk for replay later.</p>

<h2>Consuming Messages from Kinesis</h2>

<p>With the consumption of events we have a different application stream for every worker. All workers have their own streams, and own checkpoints so they operate independently of each other. Some example of the workers we gave running:</p>

<ul>
<li>Logging Events to s3</li>
<li>Calculating listening time</li>
<li>Forwarding certain messages on to various other systems (like RabbitMQ).</li>
</ul>


<p>Launching a worker is pretty simple with the Amazon Java Kinesis library.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="ss">:import</span> <span class="p">[</span><span class="nv">com.amazonaws.services.kinesis.clientlibrary.lib.worker</span> <span class="nv">Worker</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">-main</span> <span class="p">[</span><span class="o">&amp;</span> <span class="nv">args</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">worker-fn</span> <span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">events</span><span class="p">]</span> <span class="p">(</span><span class="nb">print </span><span class="nv">events</span><span class="p">))</span>
</span><span class='line'>        <span class="nv">config</span> <span class="p">(</span><span class="nf">KinesisClientLibConfiguration.</span>   <span class="nv">worker-fn</span><span class="p">)</span> <span class="c1">;;I&#39;m airbrushing over the Java classes</span>
</span><span class='line'>        <span class="nv">processor</span> <span class="p">(</span><span class="nf">reify</span> <span class="nv">IRecordProcessorFactory</span> <span class="nv">worker-fn</span><span class="p">)</span> <span class="c1">;;Ultimately this is a lot of config wrapped in Java fun</span>
</span><span class='line'>        <span class="p">[</span><span class="o">^</span><span class="nv">Worker</span> <span class="nv">worker</span> <span class="nv">uuid</span><span class="p">]</span> <span class="p">(</span><span class="nf">Worker.</span> <span class="nv">processor</span> <span class="nv">config</span><span class="p">)]</span>
</span><span class='line'>          <span class="p">(</span><span class="nf">future</span> <span class="p">(</span><span class="nf">.run</span> <span class="nv">worker</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>One of the hardest parts of setting up the a worker is getting the configuration right to ensure that the consumers are getting through the events fast enough. Events are held in Amazon for 24 hours after entry, and hence there is a minimum consumption rate.</p>

<p>Counting events in and events out with <a href="http://prometheus.io/">Prometheus</a> made it easier to get the correct consumption rates.
<img src="http://josephwilk.github.io/images/kinesis_entry_exit_rates.png" alt="Entry/exit rates"/></p>

<p>Via the Amazon console you also get access to various graphs around read/write rates and limits:</p>

<p><img src="http://josephwilk.github.io/images/amazon_kinesis_graphs.png"/></p>

<p>Finally you can also look at Amazon&rsquo;s Dynamodb instance for the Kinesis stream providing insight into metrics around leases, how many where revoked, stolen, never finished, etc.</p>

<p>Here is an example of one of our Kinesis workers configuration covered in scribblings of me trying to work out the right settings.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'>  <span class="p">{</span>
</span><span class='line'>   <span class="c1">;;default 1 sec, cannot be lower than 200ms</span>
</span><span class='line'>   <span class="c1">;;If we are not reading fast enough this is a good value to tweak</span>
</span><span class='line'>   <span class="ss">:idle-time-between-reads-in-millis</span> <span class="mi">1800</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">;;Clean up leases for shards that we&#39;ve finished processing (don&#39;t wait</span>
</span><span class='line'>   <span class="c1">;;until they expire)</span>
</span><span class='line'>   <span class="ss">:cleanup-leases-upon-shard-completion</span> <span class="nv">true</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">;;If the heartbeat count does not increase within the configurable timeout period,</span>
</span><span class='line'>   <span class="c1">;;other workers take over processing of that shard.</span>
</span><span class='line'>   <span class="c1">;;*IMPORTANT* If this time is shorter than time for a worker to checkpoint all nodes</span>
</span><span class='line'>   <span class="c1">;;will keep stealing each others leases producing a lot of contention.</span>
</span><span class='line'>   <span class="ss">:failover-time-millis</span> <span class="mi">80000</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">;;Max records in a single returned in a `GetRecords`. Cannot exceed 10,000</span>
</span><span class='line'>   <span class="ss">:max-records</span> <span class="mi">4500</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">;;Process records even if GetRecords returned an empty record list.</span>
</span><span class='line'>   <span class="ss">:call-process-records-even-for-empty-record-list</span> <span class="nv">false</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">;;Sleep for this duration if the parent shards have not completed processing,</span>
</span><span class='line'>   <span class="c1">;;or we encounter an exception.</span>
</span><span class='line'>   <span class="ss">:parent-shard-poll-interval-millis</span> <span class="mi">10000</span>
</span><span class='line'>
</span><span class='line'>   <span class="c1">;;By default, the KCL begins withs the most recently added record.</span>
</span><span class='line'>   <span class="c1">;;Instead always reads data from the beginning of the stream.</span>
</span><span class='line'>   <span class="ss">:initial-position-in-stream</span>  <span class="ss">:TRIM_HORIZON</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Monitoring</h2>

<p>Prometheus (<a href="http://prometheus.io/">http://prometheus.io/</a>) a monitoring tool built at SoundCloud was <em>core</em> to developing, scaling and monitoring all of this pipeline. Amazon does provide some useful graphs within the AWS console but more detailed feedback was very helpful even if it was removed later.</p>

<h4>Exception Logging pattern</h4>

<p>All Exceptions are counted and sent to log. This was a very useful pattern for driving out errors and spotting leaks in the interactions with Kinesis and consumption:</p>

<p>(Using a Clojure wrapper around Prometheus: <a href="https://github.com/josephwilk/prometheus-clj">https://github.com/josephwilk/prometheus-clj</a>)</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">try+</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">worker-fn</span> <span class="nv">raw-events</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nf">catch</span> <span class="nv">Exception</span> <span class="nv">e</span>
</span><span class='line'>  <span class="c1">;;Count based on exception class</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">inc-counter</span> <span class="ss">:failed-batches</span> <span class="p">{</span><span class="ss">:type</span> <span class="nv">worker-type</span> <span class="ss">:error-code</span> <span class="p">(</span><span class="nb">str </span><span class="p">(</span><span class="nf">.getClass</span> <span class="nv">e</span><span class="p">))})</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">log/error</span> <span class="nv">e</span><span class="p">)))]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note Kinesis regularly spits out &ldquo;<code>InternalFailure</code>&rdquo; Exceptions. Thats all you get&hellip;</p>

<p><img src="http://josephwilk.github.io/images/kinesis_failures.png" alt="Kinesis Internal failures"/></p>

<h2>A Cloud Pipeline in Pictures</h2>

<p>In my previous post about <a href="http://blog.josephwilk.net/clojure/building-clojure-services-at-scale.html">Building Clojure services at scale</a> I converted the system metrics to sound. This time I convert the metrics across all the machine into vertexes on a mesh using <a href="http://openframeworks.cc">OpenFrameworks</a>. So you start to see a visual representation in 3D of the function of the system.</p>

<p><img src="http://josephwilk.github.io/images/soundcloud_kinesis.png"  width="500"/>
<img src="http://josephwilk.github.io/images/soundcloud_kinesis2.png" width="500"/>
<img src="http://josephwilk.github.io/images/soundcloud_kinesis4.png" width="500"/>
<img src="http://josephwilk.github.io/images/soundcloud_kinesis3.png" width="500"/></p>

<h2>Thanks</h2>

<p>This work constitues a team effort by the Data team at SoundCloud. A lot of advice, collaboration and hard work. Kudos to everyone.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Clojure and Overtone driving Minecraft]]></title>
    <link href="http://josephwilk.github.io/clojure/overtone-driving-minecraft.html"/>
    <updated>2015-03-01T14:58:12+00:00</updated>
    <id>http://josephwilk.github.io/clojure/overtone-driving-minecraft</id>
    <content type="html"><![CDATA[<p>Using Clojure we create interesting 3D shapes in Minecraft to the beat of music generated from Overtone.</p>

<p>We achieve this by embedding a Clojure REPL inside a Java Minecraft server which loads Overtone and connects to an external Supercollider instance (What Overtone uses for sound).</p>

<h3>Demo</h3>

<iframe src="http://josephwilk.github.io//player.vimeo.com/video/120907923" width="500" height="375" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>


<p>Demo Source code: <a href="https://github.com/josephwilk/clj-minecraft/blob/master/src/cljminecraft/overtone.clj">https://github.com/josephwilk/clj-minecraft/blob/master/src/cljminecraft/overtone.clj</a></p>

<h4>Tools</h4>

<ul>
<li>Java Minecraft server Craftbukkit/Spigot: <a href="http://www.spigotmc.org/">http://www.spigotmc.org/</a></li>
<li>Minecraft client (requires purchase) <a href="https://minecraft.net">https://minecraft.net</a></li>
<li>clj-minecraft Bukkit plugin: <a href="https://github.com/josephwilk/clj-minecraft">https://github.com/josephwilk/clj-minecraft</a></li>
<li>Overtone (patched): <a href="https://github.com/josephwilk/overtone/tree/minecraft_overtone">https://github.com/josephwilk/overtone/tree/minecraft_overtone</a></li>
<li>MUD (useful helpers for Overtone): <a href="https://github.com/josephwilk/mud">https://github.com/josephwilk/mud</a></li>
<li>Supercollider: <a href="http://supercollider.sourceforge.net">http://supercollider.sourceforge.net</a></li>
</ul>


<p>(Dependent on your IDE of choice)</p>

<ul>
<li>Emacs &ndash; cider: <a href="https://github.com/clojure-emacs/cider">https://github.com/clojure-emacs/cider</a></li>
<li>Vim   &ndash; fireplace: <a href="https://github.com/tpope/vim-fireplace">https://github.com/tpope/vim-fireplace</a></li>
</ul>


<h2>Building the world</h2>

<p>We need to install Spigot which is an optimized version of the Craftbukkit Java Minecraft server and install clj-minecraft project as a plugin. Things are complicated by Bukkit no longer being registered in Maven.</p>

<p>Read through the Makefile install:</p>

<p><a href="https://github.com/josephwilk/clj-minecraft/blob/master/Makefile">https://github.com/josephwilk/clj-minecraft/blob/master/Makefile</a></p>

<p>If your happy clone and run:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git clone git@github.com:josephwilk/clj-minecraft.git && make install</span></code></pre></td></tr></table></div></figure>


<p>Bukkit + clj-minecraft will be installed for you.</p>

<h2>Running the world</h2>

<p>You will need to edit the <code>minecraft/eula.txt</code> indicating you agree with the license. Then you can run your Minecraft server:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>java -XX:MaxPermSize=1G -jar spigot-1.8.jar</span></code></pre></td></tr></table></div></figure>


<h2>Seeing the world</h2>

<p>Buy and install a Minecraft client: <a href="https://minecraft.net">https://minecraft.net</a></p>

<p>Select >&ldquo;Multiplayer&rdquo; >&ldquo;Direct connect&rdquo; and enter the &ldquo;Server Address&rdquo; as localhost.</p>

<h1>Bring music to the world</h1>

<h3>Install and Boot Supercollider</h3>

<p><a href="http://supercollider.github.io">http://supercollider.github.io</a></p>

<p>Once installed:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#Find the Supercollider binary (scsynth)
</span><span class='line'>$ sudo find /. -name "scsynth"
</span><span class='line'>
</span><span class='line'>/Applications/SuperCollider/SuperCollider.app/Contents/Resources/scsynth
</span><span class='line'>
</span><span class='line'>#Run Supercollider server
</span><span class='line'>/Applications/SuperCollider/SuperCollider.app/Contents/Resources/scsynth -u 57110</span></code></pre></td></tr></table></div></figure>


<h3>Speaking to the Minecraft REPL</h3>

<p>clj-minecraft opens a REPL on localhost port 4005.  Using emacs and <code>cider</code> connect to this REPL instance.</p>

<p>Boot and connect Overtone:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">use</span> <span class="ss">&#39;overtone.core</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">connect-external-server</span><span class="p">)</span>  <span class="o">#</span><span class="nv">=&gt;</span> <span class="ss">:happy-hacking</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Interaction</h3>

<p>Using <code>MUD</code> we have some useful wrappers around Overtone for scheduling functions on beats.</p>

<p>To coordinate graphics and sound we schedule both within a single function.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">require</span> <span class="o">&#39;</span><span class="p">[</span><span class="nv">mud.core</span> <span class="ss">:as</span> <span class="nv">mud</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defonce </span><span class="nv">highhat-sample</span> <span class="p">(</span><span class="nf">freesound</span> <span class="mi">53532</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">ride-trigger</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">mud/on-beat-trigger</span> <span class="mi">8</span>       <span class="c1">;; Every 8th beat</span>
</span><span class='line'>   <span class="p">(</span><span class="k">fn </span><span class="p">[]</span>
</span><span class='line'>     <span class="p">(</span><span class="nf">highhat-sample</span><span class="p">)</span>      <span class="c1">;; Play sample</span>
</span><span class='line'>     <span class="p">(</span><span class="nf">block</span> <span class="mi">2</span> <span class="mi">10</span> <span class="mi">2</span> <span class="ss">:grass</span><span class="p">)</span> <span class="c1">;; Place a block into the Minecraft world</span>
</span><span class='line'><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Most functions that change the state of the Minecraft world need to be run in the main GUI thread. To achieve this we wrap any state changing function within  <code>ui-sync</code> (<a href="https://github.com/CmdrDats/clj-minecraft/blob/a3331e925b56becf88d9ef96cab225856e2f7ead/src/cljminecraft/bukkit.clj#L39-L42">https://github.com/CmdrDats/clj-minecraft/blob/a3331e925b56becf88d9ef96cab225856e2f7ead/src/cljminecraft/bukkit.clj#L39-L42</a>).</p>

<p>For example a function to place a block into the Minecraft world:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nb">import </span><span class="o">&#39;</span><span class="p">[</span><span class="nv">org.bukkit</span> <span class="nv">Location</span> <span class="nv">Material</span><span class="p">])</span>
</span><span class='line'><span class="p">(</span><span class="nf">require</span> <span class="o">&#39;</span><span class="p">[</span><span class="nv">cljminecraft.bukkit</span> <span class="ss">:as</span> <span class="nv">bk</span><span class="p">])</span>
</span><span class='line'><span class="p">(</span><span class="nf">require</span> <span class="o">&#39;</span><span class="p">[</span><span class="nv">cljminecraft.items</span> <span class="ss">:as</span> <span class="nv">i</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">player</span> <span class="p">(</span><span class="nb">first </span><span class="p">(</span><span class="nf">.getOnlinePlayers</span> <span class="p">(</span><span class="nf">bk/server</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">block</span>
</span><span class='line'>  <span class="s">&quot;place a block relative to current players position</span>
</span><span class='line'><span class="s">  Example:</span>
</span><span class='line'><span class="s">    (block 2 10 2 :grass)</span>
</span><span class='line'><span class="s">  &quot;</span>
</span><span class='line'>  <span class="p">[</span><span class="nv">x</span> <span class="nv">y</span> <span class="nv">z</span> <span class="nv">material</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">l</span> <span class="p">(</span><span class="nf">.getLocation</span> <span class="nv">player</span><span class="p">))</span>
</span><span class='line'>        <span class="nv">m</span> <span class="p">(</span><span class="nf">i/get-material</span> <span class="nv">material</span><span class="p">)]</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">doto </span><span class="nv">l</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">.setX</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">x</span> <span class="p">(</span><span class="nf">.getX</span> <span class="nv">l</span><span class="p">)))</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">.setY</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">y</span> <span class="p">(</span><span class="nf">.getY</span> <span class="nv">l</span><span class="p">)))</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">.setZ</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">z</span> <span class="p">(</span><span class="nf">.getZ</span> <span class="nv">l</span><span class="p">))))</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">bk/ui-sync</span>
</span><span class='line'>     <span class="o">@</span><span class="nv">cljminecraft.core/clj-plugin</span>
</span><span class='line'>     <span class="p">(</span><span class="k">fn </span><span class="p">[]</span>
</span><span class='line'>       <span class="p">(</span><span class="nb">doto </span><span class="p">(</span><span class="nf">.getBlock</span> <span class="nv">l</span><span class="p">)</span>
</span><span class='line'>         <span class="p">(</span><span class="nf">.setData</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>         <span class="p">(</span><span class="nf">.setType</span> <span class="p">(</span><span class="nf">.getItemType</span> <span class="nv">m</span><span class="p">))</span>
</span><span class='line'>         <span class="p">(</span><span class="nf">.setData</span> <span class="p">(</span><span class="nf">.getData</span> <span class="nv">m</span><span class="p">)))))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>For further documentation of whats possible, the Bukkit Java docs:
<a href="https://hub.spigotmc.org/javadocs/bukkit/">https://hub.spigotmc.org/javadocs/bukkit/</a></p>

<p>clj-minecaft has lots of helpers + examples: <a href="https://github.com/CmdrDats/clj-minecraft/tree/master/src/cljminecraft">https://github.com/CmdrDats/clj-minecraft/tree/master/src/cljminecraft</a></p>

<h2>Fun</h2>

<p>Create, play and share all the crazy things you can come up with using Clojure and Minecraft.</p>

<p><img src="http://josephwilk.github.io/images/pig_algo_rave.png" width="450" alt="The Pig Algo Rave"/></p>

<p>For more live programming music and sound checkout my performances as Repl Electric: <a href="http://www.repl-electric.com">http://www.repl-electric.com</a></p>

<h2>Credits</h2>

<p>Built on the back of lots of great open source projects.
Thanks to the Craftbukkit/Spigot contributors, <a href="https://twitter.com/cmdrdats">@CmdrDats</a> for clj-minecraft and <a href="https://twitter.com/samaaron">@samaaron</a> for Overtone and inspiring this crazy journey with the musical <a href="http://sonic-pi.net/">Sonic Pi</a> (which supports combining music and Minecraft on the RaspberryPi).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Live Coding - Repl Electric]]></title>
    <link href="http://josephwilk.github.io/art/live-coding-repl-electric.html"/>
    <updated>2014-06-13T15:58:12+01:00</updated>
    <id>http://josephwilk.github.io/art/live-coding-repl-electric</id>
    <content type="html"><![CDATA[<p>Live coding is the act of turning a programming session into a performance. This can constitute improvisation, music, visuals, poetry, hardware, robots, dance, textiles and people. Pretty much anything with an input and output can be controlled live by programming.</p>

<p>This is not just a performance by programmers for programmers. While this is often where it starts as a live coder, the type of audience and the accessibility of the performance lies in the performers imagination. Abstraction can get us pretty much anywhere.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">the-stars</span> <span class="p">(</span><span class="nf">dark-matter</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Repl Electric</h2>

<p><img src="https://camo.githubusercontent.com/d1711cc92a1b79af187344f461be35e2ced44e3f/687474703a2f2f7333302e706f7374696d672e6f72672f7633336377783668642f53637265656e5f53686f745f323031345f30345f32385f61745f32305f31345f33352e706e67"/></p>

<p><a href="http://www.repl-electric.com">Repl Electric</a> is a project I started in order to discover more about music composition and Artificial intelligent based aids to creativity. Which in turn through the inspiration of people like <a href="http://meta-ex.com/">Meta-ex</a> lead me to live programming music.</p>

<p>Here is a performance live coding music and graphics, inspired by a performance in London:</p>

<h3>The Stars</h3>

<iframe src="http://josephwilk.github.io//player.vimeo.com/video/95988263" width="500" height="313" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>


<h3>Open Live Coding</h3>

<p>All the tools and code used to create this performance are open for all to see on Github: <a href="https://github.com/repl-electric">https://github.com/repl-electric</a></p>

<p>Three programming languages were used to create this piece:</p>

<ul>
<li>Clojure (Sound)</li>
<li>GLSL (Visuals)</li>
<li>Emacs Lisp (Animations &amp; Navigation)</li>
</ul>


<h3>Tools</h3>

<p>Here are the tools used and a little detail around how they where used in performing &ldquo;The Stars&rdquo;:</p>

<h4>Clojure: <a href="http://clojure.org">http://clojure.org</a></h4>

<p>Clojure is a LISP language based on the JVM.</p>

<p>Clojure focuses on interactive REPL (Read, Evaluate, Print &amp; Loop) driven development. Which makes it a good choice for interactively coding music. It also turns out functional programming is a good fit for operating over music as data.</p>

<h4>Emacs Live: <a href="https://github.com/overtone/emacs-live">https://github.com/overtone/emacs-live</a></h4>

<p>Emacs live is a Emacs release with packages and defaults that are Live Coding centric. Something I use for both for my work and for my live coding.</p>

<p>To execute our code, we launch a repl instance in our project (NEVER launch inside emacs, since then if emacs crashes the repl and music dies) and connect to it from emacs using <code>cider</code> <a href="https://github.com/clojure-emacs/cider.">https://github.com/clojure-emacs/cider.</a></p>

<p>A simple trick to combine Emacs code and visualizations is to launch an OpenGL window in full screen (see Shadertone) and then put a full screen transparent terminal window running emacs over it.</p>

<p><img src="http://josephwilk.github.io/images/terminal.png" alt="" /></p>

<p>The tumbling text effect seen at the end of the performance is an emacs animation using <code>Zone Mode</code> which supports writing your own text destructors: <a href="http://www.emacswiki.org/emacs/ZoneMode">http://www.emacswiki.org/emacs/ZoneMode</a></p>

<h4>Overtone: <a href="https://github.com/overtone/overtone">https://github.com/overtone/overtone</a></h4>

<p>Overtone is a Clojure based client to <a href="http://supercollider.sourceforge.net">SuperCollider</a>. Supercollider is an environment for real time audio synthesis and algorithmic composition.</p>

<p>Overtone provides us with:</p>

<ul>
<li>Timing (beat generation &ndash; <a href="https://github.com/repl-electric/cassiopeia/blob/master/src/cassiopeia/engine/timing.clj">example timing code</a>).</li>
<li>Building Synths (engineer sound).</li>
<li>Running samples (both your own and from <a href="https://www.freesound.org/">Freesound</a>).</li>
<li>Live Synth control (changing notes, durations, reverb, etc).</li>
<li>Hardware interaction (through midi or OSC).</li>
</ul>


<p>An example of a synth used in The Stars:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">use</span> <span class="ss">&#39;overtone.live</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nf">defsynth</span> <span class="nv">dark-ambience</span> <span class="p">[</span><span class="nv">out-bus</span> <span class="mi">0</span> <span class="nv">amp</span> <span class="mi">1</span> <span class="nv">mul</span> <span class="mf">0.2</span> <span class="nv">room-size</span> <span class="mi">70</span> <span class="nv">rev-time</span> <span class="mi">99</span> <span class="nv">freq</span> <span class="mi">60</span> <span class="nv">ring-mul</span> <span class="mi">55</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">pink</span> <span class="p">(</span><span class="nf">hpf</span><span class="ss">:ar</span> <span class="p">(</span><span class="nb">* </span><span class="p">(</span><span class="nb">* </span><span class="mf">0.005</span> <span class="p">(</span><span class="nf">pink-noise</span><span class="p">))</span> <span class="p">(</span><span class="nf">line</span><span class="ss">:kr</span> <span class="mi">0</span> <span class="mi">1</span> <span class="mi">9</span><span class="p">))</span> <span class="mi">5</span><span class="p">)</span>
</span><span class='line'>        <span class="nv">src1</span> <span class="p">(</span><span class="nf">ringz</span> <span class="p">(</span><span class="nb">* </span><span class="nv">pink</span> <span class="p">(</span><span class="nf">lf-noise1</span><span class="ss">:kr</span> <span class="mf">0.15</span><span class="p">))</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">freq</span> <span class="p">(</span><span class="nb">* </span><span class="nv">ring-mul</span> <span class="mi">0</span><span class="p">))</span> <span class="nv">mul</span><span class="p">)</span>
</span><span class='line'>        <span class="nv">src2</span> <span class="p">(</span><span class="nf">ringz</span> <span class="p">(</span><span class="nb">* </span><span class="nv">pink</span> <span class="p">(</span><span class="nf">lf-noise1</span><span class="ss">:kr</span> <span class="mf">0.15</span><span class="p">))</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">freq</span> <span class="p">(</span><span class="nb">* </span><span class="nv">ring-mul</span> <span class="mi">1</span><span class="p">))</span> <span class="nv">mul</span><span class="p">)</span>
</span><span class='line'>        <span class="nv">src3</span> <span class="p">(</span><span class="nf">ringz</span> <span class="p">(</span><span class="nb">* </span><span class="nv">pink</span> <span class="p">(</span><span class="nf">lf-noise1</span><span class="ss">:kr</span> <span class="mf">0.15</span><span class="p">))</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">freq</span> <span class="p">(</span><span class="nb">* </span><span class="nv">ring-mul</span> <span class="mi">2</span><span class="p">))</span> <span class="nv">mul</span><span class="p">)</span>
</span><span class='line'>        <span class="nv">src</span> <span class="p">(</span><span class="nf">tanh</span> <span class="p">(</span><span class="nf">g-verb</span> <span class="p">(</span><span class="nf">sum</span> <span class="p">[</span><span class="nv">src1</span> <span class="nv">src2</span> <span class="nv">src3</span><span class="p">])</span> <span class="nv">room-size</span> <span class="nv">rev-time</span><span class="p">))]</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">out</span> <span class="nv">out-bus</span> <span class="p">(</span><span class="nb">* </span><span class="nv">amp</span> <span class="nv">src</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">the-stars</span> <span class="p">(</span><span class="nf">dark-ambience</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<h6>Timing</h6>

<p>Timing is a complicated issue but so important its worth touching on. You have a choice with Overtone to use Java for timing or Supercollider. I use Supercollider since I have found it to be much more reliable.
Everything you need is here (<a href="https://github.com/repl-electric/cassiopeia/blob/master/src/cassiopeia/engine/timing.clj">copy and paste</a>), thanks to the hard work of <a href="https://github.com/samaaron">Sam Aaron</a>.</p>

<p>The key concept to take away is there are two types of timing, a beat counter which is forever incrementing and a beat trigger which flips back and forth between 1/0.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">require</span> <span class="o">&#39;</span><span class="p">[</span><span class="nv">cassiopeia.engine.timing</span> <span class="ss">:as</span> <span class="nv">time</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;;The beat trigger</span>
</span><span class='line'><span class="p">(</span><span class="ss">:beat</span> <span class="nv">time/main-beat</span><span class="p">)</span> <span class="c1">;=&gt; 0,1,0,1,0,1,0</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;;The beat counter</span>
</span><span class='line'><span class="p">(</span><span class="ss">:count</span> <span class="nv">time/main-beat</span><span class="p">)</span> <span class="c1">;=&gt; 0,1,2,3,4,5,6,7,8,9</span>
</span></code></pre></td></tr></table></div></figure>


<p>The counter is useful for indexing buffers, the trigger is useful in controlling the gate of an envelope (which turns a sound on or off).</p>

<p>In Clojure we can still get access to the beat, in our timing code we send a message using <code>send-trig</code> on every beat. We can hook a Clojure function to callback on this beat:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">on-trigger</span> <span class="p">(</span><span class="ss">:trig-id</span> <span class="nv">time/main-beat</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">beat-no</span><span class="p">]</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">when </span><span class="p">(</span><span class="nb">= </span><span class="mf">0.0</span> <span class="p">(</span><span class="nf">mod</span> <span class="nv">beat-no</span> <span class="mi">32</span><span class="p">))</span>
</span><span class='line'>      <span class="c1">;;play a sample</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">boom-s</span><span class="p">)))</span>
</span><span class='line'>  <span class="ss">::on-beat-trigger</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>I use this extensively to time graphic transitions with the music.</p>

<h6>Buffers</h6>

<p>Most of my live coding performance was writing to buffers which are hooked into synths. Buffers are just fixed size arrays but they are stored in Supercollider rather than in Clojure. Here is an example from The Stars where the midi notes are read from a buffer at a rate based on my beat timing signal (a 16th of the main beat here).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">use</span> <span class="ss">&#39;overtone.live</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nf">use</span> <span class="ss">&#39;cassiopeia.engine.core</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nf">require</span> <span class="o">&#39;</span><span class="p">[</span><span class="nv">cassiopeia.engine.timing</span> <span class="ss">:as</span> <span class="nv">time</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">defsynth</span> <span class="nv">growl</span> <span class="p">[</span><span class="nv">out-bus</span> <span class="mi">0</span> <span class="nv">note-buf</span> <span class="mi">0</span> <span class="nv">beat-bus</span> <span class="mi">0</span> <span class="nv">beat-trg-bus</span> <span class="mi">0</span> <span class="nv">amp</span> <span class="mi">1</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">cnt</span> <span class="p">(</span><span class="nf">in</span><span class="ss">:kr</span> <span class="nv">beat-bus</span><span class="p">)</span>
</span><span class='line'>        <span class="nv">trg</span> <span class="p">(</span><span class="nf">in</span><span class="ss">:kr</span> <span class="nv">beat-trg-bus</span><span class="p">)</span>
</span><span class='line'>        <span class="nv">note</span> <span class="p">(</span><span class="nf">buf-rd</span><span class="ss">:kr</span> <span class="mi">1</span> <span class="nv">note-buf</span> <span class="nv">cnt</span><span class="p">)</span>
</span><span class='line'>        <span class="nv">freq</span> <span class="p">(</span><span class="nf">midicps</span> <span class="nv">note</span><span class="p">)</span>
</span><span class='line'>        <span class="nv">vol</span> <span class="p">(</span><span class="nb">&gt; </span><span class="nv">note</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="nv">e</span> <span class="p">(</span><span class="nf">env-gen</span> <span class="p">(</span><span class="nf">perc</span> <span class="ss">:attack</span> <span class="mi">10</span> <span class="ss">:sustain</span> <span class="mi">1</span> <span class="ss">:release</span> <span class="mi">1</span><span class="p">)</span> <span class="ss">:gate</span> <span class="nv">trg</span><span class="p">)</span>
</span><span class='line'>        <span class="nv">src</span> <span class="p">(</span><span class="nf">lpf</span> <span class="p">(</span><span class="nf">mix</span> <span class="p">[(</span><span class="nf">saw</span> <span class="p">(</span><span class="nb">* </span><span class="mf">0.25</span> <span class="nv">freq</span><span class="p">))</span>
</span><span class='line'>                       <span class="p">(</span><span class="nf">sin-osc</span> <span class="p">(</span><span class="nb">* </span><span class="mf">1.01</span> <span class="nv">freq</span><span class="p">))]))</span>
</span><span class='line'>        <span class="nv">src</span> <span class="p">(</span><span class="nf">pitch-shift</span> <span class="nv">src</span> <span class="mf">0.4</span> <span class="mi">1</span> <span class="mi">0</span> <span class="mf">0.01</span><span class="p">)</span>
</span><span class='line'>        <span class="nv">src</span> <span class="p">(</span><span class="nf">pan2</span><span class="ss">:ar</span> <span class="p">(</span><span class="nb">* </span><span class="nv">vol</span> <span class="nv">amp</span> <span class="nv">e</span> <span class="nv">src</span><span class="p">))]</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">out</span> <span class="nv">out-bus</span> <span class="nv">src</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defonce </span><span class="nv">nebular</span> <span class="p">(</span><span class="nf">buffer</span> <span class="mi">96</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">nebula</span> <span class="p">(</span><span class="nf">growl</span> <span class="ss">:note-buf</span> <span class="nv">nebula-note-buf</span> <span class="ss">:beat-trg-bus</span> <span class="p">(</span><span class="ss">:beat</span> <span class="nv">time/beat-16th</span><span class="p">)</span> <span class="ss">:beat-bus</span> <span class="p">(</span><span class="ss">:count</span> <span class="nv">time/beat-16th</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">pattern!</span> <span class="nv">nebula-note-buf</span> <span class="p">(</span><span class="nf">degrees</span> <span class="p">[</span><span class="mi">1</span> <span class="mi">3</span> <span class="mi">7</span><span class="p">]</span> <span class="ss">:major</span> <span class="ss">:A2</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<h4>GLSL + Shadertone:  <a href="https://github.com/overtone/shadertone">https://github.com/overtone/shadertone</a></h4>

<p>Shaders generate imagery directly on your Graphics Processing Unit rather than going through your CPU. Through a language called GLSL (which is C like) we can express very simple functions which get called on every single pixel generating complex visuals. Here is a simple extract from The Stars that generates all the background small dots:</p>

<p><img src="http://josephwilk.github.io/images/glsl-dots.png" alt="" /></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='glsl'><span class='line'><span class="k">void</span> <span class="n">main</span><span class="p">(</span><span class="k">void</span><span class="p">){</span>
</span><span class='line'>  <span class="k">vec2</span> <span class="n">current_pixel_position</span> <span class="o">=</span> <span class="n">mod</span><span class="p">(</span><span class="n">gl_FragCoord</span><span class="p">.</span><span class="n">xy</span><span class="p">,</span> <span class="k">vec2</span><span class="p">(</span><span class="mf">5.0</span><span class="p">))</span> <span class="o">-</span> <span class="k">vec2</span><span class="p">(</span><span class="mf">0.0</span><span class="p">);</span>
</span><span class='line'>  <span class="k">float</span> <span class="n">distance_squared</span> <span class="o">=</span> <span class="n">dot</span><span class="p">(</span><span class="n">current_pixel_position</span><span class="p">,</span> <span class="n">current_pixel_position</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">vec4</span> <span class="n">black</span> <span class="o">=</span> <span class="k">vec4</span><span class="p">(</span><span class="mf">.0</span><span class="p">,</span> <span class="mf">.0</span><span class="p">,</span> <span class="mf">.0</span><span class="p">,</span> <span class="mf">0.0</span><span class="p">);</span>
</span><span class='line'>  <span class="k">vec4</span> <span class="n">white</span> <span class="o">=</span> <span class="k">vec4</span><span class="p">(</span><span class="mf">1.0</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">,</span> <span class="mf">1.0</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="c1">//Test the current pixel position and if it should be a circle shade it.</span>
</span><span class='line'>  <span class="k">vec4</span> <span class="n">circles</span> <span class="o">=</span> <span class="p">(</span><span class="n">distance_squared</span> <span class="o">&lt;</span> <span class="mf">0.6</span><span class="p">)</span> <span class="o">?</span> <span class="n">white</span> <span class="o">:</span> <span class="n">black</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">gl_FragColor</span> <span class="o">=</span> <span class="n">circles</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>For more examples of whats possible with Shaders checkout <a href="https://www.shadertoy.com">Shader Toy</a></p>

<p>Shadertone is the Clojure library that provides a convenient way of running shaders from Clojure and for feeding in data about our synths. It provides access in your Shader to:</p>

<ul>
<li>Overtone&rsquo;s Volume (<code>iOvertoneVolume</code>)</li>
<li>The frequency spectrum &amp; audio waveform data (Passed as a 2D texture <code>:textures [:overtone-audio]</code>)</li>
</ul>


<p>To synchronize the graphics with the music I created a special Overtone synth which does not generate any sound, it instead feeds information in realtime to my shader.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">use</span> <span class="ss">&#39;overtone.live</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nf">require</span> <span class="o">&#39;</span><span class="p">[</span><span class="nv">shadertone.core</span> <span class="ss">:as</span> <span class="nv">t</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;;A synth that exposes through taps all the lovely timing information.</span>
</span><span class='line'><span class="p">(</span><span class="nf">defsynth</span> <span class="nv">buffer-&gt;tap</span> <span class="p">[</span><span class="nv">beat-buf</span> <span class="mi">0</span> <span class="nv">beat-bus</span> <span class="mi">0</span> <span class="nv">beat-size</span> <span class="mi">16</span> <span class="nv">measure</span> <span class="mi">6</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">cnt</span> <span class="p">(</span><span class="nf">in</span><span class="ss">:kr</span> <span class="nv">beat-bus</span><span class="p">)</span>
</span><span class='line'>        <span class="nv">beat</span> <span class="p">(</span><span class="nf">buf-rd</span><span class="ss">:kr</span> <span class="mi">1</span> <span class="nv">beat-buf</span> <span class="nv">cnt</span><span class="p">)</span>
</span><span class='line'>        <span class="nv">_</span>  <span class="p">(</span><span class="nf">tap</span> <span class="s">&quot;beat&quot;</span>          <span class="mi">60</span> <span class="p">(</span><span class="nf">a2k</span> <span class="nv">beat</span><span class="p">))</span>
</span><span class='line'>        <span class="nv">_</span>  <span class="p">(</span><span class="nf">tap</span> <span class="s">&quot;beat-count&quot;</span>    <span class="mi">60</span> <span class="p">(</span><span class="nf">a2k</span> <span class="p">(</span><span class="nf">mod</span> <span class="nv">cnt</span> <span class="nv">beat-size</span><span class="p">)))</span>
</span><span class='line'>        <span class="nv">_</span>  <span class="p">(</span><span class="nf">tap</span> <span class="s">&quot;measure-count&quot;</span> <span class="mi">60</span> <span class="p">(</span><span class="nf">a2k</span> <span class="p">(</span><span class="nb">/ </span><span class="p">(</span><span class="nf">mod</span> <span class="nv">cnt</span> <span class="p">(</span><span class="nb">* </span><span class="nv">measure</span> <span class="nv">beat-size</span><span class="p">))</span> <span class="nv">measure</span><span class="p">)))])</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">out</span> <span class="mi">0</span> <span class="mi">0</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;;; Used to store our drum beat, 1 for a hit 0 and for a miss</span>
</span><span class='line'><span class="p">(</span><span class="kd">defonce </span><span class="nv">drum-sequence-buffer</span> <span class="p">(</span><span class="nf">buffer</span> <span class="mi">256</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">beats</span> <span class="p">(</span><span class="nf">buffer-&gt;tap</span> <span class="nv">drum-sequence-buffer</span> <span class="p">(</span><span class="ss">:count</span> <span class="nv">timing/main-beat</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;;Open a OpenGL window running our shader</span>
</span><span class='line'><span class="p">(</span><span class="nf">t/start-fullscreen</span> <span class="s">&quot;resources/shaders/electric.glsl&quot;</span>
</span><span class='line'>                    <span class="ss">:user-data</span> <span class="p">{</span>
</span><span class='line'>                    <span class="s">&quot;iBeat&quot;</span>         <span class="p">(</span><span class="nf">atom</span> <span class="p">{</span><span class="ss">:synth</span> <span class="nv">beats</span> <span class="ss">:tap</span> <span class="s">&quot;beat&quot;</span><span class="p">})</span>
</span><span class='line'>                    <span class="s">&quot;iBeatCount&quot;</span>    <span class="p">(</span><span class="nf">atom</span> <span class="p">{</span><span class="ss">:synth</span> <span class="nv">beats</span> <span class="ss">:tap</span> <span class="s">&quot;beat-count&quot;</span><span class="p">})</span>
</span><span class='line'>                    <span class="s">&quot;iMeasureCount&quot;</span> <span class="p">(</span><span class="nf">atom</span> <span class="p">{</span><span class="ss">:synth</span> <span class="nv">beats</span> <span class="ss">:tap</span> <span class="s">&quot;measure-count&quot;</span><span class="p">})})</span>
</span></code></pre></td></tr></table></div></figure>


<p>Inside our shader code:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='glsl'><span class='line'><span class="k">uniform</span> <span class="k">float</span> <span class="n">iBeat</span><span class="p">;</span>
</span><span class='line'><span class="k">uniform</span> <span class="k">float</span> <span class="n">iBeatCount</span><span class="p">;</span>
</span><span class='line'><span class="k">uniform</span> <span class="k">float</span> <span class="n">iMeasureCount</span><span class="p">;</span>
</span><span class='line'><span class="p">...</span>
</span></code></pre></td></tr></table></div></figure>


<p>The other main way of controlling a shader from Clojure is using <code>atoms</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">require</span> <span class="o">&#39;</span><span class="p">[</span><span class="nv">shadertone.core</span> <span class="ss">:as</span> <span class="nv">t</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defonce </span><span class="nv">cellular-growth</span> <span class="p">(</span><span class="nf">atom</span> <span class="mf">0.0</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">t/start-fullscreen</span> <span class="s">&quot;resources/shaders/electric.glsl&quot;</span> <span class="ss">:user-data</span> <span class="p">{</span><span class="s">&quot;iCellularGrowth&quot;</span> <span class="nv">cellular-growth</span><span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">swap!</span> <span class="nv">cellular-growth</span> <span class="nb">+ </span><span class="mf">0.01</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Hardware: Monome: <a href="http://monome.org">http://monome.org</a></h4>

<p>Something you don&rsquo;t see in the video is that I&rsquo;m using a 8x16 <a href="http://monome.org">Monome</a>. For this performance its primary function was a visual aid to show the beat/measure information.</p>

<p><img src="http://josephwilk.github.io/images/monome.jpg" alt="Monome" /></p>

<p>The hardware is driven by Clojure communicating with the Monome through a serial port: <a href="https://github.com/josephwilk/monome-serial/tree/protocols">https://github.com/josephwilk/monome-serial/tree/protocols</a></p>

<h1>Live Coding</h1>

<p>Live coding music and graphics combines skills in sound engineering, 3d graphics, geometry, physics, musical theory, composition, improvisation &amp; hardware to name a few.</p>

<p>It is difficult, and requires a lot of work and practice.</p>

<p>But of all the code I&rsquo;ve written over the years this is one of the things I&rsquo;m most proud of. And i&rsquo;m only at the beginning of discovering what&rsquo;s possible.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creative Machines]]></title>
    <link href="http://josephwilk.github.io/clojure/creative_machines.html"/>
    <updated>2014-02-23T13:23:00+00:00</updated>
    <id>http://josephwilk.github.io/clojure/creative_machines</id>
    <content type="html"><![CDATA[<p>When Alan Turing asked if a machine can be intelligent one aspect of this question focused on &ldquo;could machines be creative&rdquo;?</p>

<p>Ada Lovelace seemed convinced that originality was not a feat a computer was capable of:</p>

<blockquote><p>it can do whatever we know how to order it to perform,
it has no pretensions whatever to originate anything</p></blockquote>

<p>Before we outrightly dismiss the idea of creative machines do we even understand what creativity is?</p>

<p>Join me on a journey examining these questions while also meeting a new generation of artists born through code. Looking into their hearts and brains examining different algorithms/techniques and there effectiveness at exhibiting creativity.</p>

<p><strong>Decide for yourself, can machines be creative?</strong></p>

<p>My Strangeloop talk: Creative Machines &ndash; <a href="http://www.infoq.com/presentations/ai-machine-creativity">http://www.infoq.com/presentations/ai-machine-creativity</a></p>

<p>Slides: <script async class="speakerdeck-embed" data-id="9b2acfa020760131db422ebaf23009b5" data-ratio="1.33333333333333" src="http://josephwilk.github.io//speakerdeck.com/assets/embed.js"></script></p>

<p>Full source code: <a href="https://github.com/josephwilk/musical-creativity">https://github.com/josephwilk/musical-creativity</a></p>

<h3>Continuing the Journey</h3>

<p>In order to continue my research into creativity and music I&rsquo;ve started the project <a href="http://www.repl-electric.com">Repl Electric</a>.
A space for humans and machines to learn and create music together.</p>

<h2>Further Reading</h2>

<ul>
<li>The Creative Mind: Myths and Mechanisms <br/> <a href="http://www.amazon.com/The-Creative-Mind-Myths-Mechanisms/dp/0415314534">http://www.amazon.com/The-Creative-Mind-Myths-Mechanisms/dp/0415314534</a></li>
<li>Explaining Creativity: The Science of Human Innovation <br/> <a href="http://www.amazon.com/gp/product/0199737576">http://www.amazon.com/gp/product/0199737576</a></li>
<li>Artificial Intelligence and Literary Creativity: Inside the Mind of Brutus, A Storytelling Machine <br/> <a href="http://www.amazon.com/Artificial-Intelligence-Literary-Creativity-Storytelling/dp/0805819878">http://www.amazon.com/Artificial-Intelligence-Literary-Creativity-Storytelling/dp/0805819878</a>)</li>
<li>Computer Models of Musical Creativity <br/> <a href="http://www.amazon.com/Computer-Models-Musical-Creativity-David/dp/0262033380">http://www.amazon.com/Computer-Models-Musical-Creativity-David/dp/0262033380</a></li>
<li>Virtual Music: Computer Synthesis of Musical Style <br/> <a href="http://www.amazon.com/Virtual-Music-Computer-Synthesis-Musical/dp/0262532611/">http://www.amazon.com/Virtual-Music-Computer-Synthesis-Musical/dp/0262532611/</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sounds of the human brain]]></title>
    <link href="http://josephwilk.github.io/clojure/sounds-of-the-human-brain.html"/>
    <updated>2013-12-02T13:23:00+00:00</updated>
    <id>http://josephwilk.github.io/clojure/sounds-of-the-human-brain</id>
    <content type="html"><![CDATA[<p>What does your brain sound like? Does it sound like &ldquo;Rise of the Valkyrie&rdquo; or more like &ldquo;Hit me baby one more time&rdquo;?</p>

<h2>Step 1: Acquire a human brain (alive)</h2>

<p><img src="http://josephwilk.github.io/images/brain.png" width="200px"></p>

<p>We are interested in capturing the brain waves. Specifically the:</p>

<ul>
<li>Delta waves: Deepest stages of sleep.</li>
<li>Beta waves:  Normal waking consciousness.</li>
<li>Alpha waves: Relaxation and meditation (creativity).</li>
<li>Theta waves: REM sleep (dreams).</li>
<li>Gamma waves: Hyper-alertness, perception, and integration of sensory input.</li>
</ul>


<h2>Step 2: EEG machine</h2>

<p>I am using a EEG machine brought from <a href="http://www.neurosky.com">Neurosky</a> which is rated as Research grade (whatever that means).
This measures voltage fluctuations resulting from ionic current flows within the neurons of the brain. While EEG machines are not the most accurate they are now reasonably cheap.</p>

<h2>Step 3: EEG &ndash;> Overtone</h2>

<p>In order to generate music I want to import the EEG brainwave data into <a href="http://overtone.github.io">Overtone</a>.</p>

<p>We interact with the EEG machine over a serial port. The most mature library for this interface is in Python so there is a little jiggery pokery to get the data into Overtone.</p>

<p><img src="http://josephwilk.github.io/images/brain-diagram.png"></p>

<h4>The Brainwave Poller</h4>

<p>We use <a href="https://github.com/akloster/python-mindwave">https://github.com/akloster/python-mindwave</a> to interface with the EEG machines data.</p>

<p>Writing all the data out to a <a href="http://www.gnu.org/software/libc/manual/html_node/FIFO-Special-Files.html">FIFO file</a> file as json.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="kn">import</span> <span class="nn">re</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">time</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">json</span>
</span><span class='line'><span class="kn">import</span> <span class="nn">unicodedata</span>
</span><span class='line'>
</span><span class='line'><span class="kn">import</span> <span class="nn">gevent</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">gevent</span> <span class="kn">import</span> <span class="n">monkey</span>
</span><span class='line'>
</span><span class='line'><span class="kn">from</span> <span class="nn">pymindwave</span> <span class="kn">import</span> <span class="n">headset</span>
</span><span class='line'><span class="kn">from</span> <span class="nn">pymindwave.pyeeg</span> <span class="kn">import</span> <span class="n">bin_power</span>
</span><span class='line'>
</span><span class='line'><span class="n">monkey</span><span class="o">.</span><span class="n">patch_all</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'><span class="c"># connect to the headset</span>
</span><span class='line'><span class="n">hs</span> <span class="o">=</span> <span class="bp">None</span>
</span><span class='line'><span class="n">hs</span> <span class="o">=</span> <span class="n">headset</span><span class="o">.</span><span class="n">Headset</span><span class="p">(</span><span class="s">&#39;/dev/tty.MindWave&#39;</span><span class="p">)</span>
</span><span class='line'><span class="n">hs</span><span class="o">.</span><span class="n">disconnect</span><span class="p">()</span>
</span><span class='line'><span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="k">print</span> <span class="s">&#39;connecting to headset...&#39;</span>
</span><span class='line'><span class="n">hs</span><span class="o">.</span><span class="n">connect</span><span class="p">()</span>
</span><span class='line'><span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
</span><span class='line'><span class="k">while</span> <span class="n">hs</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;state&#39;</span><span class="p">)</span> <span class="o">!=</span> <span class="s">&#39;connected&#39;</span><span class="p">:</span>
</span><span class='line'>    <span class="k">print</span> <span class="n">hs</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;state&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.5</span><span class="p">)</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">hs</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;state&#39;</span><span class="p">)</span> <span class="o">==</span> <span class="s">&#39;standby&#39;</span><span class="p">:</span>
</span><span class='line'>        <span class="n">hs</span><span class="o">.</span><span class="n">connect</span><span class="p">()</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&#39;retrying connecting to headset&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">def</span> <span class="nf">raw_to_spectrum</span><span class="p">(</span><span class="n">rawdata</span><span class="p">):</span>
</span><span class='line'>    <span class="n">flen</span> <span class="o">=</span> <span class="mi">50</span>
</span><span class='line'>    <span class="n">spectrum</span><span class="p">,</span> <span class="n">relative_spectrum</span> <span class="o">=</span> <span class="n">bin_power</span><span class="p">(</span><span class="n">rawdata</span><span class="p">,</span> <span class="nb">range</span><span class="p">(</span><span class="n">flen</span><span class="p">),</span> <span class="mi">512</span><span class="p">)</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">spectrum</span>
</span><span class='line'>
</span><span class='line'><span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
</span><span class='line'>    <span class="n">t</span> <span class="o">=</span> <span class="n">time</span><span class="o">.</span><span class="n">time</span><span class="p">()</span>
</span><span class='line'>    <span class="n">waves_vector</span> <span class="o">=</span> <span class="n">hs</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;waves_vector&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">meditation</span> <span class="o">=</span> <span class="n">hs</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;meditation&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">attention</span> <span class="o">=</span> <span class="n">hs</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;attention&#39;</span><span class="p">)</span>
</span><span class='line'>    <span class="n">spectrum</span> <span class="o">=</span> <span class="n">raw_to_spectrum</span><span class="p">(</span><span class="n">hs</span><span class="o">.</span><span class="n">get</span><span class="p">(</span><span class="s">&#39;rawdata&#39;</span><span class="p">))</span><span class="o">.</span><span class="n">tolist</span><span class="p">()</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="s">&quot;/tmp/brain-data&quot;</span><span class="p">,</span><span class="s">&quot;w&quot;</span><span class="p">)</span> <span class="k">as</span> <span class="n">fp</span><span class="p">:</span>
</span><span class='line'>        <span class="n">s</span> <span class="o">=</span> <span class="p">{</span><span class="s">&#39;timestamp&#39;</span><span class="p">:</span> <span class="n">t</span><span class="p">,</span>
</span><span class='line'>             <span class="s">&#39;meditation&#39;</span><span class="p">:</span> <span class="n">meditation</span><span class="p">,</span>
</span><span class='line'>             <span class="s">&#39;attention&#39;</span><span class="p">:</span> <span class="n">attention</span><span class="p">,</span>
</span><span class='line'>             <span class="s">&#39;raw_spectrum&#39;</span><span class="p">:</span> <span class="n">spectrum</span><span class="p">,</span>
</span><span class='line'>             <span class="s">&#39;delta_waves&#39;</span><span class="p">:</span> <span class="n">waves_vector</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span>
</span><span class='line'>             <span class="s">&#39;theta_waves&#39;</span><span class="p">:</span> <span class="n">waves_vector</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span>
</span><span class='line'>             <span class="s">&#39;alpha_waves&#39;</span><span class="p">:</span> <span class="p">(</span><span class="n">waves_vector</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">+</span><span class="n">waves_vector</span><span class="p">[</span><span class="mi">3</span><span class="p">])</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span>
</span><span class='line'>             <span class="s">&#39;low_alpha_waves&#39;</span><span class="p">:</span> <span class="n">waves_vector</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span>
</span><span class='line'>             <span class="s">&#39;high_alpha_waves&#39;</span><span class="p">:</span> <span class="n">waves_vector</span><span class="p">[</span><span class="mi">3</span><span class="p">],</span>
</span><span class='line'>             <span class="s">&#39;beta_waves&#39;</span><span class="p">:</span> <span class="p">(</span><span class="n">waves_vector</span><span class="p">[</span><span class="mi">4</span><span class="p">]</span><span class="o">+</span><span class="n">waves_vector</span><span class="p">[</span><span class="mi">5</span><span class="p">])</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span>
</span><span class='line'>             <span class="s">&#39;low_beta_waves&#39;</span><span class="p">:</span> <span class="n">waves_vector</span><span class="p">[</span><span class="mi">4</span><span class="p">],</span>
</span><span class='line'>             <span class="s">&#39;high_beta_waves&#39;</span><span class="p">:</span> <span class="n">waves_vector</span><span class="p">[</span><span class="mi">5</span><span class="p">],</span>
</span><span class='line'>             <span class="s">&#39;gamma_waves&#39;</span><span class="p">:</span> <span class="p">(</span><span class="n">waves_vector</span><span class="p">[</span><span class="mi">6</span><span class="p">]</span><span class="o">+</span><span class="n">waves_vector</span><span class="p">[</span><span class="mi">7</span><span class="p">])</span><span class="o">/</span><span class="mi">2</span><span class="p">,</span>
</span><span class='line'>             <span class="s">&#39;low_gamma_waves&#39;</span><span class="p">:</span> <span class="n">waves_vector</span><span class="p">[</span><span class="mi">6</span><span class="p">],</span>
</span><span class='line'>             <span class="s">&#39;mid_gamma_waves&#39;</span><span class="p">:</span> <span class="n">waves_vector</span><span class="p">[</span><span class="mi">7</span><span class="p">]}</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">s</span> <span class="o">=</span> <span class="n">json</span><span class="o">.</span><span class="n">dumps</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
</span><span class='line'>        <span class="n">fp</span><span class="o">.</span><span class="n">write</span><span class="p">(</span><span class="n">s</span><span class="p">)</span>
</span><span class='line'>    <span class="n">gevent</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mf">0.4</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Reading from the FIFO file is simple in Clojure.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">while</span> <span class="nv">true</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">with-open </span><span class="p">[</span><span class="nv">reader</span> <span class="p">(</span><span class="nf">clojure.java.io/reader</span> <span class="s">&quot;/tmp/brain-data&quot;</span><span class="p">)]</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">brainwave-&gt;music</span> <span class="p">(</span><span class="nf">json/decode</span> <span class="p">(</span><span class="nb">first </span><span class="p">(</span><span class="nb">line-seq </span><span class="nv">reader</span><span class="p">))</span> <span class="nv">true</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Step 3: Sonification</h2>

<p>Sonification is the process of taking data and turning it into sound. Here is an example of the data we are now receiving:</p>

<p>A single JSON brainwave packet:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'> <span class="p">{</span><span class="s">&quot;gamma_waves&quot;</span><span class="err">:</span> <span class="mi">95408</span>,
</span><span class='line'>  <span class="s">&quot;high_beta_waves&quot;</span><span class="err">:</span> <span class="mi">205681</span>,
</span><span class='line'>  <span class="s">&quot;beta_waves&quot;</span><span class="err">:</span> <span class="mi">293928</span>,
</span><span class='line'>  <span class="s">&quot;low_beta_waves&quot;</span><span class="err">:</span> <span class="mi">382176</span>,
</span><span class='line'>  <span class="s">&quot;mid_gamma_waves&quot;</span><span class="err">:</span> <span class="mi">84528</span>,
</span><span class='line'>  <span class="s">&quot;low_alpha_waves&quot;</span><span class="err">:</span> <span class="mi">172417</span>,
</span><span class='line'>  <span class="s">&quot;delta_waves&quot;</span><span class="err">:</span> <span class="mi">117933</span>,
</span><span class='line'>  <span class="s">&quot;low_gamma_waves&quot;</span><span class="err">:</span> <span class="mi">106288</span>,
</span><span class='line'>  <span class="s">&quot;alpha_waves&quot;</span><span class="err">:</span> <span class="mi">112605</span>,
</span><span class='line'>  <span class="s">&quot;theta_waves&quot;</span><span class="err">:</span> <span class="mi">635628</span>,
</span><span class='line'>  <span class="s">&quot;high_alpha_waves&quot;</span><span class="err">:</span> <span class="mi">52793</span>,
</span><span class='line'>  <span class="s">&quot;attention&quot;</span><span class="err">:</span> <span class="mi">0</span>,
</span><span class='line'>  <span class="s">&quot;meditation&quot;</span><span class="err">:</span> <span class="mi">0</span>,
</span><span class='line'>  <span class="s">&quot;timestamp&quot;</span><span class="err">:</span> <span class="mf">1.375811275696894</span><span class="nv">E9</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>We will focus on the beta-waves for simplicity. Beta-waves fall between 16.5‚Äì20Hz.</p>

<p><img alt="EEG beta waves" src="http://josephwilk.github.io/images/eeg_beta.png"></p>

<p>Beta waves related to:</p>

<ul>
<li>Alertness</li>
<li>Logic</li>
<li>Critical reasoning</li>
</ul>


<p> We need to map a signal within 16.5-20Hz into the musical pitches of a sampled piano (21-108 pitches).</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">require</span> <span class="o">&#39;</span><span class="p">[</span><span class="nv">clojure.math.numeric-tower</span> <span class="ss">:as</span> <span class="nv">math</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">linear-map</span> <span class="p">[</span><span class="nv">x0</span> <span class="nv">x1</span> <span class="nv">y0</span> <span class="nv">y1</span> <span class="nv">x</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">dydx</span> <span class="p">(</span><span class="nb">/ </span><span class="p">(</span><span class="nb">- </span><span class="nv">y1</span> <span class="nv">y0</span><span class="p">)</span> <span class="p">(</span><span class="nb">- </span><span class="nv">x1</span> <span class="nv">x0</span><span class="p">))</span>
</span><span class='line'>        <span class="nv">dx</span> <span class="p">(</span><span class="nb">- </span><span class="nv">x</span> <span class="nv">x0</span><span class="p">)]</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">+ </span><span class="nv">y0</span> <span class="p">(</span><span class="nb">* </span><span class="nv">dydx</span> <span class="nv">dx</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; Piano range: 0..87</span>
</span><span class='line'><span class="c1">;; Beta wave range: 16500..20000</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">beta-wave-&gt;pitch</span> <span class="p">[</span><span class="nv">signal</span><span class="p">]</span> <span class="p">(</span><span class="nb">-&gt; </span><span class="p">(</span><span class="nf">linear-map</span> <span class="mi">16500</span> <span class="mi">20000</span> <span class="mi">21</span> <span class="mi">108</span> <span class="nv">signal</span><span class="p">)</span> <span class="nb">float </span><span class="nv">math/round</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">beta-wave-&gt;pitch</span> <span class="mi">16500</span><span class="p">)</span> <span class="c1">;-&gt; 21</span>
</span><span class='line'><span class="p">(</span><span class="nf">beta-wave-&gt;pitch</span> <span class="mi">20000</span><span class="p">)</span> <span class="c1">;-&gt; 108</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we extract the beta-waves from the brainwave data and play them. We play them live as they arrive rather than worrying about scheduling notes:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">use</span> <span class="ss">&#39;overtone.live</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nf">use</span> <span class="ss">&#39;overtone.inst.sampled-piano</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nf">require</span> <span class="o">&#39;</span><span class="p">[</span><span class="nv">cheshire.core</span> <span class="ss">:as</span> <span class="nv">json</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">while</span> <span class="nv">true</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">with-open </span><span class="p">[</span><span class="nv">reader</span> <span class="p">(</span><span class="nf">clojure.java.io/reader</span> <span class="s">&quot;/tmp/brain-data&quot;</span><span class="p">)]</span>
</span><span class='line'>    <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">beta-wave</span> <span class="p">(</span><span class="nb">-&gt; </span><span class="p">(</span><span class="nb">first </span><span class="p">(</span><span class="nb">line-seq </span><span class="nv">reader</span><span class="p">))</span> <span class="p">(</span><span class="nf">json/decode</span> <span class="nv">true</span><span class="p">)</span> <span class="ss">:beta_waves</span><span class="p">)]</span>
</span><span class='line'>      <span class="p">(</span><span class="nb">println </span><span class="nv">beta-wave</span><span class="p">)</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">sampled-piano</span> <span class="ss">:note</span> <span class="p">(</span><span class="nf">beta-wave-&gt;pitch</span> <span class="nv">beta-wave</span><span class="p">)</span> <span class="ss">:sustain</span> <span class="mf">0.2</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<h1>Would you like to hear my brain?</h1>

<p>The results, please listen to my brain.</p>

<div><iframe width="100%" height="166" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=http%3A%2F%2Fapi.soundcloud.com%2Ftracks%2F108320470&amp;color=ff6600&amp;auto_play=false&amp;show_artwork=false"></iframe></div>


<p>Not really music is it? With beta-waves we get a serious of high to low transitions. While we can control at what pitch the transitions occur by performing activities that shape our brain waves the transitions don&rsquo;t provide the order or structure we need to recognize this as music.</p>

<h2>Brain controlled Dubstep</h2>

<p>The only logical path left is to try and control Dubstep with our brain. Rather than generative music we can use our brain waves to control the tempo and volume of existing synthesized music.</p>

<p>Here is a Dubstep synth taken from Overtone:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">use</span> <span class="ss">&#39;overtone.live</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">defsynth</span> <span class="nv">dubstep</span> <span class="p">[</span><span class="nv">bpm</span> <span class="mi">120</span> <span class="nv">wobble</span> <span class="mi">1</span> <span class="nv">note</span> <span class="mi">50</span> <span class="nv">snare-vol</span> <span class="mi">1</span> <span class="nv">kick-vol</span> <span class="mi">1</span> <span class="nv">volume</span> <span class="mi">1</span> <span class="nv">out-bus</span> <span class="mi">0</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">trig</span> <span class="p">(</span><span class="nf">impulse</span><span class="ss">:kr</span> <span class="p">(</span><span class="nb">/ </span><span class="nv">bpm</span> <span class="mi">120</span><span class="p">))</span>
</span><span class='line'>        <span class="nv">freq</span> <span class="p">(</span><span class="nf">midicps</span> <span class="nv">note</span><span class="p">)</span>
</span><span class='line'>        <span class="nv">swr</span> <span class="p">(</span><span class="nf">demand</span> <span class="nv">trig</span> <span class="mi">0</span> <span class="p">(</span><span class="nf">dseq</span> <span class="p">[</span><span class="nv">wobble</span><span class="p">]</span> <span class="nv">INF</span><span class="p">))</span>
</span><span class='line'>        <span class="nv">sweep</span> <span class="p">(</span><span class="nf">lin-exp</span> <span class="p">(</span><span class="nf">lf-tri</span> <span class="nv">swr</span><span class="p">)</span> <span class="mi">-1</span> <span class="mi">1</span> <span class="mi">40</span> <span class="mi">3000</span><span class="p">)</span>
</span><span class='line'>        <span class="nv">wob</span> <span class="p">(</span><span class="nb">apply + </span><span class="p">(</span><span class="nf">saw</span> <span class="p">(</span><span class="nb">* </span><span class="nv">freq</span> <span class="p">[</span><span class="mf">0.99</span> <span class="mf">1.01</span><span class="p">])))</span>
</span><span class='line'>        <span class="nv">wob</span> <span class="p">(</span><span class="nf">lpf</span> <span class="nv">wob</span> <span class="nv">sweep</span><span class="p">)</span>
</span><span class='line'>        <span class="nv">wob</span> <span class="p">(</span><span class="nb">* </span><span class="mf">0.8</span> <span class="p">(</span><span class="nf">normalizer</span> <span class="nv">wob</span><span class="p">))</span>
</span><span class='line'>        <span class="nv">wob</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">wob</span> <span class="p">(</span><span class="nf">bpf</span> <span class="nv">wob</span> <span class="mi">1500</span> <span class="mi">2</span><span class="p">))</span>
</span><span class='line'>        <span class="nv">wob</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">wob</span> <span class="p">(</span><span class="nb">* </span><span class="mf">0.2</span> <span class="p">(</span><span class="nf">g-verb</span> <span class="nv">wob</span> <span class="mi">9</span> <span class="mf">0.7</span> <span class="mf">0.7</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'>        <span class="nv">kickenv</span> <span class="p">(</span><span class="nf">decay</span> <span class="p">(</span><span class="nf">t2a</span> <span class="p">(</span><span class="nf">demand</span> <span class="p">(</span><span class="nf">impulse</span><span class="ss">:kr</span> <span class="p">(</span><span class="nb">/ </span><span class="nv">bpm</span> <span class="mi">30</span><span class="p">))</span> <span class="mi">0</span> <span class="p">(</span><span class="nf">dseq</span> <span class="p">[</span><span class="mi">1</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">1</span> <span class="mi">0</span> <span class="mi">1</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">1</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span> <span class="mi">0</span><span class="p">]</span> <span class="nv">INF</span><span class="p">)))</span> <span class="mf">0.7</span><span class="p">)</span>
</span><span class='line'>        <span class="nv">kick</span> <span class="p">(</span><span class="nb">* </span><span class="p">(</span><span class="nb">* </span><span class="nv">kickenv</span> <span class="mi">7</span><span class="p">)</span> <span class="p">(</span><span class="nf">sin-osc</span> <span class="p">(</span><span class="nb">+ </span><span class="mi">40</span> <span class="p">(</span><span class="nb">* </span><span class="nv">kickenv</span> <span class="nv">kickenv</span> <span class="nv">kickenv</span> <span class="mi">200</span><span class="p">))))</span>
</span><span class='line'>        <span class="nv">kick</span> <span class="p">(</span><span class="nf">clip2</span> <span class="nv">kick</span> <span class="mi">1</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'>        <span class="nv">snare</span> <span class="p">(</span><span class="nb">* </span><span class="mi">3</span> <span class="p">(</span><span class="nf">pink-noise</span><span class="p">)</span> <span class="p">(</span><span class="nb">apply + </span><span class="p">(</span><span class="nb">* </span><span class="p">(</span><span class="nf">decay</span> <span class="p">(</span><span class="nf">impulse</span> <span class="p">(</span><span class="nb">/ </span><span class="nv">bpm</span> <span class="mi">240</span><span class="p">)</span> <span class="mf">0.5</span><span class="p">)</span> <span class="p">[</span><span class="mf">0.4</span> <span class="mi">2</span><span class="p">])</span> <span class="p">[</span><span class="mi">1</span> <span class="mf">0.05</span><span class="p">])))</span>
</span><span class='line'>        <span class="nv">snare</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">snare</span> <span class="p">(</span><span class="nf">bpf</span> <span class="p">(</span><span class="nb">* </span><span class="mi">4</span> <span class="nv">snare</span><span class="p">)</span> <span class="mi">2000</span><span class="p">))</span>
</span><span class='line'>        <span class="nv">snare</span> <span class="p">(</span><span class="nf">clip2</span> <span class="nv">snare</span> <span class="mi">1</span><span class="p">)]</span>
</span><span class='line'>
</span><span class='line'>       <span class="p">(</span><span class="nf">out</span> <span class="nv">out-bus</span> <span class="p">(</span><span class="nb">* </span><span class="nv">volume</span> <span class="p">(</span><span class="nf">clip2</span> <span class="p">(</span><span class="nb">+ </span><span class="nv">wob</span> <span class="p">(</span><span class="nb">* </span><span class="nv">kick-vol</span> <span class="nv">kick</span><span class="p">)</span> <span class="p">(</span><span class="nb">* </span><span class="nv">snare-vol</span> <span class="nv">snare</span><span class="p">))</span> <span class="mi">1</span><span class="p">)))))</span>
</span></code></pre></td></tr></table></div></figure>


<p></p>

<p>Once the synth is running we can send it control signals which will vary any of the properties defined in the arguments to the dubstep function:</p>

<ul>
<li>bpm</li>
<li>wobble</li>
<li>note</li>
<li>snare-vol</li>
<li>kick-vol</li>
<li>volume</li>
</ul>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">d</span> <span class="p">(</span><span class="nf">dubstep</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">ctl</span> <span class="nv">d</span> <span class="ss">:snare-vol</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nf">ctl</span> <span class="nv">d</span> <span class="ss">:kick-vol</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nf">ctl</span> <span class="nv">d</span> <span class="ss">:wooble</span> <span class="mi">0</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nf">ctl</span> <span class="nv">d</span> <span class="ss">:bpm</span> <span class="mi">20</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nf">ctl</span> <span class="nv">d</span> <span class="ss">:v</span> <span class="mf">0.2</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>We again have to linearise the beta wave signal to the range of volume 0.0-1.1 and to the bpm 0-400.</p>

<p>Now all thats left to do is connect it to our brain.</p>

<p>Here&rsquo;s what brain controlled Dubstep sounds like:</p>

<div><iframe width="100%" height="166" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/119776808&amp;color=ff6600&amp;auto_play=false&amp;show_artwork=false"></iframe></div>


<p>And for comparison what playing Go does to your brain activity (I turned the Dubstep down while playing, concentrating with that noise is hard):</p>

<div><iframe width="100%" height="166" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=https%3A//api.soundcloud.com/tracks/122704897&amp;color=ff6600&amp;auto_play=false&amp;show_artwork=false"></iframe></div>


<h1>Discovery through sound</h1>

<p>Mapping brain waves into live music is a challenging task and while we can control music through an EEG machine that control is hard since we are using the brain to do many other things. What is interesting in the path of this experiment is not in fact the music generated but the use of sound to provide a way to hear the differences in datasets.</p>

<p>Hearing the difference between play Go or sleeping, between young people or old people.</p>

<p>Sound as a means of discovering patterns is a largely untapped source.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building Clojure services at scale]]></title>
    <link href="http://josephwilk.github.io/clojure/building-clojure-services-at-scale.html"/>
    <updated>2013-09-13T11:00:00+01:00</updated>
    <id>http://josephwilk.github.io/clojure/building-clojure-services-at-scale</id>
    <content type="html"><![CDATA[<p>At SoundCloud I&rsquo;ve been experimenting over the last year with how we build the services that power a number of heavily loaded areas across our site. All these services have been built in Clojure with bits of Java tacked on the sides. Here are some of my personal thoughts on how to build Clojure services:</p>

<h2>Netflix or Twitter</h2>

<p><img alt="choose your own adventure" src="http://josephwilk.github.io/images/adventure.jpg"></p>

<p>At some-point when you require a sufficient level of scaling you turn to the open source work of <a href="https://github.com/twitter">Twitter</a> with <a href="http://twitter.github.io/finagle">Finagle</a> or <a href="https://github.com/Netflix">Netflix</a> with <a href="https://github.com/Netflix/Hystrix">Hystrix</a>/<a href="https://github.com/Netflix/RxJava">RxJava</a>.
Netflix libs are written in Java while Twitters are written in Scala. Both are easy to use from any JVM based language but the Finagle route will bring in an extra dependency on Scala. I&rsquo;ve heard little from people using interop between Clojure &amp; Scala and that extra Scala dependency makes me nervous. Further I like the simplicity of Netflix&rsquo;s libs and they have been putting a lot of effort into pushing support for many JVM based languages.</p>

<p>Hence with Clojure, Netflix projects are my preference. (I should add we do use Finagle with Scala at SoundCloud as well).</p>

<h2>Failure, Monitoring &amp; Composition Complexity</h2>

<div style="display:inline-block;">
<img align="left" style="margin-right:5px;" src="http://josephwilk.github.io/images/failure.jpg" width="150px" height="150px">

In a service reliant on other services, databases, caches any other external dependencies its a guarantee at some-point some of those will fail. When working with critical services we want to gracefully provide a degraded service.
</div>




<p></p>




<div style="display:inline-block;">
<img align="left" style="margin-right:5px;" src="http://josephwilk.github.io/images/scary-eye.png" width="150px" height="150px">
While we can think about degrading gracefully in the case of failure, ultimately we want to fix wants broken as soon as possible. An eye into the runtime system allows us to monitor exactly whats going on and take appropriate action. 
</div>




<p></p>




<div style="display:inline-block;">
<img align="left" style="margin-right:5px;" src="http://josephwilk.github.io/images/complexity.png" width="150px" height="150px">

Your service needs to call other services. Dependent on those service results you might need to call other services which in turn might require calls to other services. Composing service calls is hard to get right without a tangle of complex code.
</div>




<p></p>


<h3>Fault Tolerance</h3>

<p>How should we build fault tolerance into our Clojure services?</p>

<h4>Single thread pool</h4>

<p>Consider you have this line within a service response:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">{</span><span class="ss">:body</span> <span class="err">@</span><span class="p">(</span><span class="nf">future</span> <span class="p">(</span><span class="nf">client/get</span> <span class="s">&quot;http://soundcloud.com/blah/wah&quot;</span><span class="p">))</span> <span class="ss">:status</span> <span class="mi">200</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now <code>http://soundcloud.com/blah/wah</code> goes down and those client requests start getting blocked on the request. In Clojure all <code>future</code> calls acquire a thread from the same thread pool. In our example the service is blocked up, is pilling new requests onto the blocked pool and we are in trouble.</p>

<p>My first solution to this problem was to introduce circuit breakers (<a href="https://github.com/josephwilk/circuit-breaker">https://github.com/josephwilk/circuit-breaker</a>).
I also stop using <code>@</code> to dereference futures and used <code>deref</code> <a href="http://clojuredocs.org/clojure_core/clojure.core/deref">http://clojuredocs.org/clojure_core/clojure.core/deref</a> which supports defaults and timeouts.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">defncircuitbreaker</span> <span class="ss">:blah-http</span> <span class="p">{</span><span class="ss">:timeout</span> <span class="mi">30</span> <span class="ss">:threshold</span> <span class="mi">2</span><span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">future-timeout</span> <span class="mi">1000</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">timeout-value</span> <span class="nv">nil</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">http-get</span> <span class="p">[</span><span class="nv">url</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">with-circuit-breaker</span> <span class="ss">:blah-http</span> <span class="p">{</span>
</span><span class='line'>    <span class="ss">:connected</span> <span class="p">(</span><span class="k">fn </span><span class="p">[]</span> <span class="p">(</span><span class="nf">client/get</span> <span class="s">&quot;http://soundcloud.com/blah/wah&quot;</span><span class="p">))</span>
</span><span class='line'>    <span class="ss">:tripped</span> <span class="p">(</span><span class="k">fn </span><span class="p">[]</span> <span class="nv">nil</span><span class="p">)}))</span>
</span><span class='line'>
</span><span class='line'><span class="p">{</span><span class="ss">:body</span> <span class="p">(</span><span class="nf">http-get</span> <span class="nv">http</span><span class="ss">://www.soundcloud.com/blah/wah</span><span class="p">)</span> <span class="ss">:status</span> <span class="mi">200</span><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Problem solved, now even though the thread pool may become blocked we back off the following requests and avoid pilling more work onto the blocked thread pool.</p>

<p>This worked pretty well, but then we decided we would to try and go even further in gracefully degrading.
Why don&rsquo;t we serve from a cache on failure, slightly stale data is better than none.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">http-get</span> <span class="p">[</span><span class="nv">url</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">with-circuit-breaker</span> <span class="ss">:blah-http</span> <span class="p">{</span>
</span><span class='line'>    <span class="ss">:connected</span> <span class="p">(</span><span class="k">fn </span><span class="p">[]</span> <span class="p">(</span><span class="nf">client/get</span> <span class="s">&quot;http://soundcloud.com/blah/wah&quot;</span><span class="p">))</span>
</span><span class='line'>    <span class="ss">:tripped</span> <span class="p">(</span><span class="k">fn </span><span class="p">[]</span> <span class="p">(</span><span class="nf">memcache/get</span> <span class="nv">client</span> <span class="nv">url</span><span class="p">))}))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now consider <code>(client/get "http://soundcloud.com/blah/wah")</code> starts failing, the thread pool gets blocked up, the circuit trigger flips and <code>(memcache/get client url)</code> is now fighting to get threads from the blocked thread pool.</p>

<p>Pants.</p>

<h5>Scheduling over thread pools: Hystrix</h5>

<p><a href="https://github.com/Netflix/Hystrix">Hystrix</a> is Netflix library which I think of as circuit breakers on steroids.</p>

<p><img src ="http://josephwilk.github.io/images/hystrix.png" height="400px" width="400px"/></p>

<pre><code>Hystrix is a latency and fault tolerance library designed to isolate points of access to remote systems, 
services and 3rd party libraries, stop cascading failure and enable resilience in complex distributed systems 
where failure is inevitable.
</code></pre>

<p>Dave Ray (<a href="http://darevay.com">http://darevay.com</a>) has been doing lots of excellent work on producing <a href="https://github.com/Netflix/Hystrix/tree/master/hystrix-contrib/hystrix-clj">Clojure bindings for Hystrix</a>:</p>

<p>Hystrix gives me 2 big wins:</p>

<h5>1. Separation of thread pools</h5>

<p>Hystrix creates a separate thread pool for each Clojure namespace, if one thread pool becomes blocked due to a failure, a circuit breaker can be triggered with a fallback that uses a different thread pool.</p>

<p>This however does come with a cost:</p>

<ol>
<li> We have a performance hit due to moving to a scheduling based method for executing Hystrix commands.</li>
<li> We cannot use Clojure&rsquo;s concurrency primitives (futures/promises/agents).</li>
</ol>


<p>Here is an example of our service rewritten with Hystrix:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">ns </span><span class="nv">example</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:require</span> <span class="p">[[</span><span class="nv">com.netflix.hystrix.core</span> <span class="ss">:as</span> <span class="nv">hystrix</span><span class="p">]]))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">hystrix/defcommand</span> <span class="nv">http-get</span>
</span><span class='line'>  <span class="p">{</span><span class="ss">:hystrix/fallback-fn</span> <span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">url</span><span class="p">]</span> <span class="p">(</span><span class="nf">memcache-get</span> <span class="nv">url</span><span class="p">)}</span>
</span><span class='line'>  <span class="p">[</span><span class="nv">url</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">client/get</span> <span class="nv">url</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">hystrix/defcommand</span> <span class="nv">memcache-get</span>
</span><span class='line'>  <span class="p">{</span><span class="ss">:hystrix/fallback-fn</span> <span class="p">(</span><span class="nb">constantly </span><span class="nv">nil</span><span class="p">)}</span>
</span><span class='line'>  <span class="p">[</span><span class="nv">url</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">memcache/get</span> <span class="nv">client</span> <span class="nv">key</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">http-get</span> <span class="p">[</span><span class="nv">url</span><span class="p">]</span>
</span><span class='line'>   <span class="p">{</span><span class="ss">:body</span> <span class="p">(</span><span class="nf">http/get</span> <span class="s">&quot;http://soundcloud.com/blah/wah&quot;</span><span class="p">)</span> <span class="ss">:status</span> <span class="mi">200</span><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>Beautiful, Just adding the <code>defcommand</code> brings us fault tolerance with no other changes to the shape of our code.</p>

<p>See the Hystrix Clojure adapter for all the possible configuration: <a href="https://github.com/Netflix/Hystrix/tree/master/hystrix-contrib/hystrix-clj">https://github.com/Netflix/Hystrix/tree/master/hystrix-contrib/hystrix-clj</a></p>

<h5>2.  Monitoring</h5>

<p>Hystrix supports exposing metrics on all circuit breakers within a process. It exposes these calls through an event stream.</p>

<p>How you expose that Hystrix event stream depends slightly on which web server you are using with your Clojure app.</p>

<h4>Netty and Hystrix Event Streams (without servlets)</h4>

<p><a href="https://github.com/josephwilk/hystrix-event-stream-clj">https://github.com/josephwilk/hystrix-event-stream-clj</a></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">hystrix-event-stream-clj.core</span> <span class="nv">as</span> <span class="nv">hystrix-event</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">defroutes</span> <span class="nv">app</span> <span class="p">(</span><span class="nf">GET</span> <span class="s">&quot;/hystrix.stream&quot;</span> <span class="p">(</span><span class="nf">hystrix-event/stream</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Jetty and Hystrix Event Streams (with servlets)</h4>

<p>If they are using Jetty you will need to change your app to add your main web app as a servlet. Then we can also add the Hystrix event stream servlet.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">ns </span><span class="nv">sc-clj-kit.hystrix.jetty</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:import</span> <span class="p">[</span><span class="nv">com.netflix.hystrix.contrib.metrics.eventstream</span> <span class="nv">HystrixMetricsStreamServlet</span><span class="p">])</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:import</span> <span class="p">[</span><span class="nv">org.eclipse.jetty.server</span> <span class="nv">Server</span><span class="p">])</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:import</span> <span class="p">[</span><span class="nv">org.eclipse.jetty.servlet</span> <span class="nv">ServletContextHandler</span><span class="p">])</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:import</span> <span class="p">[</span><span class="nv">org.eclipse.jetty.servlet</span> <span class="nv">ServletHolder</span><span class="p">])</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:import</span> <span class="p">[</span><span class="nv">org.eclipse.jetty.server.bio</span> <span class="nv">SocketConnector</span><span class="p">])</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:import</span> <span class="p">[</span><span class="nv">org.eclipse.jetty.server.ssl</span> <span class="nv">SslSocketConnector</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="ss">:import</span> <span class="p">(</span><span class="nf">org.eclipse.jetty.server</span> <span class="nv">Server</span> <span class="nv">Request</span><span class="p">)</span>
</span><span class='line'>           <span class="p">(</span><span class="nf">org.eclipse.jetty.server.handler</span> <span class="nv">AbstractHandler</span><span class="p">)</span>
</span><span class='line'>           <span class="p">(</span><span class="nf">org.eclipse.jetty.server.nio</span> <span class="nv">SelectChannelConnector</span><span class="p">)</span>
</span><span class='line'>           <span class="p">(</span><span class="nf">org.eclipse.jetty.server.ssl</span> <span class="nv">SslSelectChannelConnector</span><span class="p">)</span>
</span><span class='line'>           <span class="p">(</span><span class="nf">org.eclipse.jetty.util.thread</span> <span class="nv">QueuedThreadPool</span><span class="p">)</span>
</span><span class='line'>           <span class="p">(</span><span class="nf">org.eclipse.jetty.util.ssl</span> <span class="nv">SslContextFactory</span><span class="p">)</span>
</span><span class='line'>           <span class="p">(</span><span class="nf">javax.servlet.http</span> <span class="nv">HttpServletRequest</span> <span class="nv">HttpServletResponse</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:require</span>
</span><span class='line'>   <span class="p">[</span><span class="nv">compojure.core</span>          <span class="ss">:refer</span> <span class="ss">:all</span><span class="p">]</span>
</span><span class='line'>   <span class="p">[</span><span class="nv">ring.adapter.jetty</span>      <span class="ss">:as</span> <span class="nv">jetty</span><span class="p">]</span>
</span><span class='line'>   <span class="p">[</span><span class="nv">ring.util.servlet</span> <span class="ss">:as</span> <span class="nv">servlet</span><span class="p">]))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">run-jetty-with-hystrix-stream</span> <span class="p">[</span><span class="nv">app</span> <span class="nv">options</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="o">^</span><span class="nv">Server</span> <span class="nv">server</span> <span class="p">(</span><span class="o">#</span><span class="ss">&#39;jetty/create-server</span> <span class="p">(</span><span class="nb">dissoc </span><span class="nv">options</span> <span class="ss">:configurator</span><span class="p">))</span>
</span><span class='line'>        <span class="o">^</span><span class="nv">QueuedThreadPool</span> <span class="nv">pool</span> <span class="p">(</span><span class="nf">QueuedThreadPool.</span> <span class="o">^</span><span class="nv">Integer</span> <span class="p">(</span><span class="nf">options</span> <span class="ss">:max-threads</span> <span class="mi">50</span><span class="p">))]</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">when </span><span class="p">(</span><span class="ss">:daemon?</span> <span class="nv">options</span> <span class="nv">false</span><span class="p">)</span> <span class="p">(</span><span class="nf">.setDaemon</span> <span class="nv">pool</span> <span class="nv">true</span><span class="p">))</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">doto </span><span class="nv">server</span> <span class="p">(</span><span class="nf">.setThreadPool</span> <span class="nv">pool</span><span class="p">))</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">when-let </span><span class="p">[</span><span class="nv">configurator</span> <span class="p">(</span><span class="ss">:configurator</span> <span class="nv">options</span><span class="p">)]</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">configurator</span> <span class="nv">server</span><span class="p">))</span>
</span><span class='line'>    <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">hystrix-holder</span>  <span class="p">(</span><span class="nf">ServletHolder.</span> <span class="nv">HystrixMetricsStreamServlet</span><span class="p">)</span>
</span><span class='line'>          <span class="nv">app-holder</span> <span class="p">(</span><span class="nf">ServletHolder.</span> <span class="p">(</span><span class="nf">servlet/servlet</span> <span class="nv">app</span><span class="p">))</span>
</span><span class='line'>          <span class="nv">context</span> <span class="p">(</span><span class="nf">ServletContextHandler.</span> <span class="nv">server</span> <span class="s">&quot;/&quot;</span> <span class="nv">ServletContextHandler/SESSIONS</span><span class="p">)]</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">.addServlet</span> <span class="nv">context</span> <span class="nv">hystrix-holder</span> <span class="s">&quot;/hystrix.stream&quot;</span><span class="p">)</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">.addServlet</span> <span class="nv">context</span> <span class="nv">app-holder</span> <span class="s">&quot;/&quot;</span><span class="p">))</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">.start</span> <span class="nv">server</span><span class="p">)</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">when </span><span class="p">(</span><span class="ss">:join?</span> <span class="nv">options</span> <span class="nv">true</span><span class="p">)</span> <span class="p">(</span><span class="nf">.join</span> <span class="nv">server</span><span class="p">))</span>
</span><span class='line'>    <span class="nv">server</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">defroutes</span> <span class="nv">app</span> <span class="p">(</span><span class="nf">GET</span> <span class="s">&quot;/hello&quot;</span> <span class="p">[]</span> <span class="p">{</span><span class="ss">:status</span> <span class="mi">200</span> <span class="ss">:body</span> <span class="s">&quot;Hello&quot;</span><span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">run-jetty-with-hystrix</span> <span class="nv">app</span> <span class="p">{</span><span class="ss">:port</span> <span class="nv">http-port</span> <span class="ss">:join?</span> <span class="nv">false</span><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Aggregation and discovery</h4>

<p>While you can monitor a single process using Hystrix in our example we have many processes serving an endpoint. To aggregate all these Hystrix metric services we use <a href="https://github.com/Netflix/Turbine">Turbine</a>.</p>

<p>Physical endpoints for a service at SoundCloud are discovered using DNS lookup. We configured Turbine to use this method to auto discover which machines are serving an endpoint.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">ns </span><span class="nv">sc-turbine.discovery</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:import</span> <span class="p">[</span><span class="nv">org.xbill.DNS</span> <span class="nv">Type</span><span class="p">]</span>
</span><span class='line'>           <span class="p">[</span><span class="nv">com.netflix.turbine.discovery</span> <span class="nv">InstanceDiscovery</span> <span class="nv">Instance</span><span class="p">])</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">clj-dns.core</span> <span class="ss">:refer</span> <span class="ss">:all</span><span class="p">]))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">gen-class</span>
</span><span class='line'>   <span class="ss">:name</span> <span class="nv">ScInstanceDiscovery</span>
</span><span class='line'>   <span class="ss">:implements</span> <span class="p">[</span><span class="nv">com.netflix.turbine.discovery.InstanceDiscovery</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">-getInstanceList</span> <span class="p">[</span><span class="nv">this</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">map </span><span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">instance</span><span class="p">]</span>
</span><span class='line'>         <span class="p">(</span><span class="nf">Instance.</span> <span class="p">(</span><span class="nb">str </span><span class="p">(</span><span class="ss">:host</span> <span class="nv">instance</span><span class="p">)</span> <span class="s">&quot;:&quot;</span> <span class="p">(</span><span class="ss">:port</span> <span class="nv">instance</span><span class="p">))</span> <span class="s">&quot;example-prod&quot;</span> <span class="nv">true</span><span class="p">))</span>
</span><span class='line'>       <span class="p">(</span><span class="nb">map </span><span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">answer</span><span class="p">]</span> <span class="p">{</span><span class="ss">:host</span> <span class="p">(</span><span class="nb">-&gt; </span><span class="nv">answer</span> <span class="nv">.getTarget</span> <span class="nv">str</span><span class="p">)</span> <span class="ss">:port</span> <span class="p">(</span><span class="nf">.getPort</span> <span class="nv">answer</span><span class="p">)})</span>
</span><span class='line'>            <span class="p">(</span><span class="ss">:answers</span> <span class="p">(</span><span class="nf">dns-lookup</span> <span class="s">&quot;&quot;</span> <span class="nv">Type/SRV</span><span class="p">)))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>And the config.properties:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="nv">InstanceDiscovery.impl=ScInstanceDiscovery</span>
</span><span class='line'><span class="nv">turbine.aggregator.clusterConfig=example-prod</span>
</span><span class='line'><span class="nv">turbine.instanceUrlSuffix=/hystrix.stream</span>
</span></code></pre></td></tr></table></div></figure>


<p>Putting this all together our monitoring looks like this:</p>

<p><img src="http://josephwilk.github.io/images/service_discovery.png"></p>

<h4>Pretty graphs: Hystrix Dashboard</h4>

<p>Finally we run the <a href="https://github.com/Netflix/Hystrix/tree/master/hystrix-dashboard">Hystrix Dashboard</a> and watch our circuit breakers live.</p>

<p><img src="http://josephwilk.github.io/images/hystrix_dashboard.png"></p>

<p>And heres an example with triggered circuit breakers:</p>

<p><img src="http://josephwilk.github.io/images/hystrix_dashboard_failures.jpg"></p>

<p>Since I cannot show you the dashboard running, you will have to make do with music generated from the metrics. I normalize the live Hystrix metrics to piano pitches and play the notes as the arrive from the stream.</p>

<h4>Hystrix Metrics as Sounds</h4>

<div>
<iframe width="100%" height="166" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=http%3A%2F%2Fapi.soundcloud.com%2Ftracks%2F109115434&amp;color=ff6600&amp;auto_play=false&amp;show_artwork=false"></iframe>
</div>




<p></p>


<h3>Complexity &amp; Composition</h3>

<p>Working with many services, composition of service calls becomes hard to think and write about. Callbacks try to solve this but nested callbacks leave us with a mess.</p>

<p><a href="https://github.com/Netflix/RxJava">RxJava</a> tries to solve this using the Reactive Functional model. While RxJava provides lots of features I see it primarily as a way of expressing concurrent actions as a directed graph which provides a single callback on success or failure. The graph is expressed in terms or maps/reduces/filters/etc, things we are familiar with in the functional world.</p>

<p>To separate the request thread from the response thread we use RxJava with <a href="http://netty.io">Netty</a> and <a href="https://github.com/ztellman/aleph">Aleph</a>.</p>

<p>Here is a very simple example firing 2 concurrent requests and then joining the results into a single map response:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="c1">;;Hystrix integrates with RxJava and can return Observables for use with Rx.</span>
</span><span class='line'><span class="p">(</span><span class="kd">defn- </span><span class="nv">find-user-observable</span> <span class="p">[</span><span class="nv">id</span><span class="p">]</span> <span class="p">(</span><span class="nf">hystrix/observe</span> <span class="o">#</span><span class="ss">&#39;find-user</span> <span class="nv">id</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn- </span><span class="nv">meta-data</span> <span class="p">[</span><span class="nv">user-urn</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">user-observable</span> <span class="p">(</span><span class="nb">-&gt; </span><span class="p">(</span><span class="nf">find-user-observable</span> <span class="nv">id</span><span class="p">)</span> <span class="p">(</span><span class="nf">.map</span> <span class="p">(</span><span class="err">Œª</span> <span class="p">[</span><span class="nv">user</span><span class="p">]</span> <span class="nv">...</span><span class="p">)))</span>
</span><span class='line'>        <span class="nv">meta-observable</span> <span class="p">(</span><span class="nb">-&gt; </span><span class="p">(</span><span class="nf">find-user-meta-observable</span> <span class="nv">id</span><span class="p">)</span> <span class="p">(</span><span class="nf">.map</span> <span class="p">(</span><span class="err">Œª</span> <span class="p">[</span><span class="nv">subscription</span><span class="p">]</span> <span class="nv">...</span><span class="p">))))</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">-&gt; </span><span class="p">(</span><span class="nf">Observable/zip</span> <span class="nv">user-observable</span>
</span><span class='line'>                        <span class="nv">meta-observable</span>
</span><span class='line'>                        <span class="p">(</span><span class="err">Œª</span> <span class="p">[</span><span class="o">&amp;</span> <span class="nv">maps</span><span class="p">]</span> <span class="p">{</span><span class="ss">:user</span> <span class="p">(</span><span class="nb">apply merge </span><span class="nv">maps</span><span class="p">)}))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>The function <code>meta-data</code> returns an Observerable which we subscribe to and using Aleph return the resulting JSON to a channel.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn- </span><span class="nv">subscribe-request</span> <span class="p">[</span><span class="nv">channel</span> <span class="nv">request</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">id</span> <span class="p">(</span><span class="nf">get-in</span> <span class="nv">request</span> <span class="p">[</span><span class="ss">:route-params</span> <span class="ss">:id</span><span class="p">])]</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">-&gt; </span><span class="p">(</span><span class="nf">meta-data</span> <span class="nv">id</span><span class="p">)</span>
</span><span class='line'>        <span class="p">(</span><span class="nf">.subscribe</span>
</span><span class='line'>          <span class="o">#</span><span class="p">(</span><span class="nf">enqueue</span> <span class="nv">channel</span> <span class="p">{</span><span class="ss">:status</span> <span class="mi">200</span> <span class="ss">:body</span> <span class="nv">%</span><span class="p">}))</span>
</span><span class='line'>          <span class="o">#</span><span class="p">(</span><span class="nf">logging/exception</span> <span class="nv">%</span><span class="p">))))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">defroutes</span> <span class="nv">app</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">GET</span> <span class="s">&quot;/users/:id&quot;</span> <span class="p">[</span><span class="nv">id</span><span class="p">]</span> <span class="p">(</span><span class="nf">wrap-aleph-handler</span> <span class="nv">subscribe-request</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>The shape of the <a href="https://github.com/Netflix/RxJava/tree/master/language-adaptors/rxjava-clojure">RxJava Clojure bindings</a> are still under development.</p>

<h4>That single thread pool again&hellip;</h4>

<p>With RxJava we are also in a situation were we cannot use Clojure&rsquo;s <code>future</code>. In order for RxJava to block optimally we don&rsquo;t want to use a single thread pool.
Hence we use Hystrix as our means of providing concurreny.</p>

<h2>Clojure services at scale</h2>

<p>I&rsquo;m very happy with the shape of these services running at SoundCloud. In production they are performing very well under heavy load with useful near realtime monitoring.
In part thanks to Netflix&rsquo;s hard work there is no reason you cannot write elegant Clojure services at scale.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating sampled instruments with Overtone]]></title>
    <link href="http://josephwilk.github.io/clojure/creating-instruments-with-overtone.html"/>
    <updated>2013-08-26T21:28:00+01:00</updated>
    <id>http://josephwilk.github.io/clojure/creating-instruments-with-overtone</id>
    <content type="html"><![CDATA[<p><a href="http://overtone.github.io">Overtone</a> is an open source audio environment which uses Clojure and <a href="http://supercollider.sourceforge.net/">SuperCollider</a> (an environment and programming language for real time audio synthesis and algorithmic composition).</p>

<p>Overtone makes it very easy to define instruments based on sound samples from <a href="http://www.freesound.org">freesound</a>.
We will walk through getting samples for a flute and then using them to define the flute instrument in Overtone.</p>

<h2>The Flute</h2>

<p><img src="http://josephwilk.github.io/images/flute.jpg"/></p>

<h3>Getting the samples</h3>

<p>Firstly we need to manually grab all the IDs from freesound. Sounds are often grouped into packs making this a little less painful.</p>

<p>We will be using the <a href="http://www.freesound.org/search/?q=flute&amp;f=grouping_pack%3A%229549_Transverse+Flute%3A+Tenuto+Vibrato+C4-C7%22&amp;s=score+desc&amp;advanced=0&amp;g=1">&ldquo;Transverse Flute: Tenuto Vibrato C4-C7&rdquo;</a> pack.</p>

<p>A little Ruby script I use to produce a map of freesound ids to notes (which are usually in the filename of the sample):</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="c1">#!/usr/bin/env ruby -w</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;rubygems&#39;</span>
</span><span class='line'><span class="nb">require</span> <span class="s1">&#39;json&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="k">raise</span> <span class="no">Exception</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="s2">&quot;You must pass in the pack id!&quot;</span><span class="p">)</span> <span class="k">unless</span> <span class="no">ARGV</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">pack_id</span> <span class="o">=</span> <span class="no">ARGV</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span>
</span><span class='line'><span class="n">note_extractor</span> <span class="o">=</span> <span class="err">Œª</span><span class="p">{</span><span class="o">|</span><span class="n">filename</span><span class="o">|</span> <span class="n">filename</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/Transverse-Flute |\.wav|Tenuto|NonVibrato|-/</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">)</span><span class="o">.</span><span class="n">gsub</span><span class="p">(</span><span class="sr">/ NonVibrato/</span><span class="p">,</span> <span class="s2">&quot;&quot;</span><span class="p">)}</span>
</span><span class='line'>
</span><span class='line'><span class="n">data</span> <span class="o">=</span> <span class="no">JSON</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="sb">`curl --silent &quot;http://www.freesound.org/api/packs/</span><span class="si">#{</span><span class="n">pack_id</span><span class="si">}</span><span class="sb">/sounds/?api_key=47efd585321048819a2328721507ee23&quot;`</span><span class="p">)</span>
</span><span class='line'><span class="n">number_of_pages</span> <span class="o">=</span> <span class="n">data</span><span class="o">[</span><span class="s2">&quot;num_pages&quot;</span><span class="o">]</span> <span class="o">||</span> <span class="mi">1</span>
</span><span class='line'>
</span><span class='line'><span class="n">number_of_pages</span><span class="o">.</span><span class="n">times</span> <span class="k">do</span> <span class="o">|</span><span class="n">page</span><span class="o">|</span>
</span><span class='line'>  <span class="n">data</span> <span class="o">=</span> <span class="no">JSON</span><span class="o">.</span><span class="n">parse</span><span class="p">(</span><span class="sb">`curl --silent &quot;http://www.freesound.org/api/packs/</span><span class="si">#{</span><span class="n">pack_id</span><span class="si">}</span><span class="sb">/sounds/?api_key=47efd585321048819a2328721507ee23&amp;p=</span><span class="si">#{</span><span class="n">page</span> <span class="o">+</span> <span class="mi">1</span><span class="si">}</span><span class="sb">&quot;`</span><span class="p">)</span>
</span><span class='line'>  <span class="n">sound_ids</span> <span class="o">=</span> <span class="n">data</span><span class="o">[</span><span class="s2">&quot;sounds&quot;</span><span class="o">].</span><span class="n">map</span><span class="p">{</span><span class="o">|</span><span class="n">sound</span><span class="o">|</span> <span class="n">sound</span><span class="o">[</span><span class="s2">&quot;id&quot;</span><span class="o">]</span><span class="p">}</span>
</span><span class='line'>  <span class="n">note_names</span> <span class="o">=</span> <span class="n">data</span><span class="o">[</span><span class="s2">&quot;sounds&quot;</span><span class="o">].</span><span class="n">map</span><span class="p">{</span><span class="o">|</span><span class="n">sound</span><span class="o">|</span> <span class="n">note_extractor</span><span class="o">.</span><span class="n">call</span><span class="p">(</span><span class="n">sound</span><span class="o">[</span><span class="s2">&quot;original_filename&quot;</span><span class="o">]</span><span class="p">)}</span>
</span><span class='line'>
</span><span class='line'>  <span class="n">sound_ids</span><span class="o">.</span><span class="n">each_with_index</span> <span class="k">do</span> <span class="o">|</span><span class="n">sound_id</span><span class="p">,</span> <span class="n">index</span><span class="o">|</span>
</span><span class='line'>    <span class="nb">puts</span> <span class="s2">&quot;</span><span class="si">#{</span><span class="n">sound_id</span><span class="si">}</span><span class="s2"> :</span><span class="si">#{</span><span class="n">note_names</span><span class="o">[</span><span class="n">index</span><span class="o">]</span><span class="si">}</span><span class="s2">&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Adding these to our Clojure code we have a Freesound ID to note mapping:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">FREESOUND-VIBRATO-FLUTE-SAMPLES</span>
</span><span class='line'>  <span class="s">&quot;Freesound ids for all samples in the Vibrato Transverse Flute pack&quot;</span>
</span><span class='line'>  <span class="p">{</span><span class="mi">154274</span> <span class="ss">:C7</span>  <span class="mi">154273</span> <span class="ss">:B6</span> <span class="mi">154272</span> <span class="ss">:A#6</span> <span class="mi">154271</span> <span class="ss">:A6</span> <span class="mi">154270</span> <span class="ss">:G#6</span> <span class="mi">154269</span> <span class="ss">:G6</span>  <span class="mi">154268</span> <span class="ss">:F#6</span>
</span><span class='line'>   <span class="mi">154267</span> <span class="ss">:F6</span>  <span class="mi">154266</span> <span class="ss">:E6</span> <span class="mi">154265</span> <span class="ss">:D#6</span> <span class="mi">154264</span> <span class="ss">:D6</span> <span class="mi">154263</span> <span class="ss">:C#6</span> <span class="mi">154262</span> <span class="ss">:C6</span>  <span class="mi">154261</span> <span class="ss">:B5</span>
</span><span class='line'>   <span class="mi">154260</span> <span class="ss">:A#5</span> <span class="mi">154259</span> <span class="ss">:A5</span> <span class="mi">154258</span> <span class="ss">:G#5</span> <span class="mi">154257</span> <span class="ss">:G5</span> <span class="mi">154256</span> <span class="ss">:F#5</span> <span class="mi">154255</span> <span class="ss">:F5</span>  <span class="mi">154254</span> <span class="ss">:E5</span>
</span><span class='line'>   <span class="mi">154253</span> <span class="ss">:D#5</span> <span class="mi">154252</span> <span class="ss">:D5</span> <span class="mi">154251</span> <span class="ss">:C#5</span> <span class="mi">154250</span> <span class="ss">:C5</span> <span class="mi">154249</span> <span class="ss">:B4</span>  <span class="mi">154248</span> <span class="ss">:A#4</span> <span class="mi">154247</span> <span class="ss">:A4</span>
</span><span class='line'>   <span class="mi">154246</span> <span class="ss">:G#4</span> <span class="mi">154245</span> <span class="ss">:G4</span> <span class="mi">154244</span> <span class="ss">:F#4</span> <span class="mi">154243</span> <span class="ss">:E4</span> <span class="mi">154242</span> <span class="ss">:F4</span>  <span class="mi">154241</span> <span class="ss">:D#4</span> <span class="mi">154240</span> <span class="ss">:D4</span>
</span><span class='line'>   <span class="mi">154239</span> <span class="ss">:C#4</span> <span class="mi">154238</span> <span class="ss">:C4</span><span class="p">})</span>
</span></code></pre></td></tr></table></div></figure>


<p>These samples are cached in the asset store (usually ~/.overtone/assets) so we don&rsquo;t have to keep downloading them. We define a cache key for our downloaded samples.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn- </span><span class="nv">registered-samples</span>
</span><span class='line'>  <span class="s">&quot;Fetch flute samples from the asset store if they have been manually registered&quot;</span>
</span><span class='line'>  <span class="p">[]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">registered-assets</span> <span class="ss">::TransverseFluteTenutoVibrato</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Load all the samples into Overtone. This will automatically download the samples if they are not already present.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">flute-samples</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">doall </span><span class="p">(</span><span class="nb">map </span><span class="nv">freesound-sample</span> <span class="p">(</span><span class="nb">keys </span><span class="nv">FREESOUND-VIBRATO-FLUTE-SAMPLES</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>In order to play the samples we need to produce a mapping between the buffer that has the sound loaded and the midi pitch that buffer relates to.</p>

<p>First we convert a freesound-id into a midi note (pitch)</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn- </span><span class="nv">buffer-&gt;midi-note</span> <span class="p">[</span><span class="nv">buf</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">-&gt; </span><span class="nv">buf</span> <span class="ss">:freesound-id</span> <span class="nv">FREESOUND-VIBRATO-FLUTE-SAMPLES</span> <span class="nb">name </span><span class="nv">note</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now we can generate the buffer id to midi note map.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn- </span><span class="nv">note-index</span>
</span><span class='line'>  <span class="s">&quot;Returns a map of midi-note values [0-127] to buffer ids.&quot;</span>
</span><span class='line'>  <span class="p">[</span><span class="nv">buffers</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">reduce </span><span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nb">index </span><span class="nv">buf</span><span class="p">]</span>
</span><span class='line'>            <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">id</span> <span class="p">(</span><span class="nb">-&gt; </span><span class="nv">buf</span> <span class="ss">:id</span><span class="p">)</span>
</span><span class='line'>                  <span class="nv">note</span> <span class="p">(</span><span class="nf">buffer-&gt;midi-note</span> <span class="nv">buf</span><span class="p">)]</span>
</span><span class='line'>              <span class="p">(</span><span class="nb">assoc index </span><span class="nv">note</span> <span class="nv">id</span><span class="p">)))</span>
</span><span class='line'>          <span class="p">{}</span>
</span><span class='line'>          <span class="nv">buffers</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>And we use this to set the buffers:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="c1">;Silent buffer used to ensure all 127 buffer spaces are filled </span>
</span><span class='line'><span class="p">(</span><span class="kd">defonce </span><span class="o">^</span><span class="ss">:private</span> <span class="nv">silent-buffer</span> <span class="p">(</span><span class="nf">buffer</span> <span class="mi">0</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defonce </span><span class="nv">index-buffer</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">tab</span> <span class="p">(</span><span class="nf">note-index</span> <span class="nv">flute-samples</span><span class="p">)</span>
</span><span class='line'>        <span class="nv">buf</span> <span class="p">(</span><span class="nf">buffer</span> <span class="mi">128</span><span class="p">)]</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">buffer-fill!</span> <span class="nv">buf</span> <span class="p">(</span><span class="ss">:id</span> <span class="nv">silent-buffer</span><span class="p">))</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">doseq </span><span class="p">[[</span><span class="nv">idx</span> <span class="nv">val</span><span class="p">]</span> <span class="nv">tab</span><span class="p">]</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">buffer-set!</span> <span class="nv">buf</span> <span class="nv">idx</span> <span class="nv">val</span><span class="p">))</span>
</span><span class='line'>    <span class="nv">buf</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Defining the Instrument</h2>

<p>Now we have all our samples we define a instrument in Overtone using <code>definst</code>:</p>

<p>This allows us to specify a (huge) number of options on how our samples are played.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">definst</span> <span class="nv">sampled-flute-vibrato</span>
</span><span class='line'>  <span class="p">[</span><span class="nv">note</span> <span class="mi">60</span> <span class="nv">level</span> <span class="mi">1</span> <span class="nv">rate</span> <span class="mi">1</span> <span class="nv">loop?</span> <span class="mi">0</span> <span class="nv">attack</span> <span class="mi">0</span> <span class="nv">decay</span> <span class="mi">1</span> <span class="nv">sustain</span> <span class="mi">1</span> <span class="nv">release</span> <span class="mf">0.1</span> <span class="nv">curve</span> <span class="mi">-4</span> <span class="nv">gate</span> <span class="mi">1</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">buf</span> <span class="p">(</span><span class="nf">index</span><span class="ss">:kr</span> <span class="p">(</span><span class="ss">:id</span> <span class="nv">index-buffer</span><span class="p">)</span> <span class="nv">note</span><span class="p">)</span>
</span><span class='line'>        <span class="nv">env</span> <span class="p">(</span><span class="nf">env-gen</span> <span class="p">(</span><span class="nf">adsr</span> <span class="nv">attack</span> <span class="nv">decay</span> <span class="nv">sustain</span> <span class="nv">release</span> <span class="nv">level</span> <span class="nv">curve</span><span class="p">)</span>
</span><span class='line'>                     <span class="ss">:gate</span> <span class="nv">gate</span>
</span><span class='line'>                     <span class="ss">:action</span> <span class="nv">FREE</span><span class="p">)]</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">* </span><span class="nv">env</span> <span class="p">(</span><span class="nf">scaled-play-buf</span> <span class="mi">2</span> <span class="nv">buf</span> <span class="ss">:level</span> <span class="nv">level</span> <span class="ss">:loop</span> <span class="nv">loop?</span> <span class="ss">:action</span> <span class="nv">FREE</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>There is quite a lot going on here. Lets focus on the configuration that effects how our sound samples are played.</p>

<h3>Defining the Envelope Generator (env-gen).</h3>

<p>An envelope generator (mapping to function <code>env-gen</code>) makes an audio signal that smoothly rises and falls. We are taking the recording of the real flute instrument as a digitized waveform, and then playing back its recordings at different speeds to produce different tones.</p>

<p>The most common form of envelope generator and the one we are using here is ADSR:</p>

<p>attack (A), decay (D), sustain (S) and release &#40;R)</p>

<p><img src="http://josephwilk.github.io/images/ADSR.png" /></p>

<p>There are a number of other config settings in our example:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">[</span>
</span><span class='line'> <span class="nv">note</span> <span class="mi">60</span>     <span class="c1">; Default pitch</span>
</span><span class='line'> <span class="nv">level</span> <span class="mi">1</span>     <span class="c1">; Volume</span>
</span><span class='line'> <span class="nv">rate</span> <span class="mi">1</span>      <span class="c1">; Playback rate </span>
</span><span class='line'> <span class="nv">loop?</span> <span class="mi">0</span>     <span class="c1">; The note should loop after the first play</span>
</span><span class='line'> <span class="nv">attack</span> <span class="mi">0</span>    <span class="c1">; The way a sound is initiated. Fast attack (gunshot) vs Slow attack (closing a door slowly)</span>
</span><span class='line'> <span class="nv">decay</span> <span class="mi">1</span>     <span class="c1">; The time for notes to decay after the initial strike</span>
</span><span class='line'> <span class="nv">sustain</span> <span class="mi">1</span>   <span class="c1">; Once a sound has reached its peak, the length of time that the sound will sustain.</span>
</span><span class='line'> <span class="nv">release</span> <span class="mf">0.1</span> <span class="c1">; The time for notes to decay after the key is released</span>
</span><span class='line'> <span class="nv">curve</span> <span class="mi">-4</span>    <span class="c1">; Curve factor</span>
</span><span class='line'> <span class="nv">gate</span> <span class="mi">1</span>      <span class="c1">; note occurs when gate goes from nonpositive to positive. Note off occurs when it goes from positive to nonpositive</span>
</span><span class='line'><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Look to the <a href="http://supercollider.sourceforge.net/">SuperCollider</a> documentation on <a href="http://doc.sccode.org/Classes/UGen.html">UGENs</a> if you want to see all possible configuration options. Overtone is really a wrapper around the extremely powerful SuperCollider.</p>

<h2>Grand finale</h2>

<p>Finally we can start to play music in overtone using our flute:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">sampled-flute-vibrato</span> <span class="mi">60</span><span class="p">)</span> <span class="o">#</span><span class="nv">=&gt;</span> <span class="nv">pitch</span> <span class="mi">60</span>
</span><span class='line'><span class="p">(</span><span class="nf">sampled-flute-vibrato</span> <span class="mi">61</span><span class="p">)</span> <span class="o">#</span><span class="nv">=&gt;</span> <span class="nv">pitch</span> <span class="mi">61</span>
</span><span class='line'><span class="p">(</span><span class="nf">sampled-flute-vibrato</span> <span class="mi">60</span><span class="p">)</span> <span class="o">#</span><span class="nv">=&gt;</span> <span class="nv">pitch</span> <span class="mi">60</span>
</span></code></pre></td></tr></table></div></figure>


<p>Hear for yourself:</p>

<iframe width="100%" height="166" scrolling="no" frameborder="no" src="https://w.soundcloud.com/player/?url=http%3A%2F%2Fapi.soundcloud.com%2Ftracks%2F107183072&amp;color=ff6600&amp;auto_play=false&amp;show_artwork=false"></iframe>


<h2>The Code in Full</h2>

<p>Defining an instrument in Overtone:</p>

<figure class='code'><figcaption><span>Loading buffers </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">ns </span><span class="nv">overtone.samples.flute-vibrato</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:use</span> <span class="p">[</span><span class="nv">overtone.core</span><span class="p">])</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">clojure.string</span> <span class="ss">:as</span> <span class="nv">str</span><span class="p">]))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn- </span><span class="nv">registered-samples</span>
</span><span class='line'>  <span class="s">&quot;Fetch flute samples from the asset store if they have been manually</span>
</span><span class='line'><span class="s">  registered&quot;</span>
</span><span class='line'>  <span class="p">[]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">registered-assets</span> <span class="ss">::TransverseFluteTenutoVibrato</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">FREESOUND-VIBRATO-FLUTE-SAMPLES</span>
</span><span class='line'>  <span class="s">&quot;Freesound ids for all samples in the Vibrato Transverse Flute pack&quot;</span>
</span><span class='line'>  <span class="p">{</span><span class="mi">154274</span> <span class="ss">:C7</span>  <span class="mi">154273</span> <span class="ss">:B6</span> <span class="mi">154272</span> <span class="ss">:A#6</span> <span class="mi">154271</span> <span class="ss">:A6</span> <span class="mi">154270</span> <span class="ss">:G#6</span> <span class="mi">154269</span> <span class="ss">:G6</span>  <span class="mi">154268</span> <span class="ss">:F#6</span>
</span><span class='line'>   <span class="mi">154267</span> <span class="ss">:F6</span>  <span class="mi">154266</span> <span class="ss">:E6</span> <span class="mi">154265</span> <span class="ss">:D#6</span> <span class="mi">154264</span> <span class="ss">:D6</span> <span class="mi">154263</span> <span class="ss">:C#6</span> <span class="mi">154262</span> <span class="ss">:C6</span>  <span class="mi">154261</span> <span class="ss">:B5</span>
</span><span class='line'>   <span class="mi">154260</span> <span class="ss">:A#5</span> <span class="mi">154259</span> <span class="ss">:A5</span> <span class="mi">154258</span> <span class="ss">:G#5</span> <span class="mi">154257</span> <span class="ss">:G5</span> <span class="mi">154256</span> <span class="ss">:F#5</span> <span class="mi">154255</span> <span class="ss">:F5</span>  <span class="mi">154254</span> <span class="ss">:E5</span>
</span><span class='line'>   <span class="mi">154253</span> <span class="ss">:D#5</span> <span class="mi">154252</span> <span class="ss">:D5</span> <span class="mi">154251</span> <span class="ss">:C#5</span> <span class="mi">154250</span> <span class="ss">:C5</span> <span class="mi">154249</span> <span class="ss">:B4</span>  <span class="mi">154248</span> <span class="ss">:A#4</span> <span class="mi">154247</span> <span class="ss">:A4</span>
</span><span class='line'>   <span class="mi">154246</span> <span class="ss">:G#4</span> <span class="mi">154245</span> <span class="ss">:G4</span> <span class="mi">154244</span> <span class="ss">:F#4</span> <span class="mi">154243</span> <span class="ss">:E4</span> <span class="mi">154242</span> <span class="ss">:F4</span>  <span class="mi">154241</span> <span class="ss">:D#4</span> <span class="mi">154240</span> <span class="ss">:D4</span>
</span><span class='line'>   <span class="mi">154239</span> <span class="ss">:C#4</span> <span class="mi">154238</span> <span class="ss">:C4</span><span class="p">})</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">FLUTE-SAMPLE-IDS</span> <span class="p">(</span><span class="nb">keys </span><span class="nv">FREESOUND-VIBRATO-FLUTE-SAMPLES</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">flute-samples</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">doall </span><span class="p">(</span><span class="nb">map </span><span class="nv">freesound-sample</span> <span class="nv">FLUTE-SAMPLE-IDS</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn- </span><span class="nv">buffer-&gt;midi-note</span> <span class="p">[</span><span class="nv">buf</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">-&gt; </span><span class="nv">buf</span> <span class="ss">:freesound-id</span> <span class="nv">FREESOUND-VIBRATO-FLUTE-SAMPLES</span> <span class="nb">name </span><span class="nv">note</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn- </span><span class="nv">note-index</span>
</span><span class='line'>  <span class="s">&quot;Returns a map of midi-note values [0-127] to buffer ids.&quot;</span>
</span><span class='line'>  <span class="p">[</span><span class="nv">buffers</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">reduce </span><span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nb">index </span><span class="nv">buf</span><span class="p">]</span>
</span><span class='line'>            <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">id</span> <span class="p">(</span><span class="nb">-&gt; </span><span class="nv">buf</span> <span class="ss">:id</span><span class="p">)</span>
</span><span class='line'>                  <span class="nv">note</span> <span class="p">(</span><span class="nf">buffer-&gt;midi-note</span> <span class="nv">buf</span><span class="p">)]</span>
</span><span class='line'>              <span class="p">(</span><span class="nb">assoc index </span><span class="nv">note</span> <span class="nv">id</span><span class="p">)))</span>
</span><span class='line'>          <span class="p">{}</span>
</span><span class='line'>          <span class="nv">buffers</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">;; Silent buffer used to fill in the gaps.</span>
</span><span class='line'><span class="p">(</span><span class="kd">defonce </span><span class="o">^</span><span class="ss">:private</span> <span class="nv">silent-buffer</span> <span class="p">(</span><span class="nf">buffer</span> <span class="mi">0</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defonce </span><span class="nv">index-buffer</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">tab</span> <span class="p">(</span><span class="nf">note-index</span> <span class="nv">flute-samples</span><span class="p">)</span>
</span><span class='line'>        <span class="nv">buf</span> <span class="p">(</span><span class="nf">buffer</span> <span class="mi">128</span><span class="p">)]</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">buffer-fill!</span> <span class="nv">buf</span> <span class="p">(</span><span class="ss">:id</span> <span class="nv">silent-buffer</span><span class="p">))</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">doseq </span><span class="p">[[</span><span class="nv">idx</span> <span class="nv">val</span><span class="p">]</span> <span class="nv">tab</span><span class="p">]</span>
</span><span class='line'>      <span class="p">(</span><span class="nf">buffer-set!</span> <span class="nv">buf</span> <span class="nv">idx</span> <span class="nv">val</span><span class="p">))</span>
</span><span class='line'>    <span class="nv">buf</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>Defining the instrument </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">ns </span><span class="nv">overtone.inst.sampled-flute</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:use</span> <span class="p">[</span><span class="nv">overtone.core</span><span class="p">])</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:require</span>
</span><span class='line'>   <span class="p">[</span><span class="nv">overtone.samples.flute-vibrato</span> <span class="ss">:as</span> <span class="nv">vibrato</span><span class="p">]))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">definst</span> <span class="nv">sampled-flute-vibrato</span>
</span><span class='line'>  <span class="p">[</span><span class="nv">note</span> <span class="mi">60</span> <span class="nv">level</span> <span class="mi">1</span> <span class="nv">rate</span> <span class="mi">1</span> <span class="nv">loop?</span> <span class="mi">0</span>
</span><span class='line'>   <span class="nv">attack</span> <span class="mi">0</span> <span class="nv">decay</span> <span class="mi">1</span> <span class="nv">sustain</span> <span class="mi">1</span> <span class="nv">release</span> <span class="mf">0.1</span> <span class="nv">curve</span> <span class="mi">-4</span> <span class="nv">gate</span> <span class="mi">1</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">buf</span> <span class="p">(</span><span class="nf">index</span><span class="ss">:kr</span> <span class="p">(</span><span class="ss">:id</span> <span class="nv">vibrato/index-buffer</span><span class="p">)</span> <span class="nv">note</span><span class="p">)</span>
</span><span class='line'>        <span class="nv">env</span> <span class="p">(</span><span class="nf">env-gen</span> <span class="p">(</span><span class="nf">adsr</span> <span class="nv">attack</span> <span class="nv">decay</span> <span class="nv">sustain</span> <span class="nv">release</span> <span class="nv">level</span> <span class="nv">curve</span><span class="p">)</span>
</span><span class='line'>                     <span class="ss">:gate</span> <span class="nv">gate</span>
</span><span class='line'>                     <span class="ss">:action</span> <span class="nv">FREE</span><span class="p">)]</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">* </span><span class="nv">env</span> <span class="p">(</span><span class="nf">scaled-play-buf</span> <span class="mi">2</span> <span class="nv">buf</span> <span class="ss">:level</span> <span class="nv">level</span> <span class="ss">:loop</span> <span class="nv">loop?</span> <span class="ss">:action</span> <span class="nv">FREE</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Sets in Elixir]]></title>
    <link href="http://josephwilk.github.io/elixir/sets-in-elixir.html"/>
    <updated>2013-07-02T14:43:00+01:00</updated>
    <id>http://josephwilk.github.io/elixir/sets-in-elixir</id>
    <content type="html"><![CDATA[<p>I recently contributed the <code>Set</code> data structure to the <a href="http://elixir-lang.org/">Elixir</a> programming language.
The <code>Set</code> is implemented through a HashSet.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">s1</span> <span class="o">=</span> <span class="no">HashSet</span><span class="o">.</span><span class="n">new</span><span class="p">([</span><span class="m">1</span><span class="p">,</span> <span class="m">2</span><span class="p">,</span> <span class="m">3</span><span class="p">,</span> <span class="m">4</span><span class="p">])</span>
</span><span class='line'><span class="n">s2</span> <span class="o">=</span> <span class="no">HashSet</span><span class="o">.</span><span class="n">new</span><span class="p">([</span><span class="m">3</span><span class="p">,</span> <span class="m">4</span><span class="p">])</span>
</span><span class='line'>
</span><span class='line'><span class="no">Set</span><span class="o">.</span><span class="n">difference</span><span class="p">(</span><span class="n">s1</span><span class="p">,</span> <span class="n">s2</span><span class="p">)</span> <span class="c1"># =&gt; HashSet&lt;[1, 2]&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Elixir&rsquo;s Set implementation is often faster than Erlangs own <a href="http://www.erlang.org/doc/man/sets.html">sets</a>. Which is pretty impressive since Elixir runs on the same Erlang VM. It does this by adapting the internal data structure based on the size of the sets.</p>

<p>Lets explore how Elixir does this while also explaining a little about Elixir:</p>

<h2>Growing Data structures</h2>

<p>For small sets the internal representation uses an ordered set (which really is just a list).</p>

<p>We refer to this as a Bucket.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="p">[</span><span class="m">1</span><span class="p">,</span> <span class="m">2</span><span class="p">,</span> <span class="m">3</span><span class="p">,</span> <span class="m">4</span><span class="p">]</span>
</span></code></pre></td></tr></table></div></figure>


<p>Being ordered allows us to perform faster access and modification.</p>

<p>For example finding a member of a set:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="c1"># Only needs a single comparison to know if 1 is in the Set.</span>
</span><span class='line'><span class="c1"># Since the first element is greater than 1 we know its not in the Set.</span>
</span><span class='line'><span class="no">Set</span><span class="o">.</span><span class="n">member?</span><span class="p">(</span><span class="no">HashSet</span><span class="o">.</span><span class="n">new</span> <span class="p">[</span><span class="m">2</span><span class="p">,</span> <span class="m">3</span><span class="p">,</span> <span class="m">4</span><span class="p">,</span> <span class="m">5</span><span class="p">],</span> <span class="m">1</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Order in the list is not maintained in the data structure but in the insertion/put:</p>

<h3>Putting elements into a Bucket</h3>

<p>Before we jump into some Elixir code its important to understand that the order of functions in Elixir is important. We start from the top function and if this function matches a criteria we call it otherwise we try the function below and so on. If we find no function that matches that&rsquo;s a error and execution aborts.</p>

<p>Here is the Elixir code for inserting a member into a bucket.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="c1"># We have found the place to insert the new member.</span>
</span><span class='line'><span class="k">defp</span> <span class="n">bucket_put</span><span class="p">([</span><span class="n">m</span><span class="o">|</span><span class="n">_</span><span class="p">]</span><span class="o">=</span><span class="n">bucket</span><span class="p">,</span> <span class="n">member</span><span class="p">)</span> <span class="ow">when</span> <span class="n">m</span> <span class="o">&gt;</span> <span class="n">member</span> <span class="k">do </span>
</span><span class='line'><span class="k">  </span><span class="p">{</span> <span class="p">[</span><span class="n">member</span><span class="o">|</span><span class="n">bucket</span><span class="p">],</span> <span class="m">1</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Member is already in the set, we don&#39;t added it. (notice how member is being used to pattern match here).</span>
</span><span class='line'><span class="c1"># Its the same as writing: `defp bucket_put([m|bucket], member) when m == member do</span>
</span><span class='line'><span class="k">defp</span> <span class="n">bucket_put</span><span class="p">([</span><span class="n">member</span><span class="o">|</span><span class="n">bucket</span><span class="p">],</span> <span class="n">member</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'><span class="k">  </span><span class="p">{</span> <span class="p">[</span><span class="n">member</span><span class="o">|</span><span class="n">bucket</span><span class="p">],</span> <span class="m">0</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Recursive case, keep calling bucket_put as this is not the point to insert.</span>
</span><span class='line'><span class="k">defp</span> <span class="n">bucket_put</span><span class="p">([</span><span class="n">e</span><span class="o">|</span><span class="n">bucket</span><span class="p">],</span> <span class="n">member</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'><span class="k">  </span><span class="p">{</span> <span class="n">rest</span><span class="p">,</span> <span class="n">count</span> <span class="p">}</span> <span class="o">=</span> <span class="n">bucket_put</span><span class="p">(</span><span class="n">bucket</span><span class="p">,</span> <span class="n">member</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span> <span class="p">[</span><span class="n">e</span><span class="o">|</span><span class="n">rest</span><span class="p">],</span> <span class="n">count</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Empty set, insert the number</span>
</span><span class='line'><span class="k">defp</span> <span class="n">bucket_put</span><span class="p">([],</span> <span class="n">member</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'><span class="k">  </span><span class="p">{</span> <span class="p">[</span><span class="n">member</span><span class="p">],</span> <span class="m">1</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Expanding into a Trie</h2>

<p>Upon reaching a threshold the Set changes the internal representation into a Trie (What the hell is a <a href="http://en.wikipedia.org/wiki/Trie">trie</a>).</p>

<p>Why a Trie?</p>

<blockquote><p>For a Trie the time required for insert, delete and find operations is almost identical.
As a result, for situations where code is inserting, deleting and finding in equal measure, tries can handily beat binary search trees.</p></blockquote>

<p>In a Trie we don&rsquo;t store any keys or hashes, instead a elements position in the tree defines the key with which it is associated.</p>

<p>Hence we can take advantage of Erlangs fast <a href="http://www.erlang.org/doc/reference_manual/data_types.html#id65673">tuples</a> to model the trie. A multi-depth trie is just tuples inside tuples.</p>

<h3>Buckets growing into Tries</h3>

<p>Lets work through an example. For simplicity we will assume the expansion happens at the very small size of 5 elements:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="n">set</span> <span class="o">=</span> <span class="no">Set</span><span class="o">.</span><span class="n">new</span> <span class="p">[</span><span class="m">0</span><span class="p">,</span> <span class="m">1</span><span class="p">,</span> <span class="m">2</span><span class="p">,</span> <span class="m">3</span><span class="p">]</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Apply an operation that forces the internal structure to change</span>
</span><span class='line'><span class="n">set</span> <span class="o">=</span> <span class="no">Set</span><span class="o">.</span><span class="n">put</span><span class="p">(</span><span class="n">set</span><span class="p">,</span> <span class="m">4</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Create a new Erlang Tuple</h4>

<p><img alt="bucket to trie" src="http://josephwilk.github.io/images/trie_step1.png"/></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'>  <span class="ss">:erlang</span><span class="o">.</span><span class="n">make_tuple</span><span class="p">(</span><span class="n">node_size</span> <span class="o">=</span> <span class="m">4</span><span class="p">,</span> <span class="p">[])</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Redistribute the bucket elements into the Tuple</h4>

<p><img alt="bucket to trie" src="http://josephwilk.github.io/images/trie_step2.png"/></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="c1"># This returns the index that a set value should have in the tuple.</span>
</span><span class='line'><span class="k">defp</span> <span class="n">bucket_nth_index</span><span class="p">(</span><span class="n">set_value</span><span class="p">,</span> <span class="n">trie_depth</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'><span class="k">  </span><span class="n">node_shift</span> <span class="o">=</span> <span class="m">2</span>
</span><span class='line'>  <span class="n">node_bitmap</span> <span class="o">=</span> <span class="m">0b0011</span>
</span><span class='line'>
</span><span class='line'>  <span class="p">(</span><span class="ss">:erlang</span><span class="o">.</span><span class="n">phash2</span><span class="p">(</span><span class="n">set_value</span><span class="p">)</span> <span class="o">&gt;&gt;&gt;</span> <span class="p">(</span><span class="n">node_shift</span> <span class="o">*</span> <span class="n">trie_depth</span><span class="p">))</span> <span class="o">&amp;&amp;</span><span class="err">&amp;</span> <span class="n">node_bitmap</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Create a new node or add to an existing node.</span>
</span><span class='line'><span class="c1"># Based on the bucket_nth_index of the set member put it into a bucket at that index in the tuple.</span>
</span><span class='line'><span class="k">defp</span> <span class="n">node_relocate</span><span class="p">(</span><span class="n">node</span> <span class="o">//</span> <span class="ss">:erlang</span><span class="o">.</span><span class="n">make_tuple</span><span class="p">(</span><span class="n">node_size</span> <span class="o">=</span> <span class="m">4</span><span class="p">,</span> <span class="p">[]),</span> <span class="n">bucket</span><span class="p">,</span> <span class="n">depth</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'><span class="k">  </span><span class="ss">:lists</span><span class="o">.</span><span class="n">foldl</span> <span class="k">fn</span> <span class="n">member</span><span class="p">,</span> <span class="n">new_node</span> <span class="o">-&gt;</span>
</span><span class='line'>    <span class="n">position_in_tuple</span> <span class="o">=</span> <span class="n">bucket_nth_index</span><span class="p">(</span><span class="n">member</span><span class="p">,</span> <span class="n">depth</span><span class="p">)</span>
</span><span class='line'>    <span class="n">set_elem</span><span class="p">(</span><span class="n">new_node</span><span class="p">,</span> <span class="n">position_in_tuple</span><span class="p">,</span> <span class="n">bucket_put</span><span class="p">(</span><span class="n">elem</span><span class="p">(</span><span class="n">new_node</span><span class="p">,</span> <span class="n">position_in_tuple</span><span class="p">),</span> <span class="n">member</span><span class="p">))</span>
</span><span class='line'>  <span class="k">end</span><span class="p">,</span> <span class="n">new_node</span><span class="p">,</span> <span class="n">bucket</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Finally add the new set member into the Trie</h4>

<p><img alt="bucket to trie" src="http://josephwilk.github.io/images/trie_step3.png"/></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
</pre></td><td class='code'><pre><code class='elixir'><span class='line'><span class="c1"># Base case. We have found the right bucket, just insert the new member into it.</span>
</span><span class='line'><span class="k">defp</span> <span class="n">node_put</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="m">0</span><span class="p">,</span> <span class="n">member</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'><span class="k">  </span><span class="n">position</span> <span class="o">=</span> <span class="n">bucket_index</span><span class="p">(</span><span class="n">member</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span> <span class="n">new</span><span class="p">,</span> <span class="n">count</span> <span class="p">}</span> <span class="o">=</span> <span class="n">bucket_put</span><span class="p">(</span><span class="n">elem</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="n">position</span><span class="p">),</span> <span class="n">member</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span> <span class="n">set_elem</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="n">position</span><span class="p">,</span> <span class="n">new</span><span class="p">),</span> <span class="n">count</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># Recursive case. Keeping trying to find the right bucket.</span>
</span><span class='line'><span class="k">defp</span> <span class="n">node_put</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="n">depth</span><span class="p">,</span> <span class="n">member</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'><span class="k">  </span><span class="n">position</span> <span class="o">=</span> <span class="n">bucket_index</span><span class="p">(</span><span class="n">member</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span> <span class="n">new</span><span class="p">,</span> <span class="n">count</span> <span class="p">}</span> <span class="o">=</span> <span class="n">node_put</span><span class="p">(</span><span class="n">elem</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="n">position</span><span class="p">),</span> <span class="n">depth</span> <span class="o">-</span> <span class="m">1</span><span class="p">,</span> <span class="n">bucket_next</span><span class="p">(</span><span class="n">hash</span><span class="p">),</span> <span class="n">member</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span> <span class="n">set_elem</span><span class="p">(</span><span class="n">node</span><span class="p">,</span> <span class="n">position</span><span class="p">,</span> <span class="n">new</span><span class="p">),</span> <span class="n">count</span> <span class="p">}</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># The bucket index of this member</span>
</span><span class='line'><span class="k">defp</span> <span class="n">bucket_index</span><span class="p">(</span><span class="n">member</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'><span class="k">  </span><span class="n">node_bitmap</span> <span class="o">=</span> <span class="m">0b0011</span>
</span><span class='line'>  <span class="n">hash</span> <span class="o">=</span> <span class="ss">:erlang</span><span class="o">.</span><span class="n">phash2</span><span class="p">(</span><span class="n">member</span><span class="p">)</span>
</span><span class='line'>  <span class="n">hash</span> <span class="o">&amp;&amp;</span><span class="err">&amp;</span> <span class="n">node_bitmap</span>
</span><span class='line'><span class="k">end</span>
</span><span class='line'>
</span><span class='line'><span class="c1"># The bucket index of this element with depth + 1.</span>
</span><span class='line'><span class="k">defp</span> <span class="n">bucket_next</span><span class="p">(</span><span class="n">member</span><span class="p">)</span> <span class="k">do</span>
</span><span class='line'><span class="k">  </span><span class="n">node_shift</span> <span class="o">=</span> <span class="m">2</span>
</span><span class='line'>  <span class="n">hash</span> <span class="o">=</span> <span class="ss">:erlang</span><span class="o">.</span><span class="n">phash2</span><span class="p">(</span><span class="n">member</span><span class="p">)</span>
</span><span class='line'>  <span class="n">hash</span> <span class="o">&gt;&gt;&gt;</span> <span class="n">node_shift</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Notice while we have a more complicated data structure with a trie the leaves are always plain old buckets. Hence insertion with a trie is a case of finding the right bucket and then just reusing our <code>bucket_put</code> function. Beautiful and fast :)</p>

<h4>Tries expanding into deeper Tries</h4>

<p>Things get a little more complicated with multi depth tries. If you are interested digging more into the implementation you can see all the <a href="https://github.com/elixir-lang/elixir/blob/master/lib/elixir/lib/hash_set.ex">source code of HashSet</a> on Github.</p>

<h2>Contraction</h2>

<p>We can also remove elements from a set so in much the same as we expanded we have to contract the internal representation of the set.</p>

<h1>Performance Benchmarks</h1>

<p>Here is some sample data comparing Erlang sets to Elixir Sets. Smaller is better.</p>

<p><img alt="HashSet vs :sets" src="http://josephwilk.github.io/images/sets_vs_hashset.png"/></p>

<p>The benchmark scripts are on github (<a href="https://gist.github.com/josephwilk/5808525">https://gist.github.com/josephwilk/5808525</a>) if you are interested in running them yourself.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Isolating external dependencies in Clojure]]></title>
    <link href="http://josephwilk.github.io/clojure/isolating-external-dependencies-in-clojure.html"/>
    <updated>2013-06-08T12:00:00+01:00</updated>
    <id>http://josephwilk.github.io/clojure/isolating-external-dependencies-in-clojure</id>
    <content type="html"><![CDATA[<p>Isolating external dependencies helps make testing easier. We can focus on a specific unit of code and we can avoid slow tests calling real services or databases.</p>

<p>Clojure provides many different ways of achieving isolation. Lets explore what&rsquo;s possible:</p>

<h2>Redefining functions</h2>

<p>We can redefine vars and hence functions in a limited scope with <a href="http://clojuredocs.org/clojure_core/clojure.core/with-redefs">with-redefs</a></p>

<p>The documentation suggests its usefulness in testing:</p>

<blockquote><p>Useful for mocking out functions during testing.</p></blockquote>

<p>Lets look at an example where we want to isolate a function that logs to file:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">log-fn</span> <span class="p">[]</span> <span class="o">#</span><span class="p">(</span><span class="nf">spit</span> <span class="s">&quot;report.xml&quot;</span> <span class="nv">%</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">log</span> <span class="p">[</span><span class="nv">string</span><span class="p">]</span> <span class="p">((</span><span class="nf">log-fn</span><span class="p">)</span> <span class="nv">string</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>And the test removing the dependency on the filesytem:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">with-redefs</span> <span class="p">[</span><span class="nv">log-fn</span> <span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">data</span><span class="p">]</span> <span class="nv">data</span><span class="p">)]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">log</span> <span class="s">&quot;hello&quot;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Its important to note that <code>with-redefs</code> are visible in <em>all threads</em> and it does not play well with concurrency:</p>

<blockquote><p>with-redefs can permanently change a var if applied concurrently:</p></blockquote>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">ten-sixty-six</span> <span class="p">[]</span> <span class="mi">1066</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nb">doall </span>
</span><span class='line'>  <span class="p">(</span><span class="nf">pmap</span> <span class="o">#</span><span class="p">(</span><span class="nf">with-redefs</span> <span class="p">[</span><span class="nv">ten-sixty-six</span> <span class="p">(</span><span class="k">fn </span><span class="p">[]</span> <span class="nv">%</span><span class="p">)]</span> <span class="p">(</span><span class="nf">ten-sixty-six</span><span class="p">))</span>
</span><span class='line'>        <span class="p">(</span><span class="nb">range </span><span class="mi">20</span> <span class="mi">100</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">ten-sixty-six</span><span class="p">)</span> <span class="c1">; =&gt; 49 Ouch!</span>
</span></code></pre></td></tr></table></div></figure>


<p>The parallel redefs conflict with each other when setting back the var to its original value.</p>

<p>Another option is <a href="http://clojuredocs.org/clojure_core/clojure.core/alter-var-root">alter-var-root</a> which globally redefines a var and hence a function. <code>alter-var-root</code> can alter functions in other namespaces.</p>

<p>Writing our test to use <code>alter-var-root</code>:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">alter-var-root</span>
</span><span class='line'> <span class="p">(</span><span class="k">var </span><span class="nv">log-fn</span><span class="p">)</span>
</span><span class='line'> <span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">real-fn</span><span class="p">]</span> <span class="c1">; We are passed the function we are about to stub.</span>
</span><span class='line'>   <span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">data</span><span class="p">]</span> <span class="p">(</span><span class="nb">println </span><span class="nv">data</span><span class="p">))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Its important to note we have to reset the var if we want to restore the system to its previous state for other tests.</p>

<h3>Redefining Dynamic Vars</h3>

<p>Using dynamic vars we can rebind the value and hence we can use this as an injection point. Again if we can rebind vars we can rebind functions. Note though that we have to mark those functions as dynamic:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="c1">;The real http request</span>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="o">^</span><span class="ss">:dynamic</span> <span class="nv">http-get-request</span> <span class="p">[</span><span class="nv">url</span><span class="p">]</span> <span class="nv">http/get</span> <span class="nv">url</span><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nb">get </span><span class="p">[</span><span class="nv">url</span><span class="p">]</span> <span class="p">(</span><span class="nf">http-get-request</span> <span class="p">[</span><span class="nv">url</span><span class="p">]))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">fake-http-get</span> <span class="p">[</span><span class="nv">url</span><span class="p">]</span> <span class="s">&quot;{}&quot;</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nf">fact</span> <span class="s">&quot;make a http get request&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nb">binding </span><span class="p">[</span><span class="nv">http-get-request</span> <span class="nv">fake-http-get</span><span class="p">]</span>
</span><span class='line'>    <span class="p">(</span><span class="nb">get </span><span class="s">&quot;/some-resource&quot;</span><span class="p">))</span> <span class="nv">=&gt;</span> <span class="s">&quot;{}&quot;</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Unlike <code>alter-var-root</code> and <code>with-redefs</code> dynamic vars are bound at a thread-local level. So the stubbings would only be visible in that thread. Which makes this safe for tests being run concurrently!</p>

<h3>Atoms &amp; Refs (Global vars in disguise)</h3>

<p>While insidious, evil, malicious and ugly we could use atom or refs to contain a dependency.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">cache</span> <span class="p">(</span><span class="nf">atom</span> <span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">method</span>, <span class="o">&amp;</span> <span class="nv">args</span><span class="p">]</span> <span class="p">(</span><span class="nb">apply </span><span class="p">(</span><span class="nb">resolve </span><span class="p">(</span><span class="nb">symbol </span><span class="p">(</span><span class="nb">str </span><span class="s">&quot;memcache/&quot;</span> <span class="nv">method</span><span class="p">)))</span> <span class="nv">args</span><span class="p">))))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nb">get </span><span class="p">[</span><span class="nv">key</span><span class="p">]</span> <span class="p">(</span><span class="err">@</span><span class="nv">cache</span> <span class="nb">get </span><span class="nv">key</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>And in our test:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">reset!</span> <span class="nv">cache</span> <span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">method</span>, <span class="o">&amp;</span> <span class="nv">args</span><span class="p">]</span> <span class="p">(</span><span class="nb">apply </span><span class="p">(</span><span class="nb">resolve </span><span class="p">(</span><span class="nb">symbol </span><span class="p">(</span><span class="nb">str </span><span class="s">&quot;fake-cache/&quot;</span> <span class="nv">method</span><span class="p">)))</span> <span class="nv">args</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Yuck, lets never speak of that again.</p>

<h3>Midje</h3>

<p>The <a href="https://github.com/marick/Midje">Midje</a> testing framework provides stubbing methods through <code>provided</code>. In the core of Midje this uses our previously visited <code>alter-var-root</code>.</p>

<p>Lets see how our example would look using Midje:</p>

<p>The code:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">log-fn</span> <span class="p">[]</span> <span class="o">#</span><span class="p">(</span><span class="nf">spit</span> <span class="s">&quot;report.xml&quot;</span> <span class="nv">%</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">log</span> <span class="p">[</span><span class="nv">string</span><span class="p">]</span> <span class="p">((</span><span class="nf">log-fn</span><span class="p">)</span> <span class="nv">string</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>And our test that uses <code>provided</code>:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">fact</span> <span class="s">&quot;it should spit out strings&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">log</span> <span class="s">&quot;hello&quot;</span><span class="p">)</span> <span class="nv">=&gt;</span> <span class="s">&quot;hello&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">provided</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">log-fn</span><span class="p">)</span> <span class="nv">=&gt;</span> <span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">data</span><span class="p">]</span> <span class="nv">data</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Its important to note that the <code>provided</code> is scoped in effect. It is only active during the form before the Midje &ldquo;=>&rdquo; assertion arrow.</p>

<p>Conceptually think of it like this:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">provided</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">log-fn</span><span class="p">)</span> <span class="nv">=&gt;</span> <span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">data</span><span class="p">]</span> <span class="p">(</span><span class="nb">println </span><span class="nv">data</span><span class="p">))</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">captured-output</span> <span class="p">(</span><span class="nf">log</span> <span class="s">&quot;hello&quot;</span><span class="p">)))</span> <span class="nv">=&gt;</span> <span class="p">(</span><span class="nf">contains</span> <span class="s">&quot;hello&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Flexibility</h4>

<p>Midjes <code>provided</code> gives very fine grained control of when a stub is used:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">do</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">log</span> <span class="s">&quot;mad hatter&quot;</span><span class="p">)</span>   <span class="c1">;will use the stub</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">log</span> <span class="s">&quot;white rabbit&quot;</span><span class="p">)</span> <span class="c1">;will not use the stub</span>
</span><span class='line'><span class="p">)</span>
</span><span class='line'><span class="p">(</span><span class="nf">provided</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">log</span> <span class="s">&quot;mad hatter&quot;</span><span class="p">)</span> <span class="nv">=&gt;</span> <span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">data</span><span class="p">]</span> <span class="p">(</span><span class="nb">println </span><span class="nv">data</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>And we can go further and define argument matcher functions giving huge flexibility in when a stub should be run.</p>

<h4>Safety</h4>

<p>Midje validates your stubs and checks your not doing anything too crazy which would fundamentally break everything.</p>

<h2>Higher order functions</h2>

<p>We can isolate dependencies by passing in functions which wrap that dependency. This abstracts the details of the dependency and provides a point where we can inject our own functions which bypasses the dependency.</p>

<p>For example:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">extract-urn</span> <span class="p">[</span><span class="nv">data</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="k">let </span><span class="p">[</span><span class="nv">urn-getter</span> <span class="o">#</span><span class="p">(</span><span class="ss">:urn</span> <span class="nv">data</span><span class="p">)]</span>
</span><span class='line'> <span class="p">(</span><span class="nf">do-it</span> <span class="nv">urn-getter</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>In our tests:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'>  <span class="p">(</span><span class="nf">do-it</span> <span class="p">(</span><span class="k">fn </span><span class="p">[]</span> <span class="mi">10</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>Simple and beautiful.</p>

<h2>Substituting namespaces</h2>

<p>We can switch the namespace that a block of functions are evaluated in. Hence we can swap in a completely new implementation (such as a fake) by changing the namespace.</p>

<p>An example faking out a key value store:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">get-it</span> <span class="p">[</span><span class="nv">arg</span> <span class="o">&amp;</span> <span class="p">[</span><span class="nv">namespace</span><span class="p">]]</span>
</span><span class='line'>  <span class="p">((</span><span class="nb">ns-resolve </span><span class="p">(</span><span class="nb">or namespace </span><span class="nv">*ns*</span><span class="p">)</span> <span class="ss">&#39;get</span><span class="p">)</span> <span class="nv">arg</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>A fake implementation of this service:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">ns </span><span class="nv">test.cache.fake</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="k">def </span><span class="nv">cache</span> <span class="p">(</span><span class="nf">atom</span> <span class="p">{}))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nb">get </span><span class="p">[</span><span class="nv">arg</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="err">@</span><span class="nv">cache</span> <span class="nv">arg</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">put</span> <span class="p">[</span><span class="nv">arg</span> <span class="nv">value</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">reset!</span> <span class="err">@</span><span class="nv">cache</span> <span class="p">(</span><span class="nb">assoc </span><span class="err">@</span><span class="nv">cache</span> <span class="nv">arg</span> <span class="nv">value</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>And our test:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">fact</span> <span class="s">&quot;it should do something useful&quot;</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">get-it</span> <span class="s">&quot;1234&quot;</span> <span class="ss">&#39;test.cache.fake</span><span class="p">)</span> <span class="nv">=&gt;</span> <span class="s">&quot;1234&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>Alternatively if we don&rsquo;t want the mess of injecting new namespaces into our functions we could change namespace aliases to achieve the same effect:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">ns </span><span class="nv">example</span>
</span><span class='line'>  <span class="p">(</span><span class="ss">:require</span> <span class="p">[</span><span class="nv">cache.memcache</span> <span class="ss">:as</span> <span class="nv">memcache</span><span class="p">]))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">when </span><span class="p">(</span><span class="nb">= </span><span class="p">(</span><span class="nf">System/getenv</span> <span class="s">&quot;ENV&quot;</span><span class="p">)</span> <span class="s">&quot;TEST&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">ns-unalias</span> <span class="ss">&#39;example</span> <span class="ss">&#39;memcache</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">require</span> <span class="ss">&#39;test.cache.fake</span><span class="p">)</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">alias</span> <span class="ss">&#39;memcache</span> <span class="ss">&#39;test.cache.fake</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nb">get </span><span class="p">[</span><span class="nv">arg</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">memcache/get</span> <span class="nv">arg</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="c1">; ...</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="nb">when </span><span class="p">(</span><span class="nb">= </span><span class="p">(</span><span class="nf">System/getenv</span> <span class="s">&quot;ENV&quot;</span><span class="p">)</span> <span class="s">&quot;TEST&quot;</span><span class="p">)</span>
</span><span class='line'>  <span class="c1">;Cleanup our rebinding of memcache alias</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">ns-unalias</span> <span class="ss">&#39;memcache</span> <span class="ss">&#39;example</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>When running our tests we mutate the behaviour of the system by setting the ENV environment variable to TEST.</p>

<h2>Runtime Polymorphism</h2>

<p>Switch behaviour based on a the type of an argument. During testing we can inject a specific type which will behave differently from the real system.</p>

<p>Clojure gives us <a href="http://clojure.org/protocols">protocols</a> and <a href="http://clojure.org/multimethods">multimethods</a> to achieve this:</p>

<h3>Protocols</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="ss">:require</span> <span class="p">[[</span><span class="nv">fake-service</span> <span class="ss">:as</span> <span class="nv">fake</span><span class="p">]</span>
</span><span class='line'>           <span class="p">[</span><span class="nv">service</span>      <span class="ss">:as</span> <span class="nv">service</span><span class="p">]])</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defprotocol </span><span class="nv">Service</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">do-get</span> <span class="p">[</span><span class="nv">this</span> <span class="nv">arg</span><span class="p">]))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">deftype </span><span class="nv">FakeService</span> <span class="p">[]</span>
</span><span class='line'>  <span class="nv">Service</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">do-get</span> <span class="p">[</span><span class="nv">this</span> <span class="nv">arg</span><span class="p">]</span> <span class="p">(</span><span class="nf">fake/do-get</span> <span class="nv">arg</span><span class="p">)))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">deftype </span><span class="nv">RealService</span> <span class="p">[]</span>
</span><span class='line'>  <span class="nv">Service</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">do-get</span> <span class="p">[</span><span class="nv">this</span> <span class="nv">arg</span><span class="p">]</span> <span class="p">(</span><span class="nf">service/do-get</span> <span class="nv">arg</span><span class="p">)))</span>
</span></code></pre></td></tr></table></div></figure>


<p>And in our test:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">do-get</span> <span class="p">(</span><span class="nf">FakeService.</span><span class="p">)</span> <span class="s">&quot;cheshire&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Multimethods</h3>

<p>Similar we can use the type of arguments to indicate different behaviour.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="ss">:require</span> <span class="p">[[</span><span class="nv">fake-service</span> <span class="ss">:as</span> <span class="nv">fake</span><span class="p">]</span>
</span><span class='line'>           <span class="p">[</span><span class="nv">service</span>      <span class="ss">:as</span> <span class="nv">service</span><span class="p">]])</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defmulti </span><span class="nv">do-get</span> <span class="p">(</span><span class="k">fn </span><span class="p">[</span><span class="nv">service</span> <span class="nv">param</span><span class="p">]</span> <span class="p">[(</span><span class="ss">:Service</span> <span class="nv">service</span><span class="p">)</span> <span class="nv">param</span><span class="p">]))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defmethod </span><span class="nv">do-get</span> <span class="p">[</span><span class="ss">:FakeService</span><span class="p">]</span> <span class="p">[</span><span class="nv">service</span> <span class="nv">param</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">fake/do-get</span> <span class="nv">param</span><span class="p">))</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span><span class="kd">defmethod </span><span class="nv">do-get</span> <span class="p">[</span><span class="ss">:RealService</span><span class="p">]</span> <span class="p">[</span><span class="nv">service</span> <span class="nv">param</span><span class="p">]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">service/do-get</span> <span class="nv">param</span><span class="p">))</span>
</span></code></pre></td></tr></table></div></figure>


<p>And in our test:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="nf">do-get</span> <span class="p">(</span><span class="nf">FakeService.</span><span class="p">)</span> <span class="s">&quot;rabbit&quot;</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Defining functions at Runtime</h2>

<p>Using environment variables its possible to switch what functions are defined at runtime. <code>def</code> always defines a method at the top level of a namespace.</p>

<p>Here is an example inspired from Midje&rsquo;s source code:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="kd">defn </span><span class="nv">init!</span> <span class="p">[]</span>
</span><span class='line'>  <span class="p">(</span><span class="nf">case</span> <span class="p">(</span><span class="nf">System/getenv</span> <span class="s">&quot;ENV&quot;</span><span class="p">)</span>
</span><span class='line'>    <span class="s">&quot;TEST&quot;</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">do</span>
</span><span class='line'>      <span class="p">(</span><span class="k">def </span><span class="nb">get </span><span class="p">[</span><span class="nv">key</span><span class="p">]</span>       <span class="p">(</span><span class="nf">fake/get</span> <span class="nv">key</span><span class="p">))</span>
</span><span class='line'>      <span class="p">(</span><span class="k">def </span><span class="nb">set </span><span class="p">[</span><span class="nb">key </span><span class="nv">value</span><span class="p">]</span> <span class="p">(</span><span class="nf">fake/set</span> <span class="nb">key </span><span class="nv">value</span><span class="p">))</span>
</span><span class='line'>    <span class="c1">;; else</span>
</span><span class='line'>    <span class="p">(</span><span class="nf">do</span>
</span><span class='line'>      <span class="p">(</span><span class="k">def </span><span class="nb">get </span><span class="p">[</span><span class="nv">key</span><span class="p">]</span>       <span class="p">(</span><span class="nf">memcache/get</span> <span class="nv">key</span><span class="p">))</span>
</span><span class='line'>      <span class="p">(</span><span class="k">def </span><span class="nb">set </span><span class="p">[</span><span class="nb">key </span><span class="nv">value</span><span class="p">]</span> <span class="p">(</span><span class="nf">memcache/set</span> <span class="nb">key </span><span class="nv">value</span><span class="p">))))))</span>
</span></code></pre></td></tr></table></div></figure>


<p>We would run our tests with <code>ENV=test lein test</code>.</p>

<h1>How should I isolate dependencies in Clojure?</h1>

<p>Having explored what we can do, what should we do?</p>

<p>There are a number of choices and a lot depends on you&rsquo;re programming and testing style:</p>

<h3>The Purest form of isolation</h3>

<p>Passing a function, functions that wrap our dependencies means we do not have to mutate the code under test. This is the ideal form of isolating. This is where we want to be.</p>

<p>But sometimes either aesthetics or control might make us look elsewhere.</p>

<p>Functions with many parameters can become ugly and cumbersome to use.</p>

<p>Using external libraries where we cannot have design the way we want it (though we can try by wrapping the heck out of any library).</p>

<p>Finally integration tests are hard if not impossible to do with this form of dependency isolation.</p>

<h3>The Aesthetic small touch form of isolation</h3>

<p><code>var-alter-root</code> is (very) scary, but the guard rails of Midje make it an easy way to isolate dependencies. It also supports flexibility in how we stub functions based on the arguments they are called with (or completely ignore the arguments). This flexibility is extremely powerful and is a big plus for Midjes <code>provided</code>.</p>

<p>The danger ever present with this form of isolation is ignoring your tests telling you about a problem in your design.</p>

<h3>The Simple small touch form of isolation</h3>

<p>While Midje provides lots of power and flexibly it does so at the cost of slightly awkward syntax and a lot of crazy macros (I say this having stared into the heart of Midje). For example parallel functions do not work with <code>provided</code>.</p>

<p><code>with-redefs</code>, <code>binding</code> and <code>var-alter-root</code> provide flexibly to handle different testing scenarios. and no prior knowledge of an external tool is required.</p>

<p>If you don&rsquo;t need the power of Midje or fear its complexity you can happily use nothing but Clojure&rsquo;s standard library. Maybe you will even learn something about how Clojure works!</p>

<h3>The Java small touch form of isolation.</h3>

<p>Since Clojure supports java interop its always possible to fall back to using Java, OO and dependency injection. If you love Java, this is a good path.</p>

<h3>The Crazy Large touch form of isolation</h3>

<p>Namespace switching is a shortcut to having to stub out every single method. In one sweep we redefine all the functions of a namespace. This might be more useful for integration tests than unit tests.</p>

<p>That shortcut does come at a cost, we still have to maintain our fake ns every time something changes in the real namespace and our production code is left wrapped in <code>ns-resolve</code> or a ugly switch based on Environment settings. Ugly!</p>

<p>I don&rsquo;t recommend using this form of isolation regularly but in edge cases it can be very convenient, though people will still think you are crazy.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A developers guide to creating presentations]]></title>
    <link href="http://josephwilk.github.io/presentations/a-developers-guide-to-creating-presentations.html"/>
    <updated>2012-12-19T14:58:12+00:00</updated>
    <id>http://josephwilk.github.io/presentations/a-developers-guide-to-creating-presentations</id>
    <content type="html"><![CDATA[<p>So your talk got selected. Great!</p>

<p>Oh Crap! Now hits the panic, you have to actually create a presentation.</p>

<p>Every presenter wants to give the best possible presentation they can that sticks in peoples minds.</p>

<p>Here are some hard earned lessons for getting the best out of your presentation.</p>

<h3>Accept that most of our preconceptions of how we learn are wrong.</h3>

<p>Forget those high information dense, black and white¬†acetate¬†slides with professors¬†droning¬†on about solving the towers of Hanoi while you scribble your own notes while downing your fifth coffee.</p>

<blockquote><p>&ldquo;Attending a lecture is a passive experience for the student.¬†Of all teaching events, the lecture is most likely to promote¬†<a href="http://www.learningandteaching.info/teaching/groups_bad.htm">basic assumption dependence</a> and sleep&rdquo;</p></blockquote>

<p><a href="http://www.dailyprincetonian.com/2009/10/15/24142/"><img src="http://josephwilk.github.io/images/blog/2012/12/jmontalb_sleep-massive-300x219.png" alt="" /></a></p>

<p><a href="http://www.dailyprincetonian.com/2009/10/15/24142/">http://www.dailyprincetonian.com/2009/10/15/24142/</a></p>

<h3><strong>The good news</strong></h3>

<p>That does not mean you cannot give a super dense, deeply detailed presentation. It means if you want people to get the most out of your presentation you need to think outside a boring lecture.¬†Luckily¬†Fun, humor, creativity, color, interaction, invoking¬†emotions are a key part of helping people learn effectively. Think back to your favourite teacher, why were they your favourite? I&rsquo;m guessing they introduced some of those things in their teaching.</p>

<h2>Creating a presentation</h2>

<p>Lets look at some general ideas to help make your presentation great:</p>

<h3>1. Dedicate time</h3>

<p>Creating a presentation, content, theme, styling, finding pictures, practicing all take time. As you get better you can speed up and hone your tactics for presentations.</p>

<p>My first presentation took 3 months. Make sure you start early and give yourself enough time!</p>

<h3>2. Research the current state of the art</h3>

<p>Doing a talk on¬†Continuous¬†Deployment? Search for every Continuous¬†Deployment¬†presentation that¬†has been given. Watch them all, steal the good ideas and throw away the bad. Try and make sure you are saying something new or presenting a different slant on the topic.</p>

<ul>
<li><p><a href="http://www.confreaks.com/videos">Confreaks</a> &ndash; presentation videos</p></li>
<li><p><a href="https://speakerdeck.com/">Speaker Deck</a> &ndash; Presentations</p></li>
</ul>


<h3>3. Don&rsquo;t be on your own</h3>

<p>Experienced¬†speakers have developed a¬†repertoire¬†of little tricks, ideas and thoughts for presentations. They have also sat through a lot of presentations and have good experience of being the audience. Don&rsquo;t be shy finding someone who has spoken before for some advice, even finding someone who would be happy to be your mentor.</p>

<p>If nothing else watch some of the most popular speakers on¬†<a href="http://www.confreaks.com/videos">Confreaks</a> and see what tricks/styles they use.</p>

<p>Conferences are not very good at helping get the best out of you when it comes to creating your talk.¬†Once your talk is submitted and accepted you are often left on your own until the day of your talk. I believe this is something¬†fundamentally¬†broken with conferences today. Realise this and find someone to be your mentor.</p>

<h3>4. Practice frees the subconscious</h3>

<p>Practicing a presentation is an important part of getting better and more confident at giving presentations. Practice¬†wherever¬†and whenever you can, at work, at your local meetup and in the shower (yes I&rsquo;ve done this). Don&rsquo;t forget you are not learning if you don&rsquo;t get feedback from your audience.</p>

<p>There is however another secret reason to practice.</p>

<p>When you know a presentation and are confident in giving it you become freer to improvise, to play to the crowd, to react to the room. Your mind is no longer concerned with messing it up, its free to improvise and be creative. Understand what I mean? Watch any of <a href="http://www.confreaks.com/videos/374-rubyconf2010-the-polite-programmer-s-guide-to-ruby-etiquette">Jim Weirich talks</a>.</p>

<h3>5. Borrow confidence from the Samurais</h3>

<p>The hard truth is its easier to pay attention to someone who seems confident about what they are saying than someone who is very nervous. There is an old and¬†secret¬†trick I learnt to calm nerves before a presentation:</p>

<blockquote><p>&ldquo;When faced with a crisis, if one puts some spittle on his earlobe and exhales deeply through his¬†nose, he will overcome anything at hand. This is a secret matter.&rdquo;</p></blockquote>

<p>Bushido: The Way of the Samurai</p>

<p><img src="http://josephwilk.github.io/images/blog/2012/12/bushido-300x246.jpg" alt="" /></p>

<p>While it sounds a little silly, I found this trick to be very useful. It gives you something to focus on to calm¬†yourself, a ritual with which you find a sense of comfort and deeply breathing is a well know way of increasing oxygen to reduce stress.</p>

<h3>6. Talk to your audience</h3>

<p>If you want to engage your audience you need to talk to them, not your notes or your laptop. Look around the audience as you speak.¬†This engenders engagement with the whole audience, eye contact draws us into a conversation and draws the audience into your story.</p>

<p>Going further always try and remove any¬†obstacles¬†between you and the audience like those pesky¬†lecterns¬†or table. You want the audience to connect with you and associate you as one of them. This can help encourage people to listen to what you have to say. Barriers create a¬†separation¬†between you and the audience, and while that can be overcome why add the challenge in the first place.</p>

<h3>7. Time</h3>

<p>If you have a 40 minute slot for talking, you do not have to fill it. In fact most peoples attention span dips massively towards that figure. Personally I believe 30 minutes is the sweet spot for a presentation. Though you should not feel pressured to pad your talk. Use what time you need to get your point across in the most concise way you can.</p>

<h3>8. The final curtain, end you presentation</h3>

<p>The end of the presentation is one of the most powerful moments to set the mood of the room and help fire the¬†discussion¬†in the after talk chit chat. You have done all the hard work to get here, don&rsquo;t wimper out with a quiet &ldquo;thats all&rdquo; or a jarring quick finish.</p>

<p><img src="http://josephwilk.github.io/images/blog/2012/12/curtain-300x225.jpg" alt="" /></p>

<p>You want too leave a short summary of the ideas of your presentation, big questions the audience can discuss afterwards. The best presentations leave the room alive with discussions.</p>

<h2>Creating your slides</h2>

<p>Now lets take a deeper look at some ideas to help you create great slides:</p>

<h3>1. Learn your tools</h3>

<p>You know your developers tools right? Spend any time practicing and getting sharper with your IDE?</p>

<p>If you want to make great presentations you have to invest time in mastering your presentation tools.</p>

<p>Have you ever watched the Keynote tutorials? How about spending an hour playing with animations and find out whats possible. Why not look and see what is possible with presentation tools from¬†<a href="https://speakerdeck.com/">watching other peoples talks.</a></p>

<h3>2. Shape first, design later</h3>

<p>Before getting too caught up in making your slides beautiful and full of pictures of cats, first think out the flow, order and shape of your presentation. A good presentation has a natural flow where each slide leads into the other.</p>

<p>I usually start first by brain storming all the ideas I have about a presentation on sticky notes. No need for each sticky to contain exact details, just words, ideas or thoughts.¬†Leaving a mass of mess on the wall.</p>

<p><a href="http://josephwilk.github.io/images/blog/2012/12/post-it-mess.jpg"><img src="http://josephwilk.github.io/images/blog/2012/12/post-it-mess-225x300.jpg" alt="" /></a></p>

<p>Then on another wall try and extract a story putting the stickies into a beginning, middle and end</p>

<p><img src="http://josephwilk.github.io/images/blog/2012/12/cards.jpeg" alt="" /></p>

<h3>3. Deviate from the default</h3>

<p>Keynote and Powerpoint¬†provide¬†lots of nice default (boring) themes. Default themes are good way to knock something together quickly. But if you use a default theme its hard¬†to stand out from the crowd.</p>

<p><img src="http://josephwilk.github.io/images/blog/2012/11/Screen-Shot-2012-11-21-at-14.30.17-300x227.png" alt="" /></p>

<p>Do you want your presentation to stand out and be memorable?¬†Do you want people leaving your presentation remembering the funny use of¬†star wars¬†Lego characters.</p>

<h3>4. Experiment with design</h3>

<p>Don&rsquo;t be afraid to play around with the design of your slides. Experiment lots until you start to like what you have. I spend the most time on the first slide and I usually have hundreds of different designs until I&rsquo;m happy.</p>

<p><img src="http://josephwilk.github.io/images/blog/2012/12/Screen-Shot-2012-12-17-at-20.14.50.png" alt="" /><img src="http://josephwilk.github.io/images/blog/2012/12/Screen-Shot-2012-12-17-at-20.12.491.png" alt="" /><img src="http://josephwilk.github.io/images/blog/2012/12/Screen-Shot-2012-12-17-at-20.13.01.png" alt="" /><img src="http://josephwilk.github.io/images/blog/2012/12/Screen-Shot-2012-12-17-at-20.13.59.png" alt="" /><img src="http://josephwilk.github.io/images/blog/2012/12/Screen-Shot-2012-12-17-at-20.14.29.png" alt="" /><img src="http://josephwilk.github.io/images/blog/2012/12/Screen-Shot-2012-12-17-at-20.14.15.png" alt="" /></p>

<h3>5. ¬†Pick an original theme</h3>

<p>Pick a theme/style for your presentation. Try and choose a theme that has¬†sufficient¬†material so you can find lots of pictures.¬†Look to other peoples presentations for ideas.</p>

<p>Examples:</p>

<h4>Street art</h4>

<p><img src="http://josephwilk.github.io/images/blog/2012/03/Screen-Shot-2012-03-06-at-17.06.40-300x225.png" alt="" /></p>

<h4>Tv Programs / Mad Men</h4>

<h3><img src="http://josephwilk.github.io/images/blog/2012/03/Screen-Shot-2012-03-06-at-17.03.201-300x224.png" alt="" /></h3>

<h4>Silent Movies</h4>

<p><img src="http://josephwilk.github.io/images/blog/2012/03/Screen-Shot-2012-03-06-at-17.01.26-300x224.png" alt="" /></p>

<h3>6. Kill them with your first slide</h3>

<p>Your very first slide will probably be looked at longer than any of your other slides. You want to immediately capture the audiences attention and excite them. Show them how you are going to tell them the story of your presentation, introducing your theme.</p>

<p>Which of these first slides would most engage you?</p>

<p><img src="http://josephwilk.github.io/images/blog/2012/03/Screen-Shot-2012-03-06-at-16.36.16.png" alt="" /><img src="http://josephwilk.github.io/images/blog/2012/03/Screen-Shot-2012-03-06-at-16.33.17.png" alt="" /></p>

<h3>7. Fonts make the theme</h3>

<p><img src="http://josephwilk.github.io/images/blog/2012/03/Screen-Shot-2012-03-06-at-16.25.03.png" alt="" /></p>

<p>Default fonts can work in a presentation if you have little text on the slide or you have very powerful images/colours. If you want to make your presentation standout try different fonts. There are¬†<a href="http://www.dafont.com/">thousands of readable fonts free to download</a>. Explore which ones work for your presentation and your theme.</p>

<p>For example this slide uses a font which fits very well with its DIY/tools theme:</p>

<p><img src="http://josephwilk.github.io/images/blog/2012/11/Screen-Shot-2012-11-21-at-14.32.31-300x225.png" alt="" /></p>

<p>Always remember to pick a font that does not compromise the readability of your content. Use that font consistently throughout your whole presentation.</p>

<h3>8. Live and die by your theme</h3>

<p>Maintain consistency of your theme throughout. The more daring and¬†original¬†the theme the harder it can be to find media. With great risk can come great reward.</p>

<h3>9. Invest time or money into images</h3>

<p>There are two paths to great images that help make your presentation stand out.</p>

<p><strong>Buy images</strong></p>

<p><strong> </strong>On average I spend ¬£100 per presentation on buying images (Mostly on¬†<a href="http://www.istockphoto.com">http://www.istockphoto.com</a>). That is one of my key secrets for standing out in a presentation. Spending money buys you great, high resolution and original images.</p>

<p><strong>Hunt or create images</strong></p>

<p>There are lots of free sources of images on the Internet such as <a href="http://www.flickr.com/">flickr</a>. It can take more time to hunt around and find the right images but its possible. Or create your own images to give your presentation that personal, unique touch.</p>

<h3>10. Minimalism is king with content</h3>

<p>When we first start a presentation we often overfill the slides with content. It makes sense as we are thinking out what we are going to talk about. ¬†As you practice your presentation, slowly that content sinks into your brain (or your notes) allowing you to ween out as much content as possible from the slides. Leaving the¬†minimal¬†possible text on the slide. The audience is left listening to you rather than trying to read overly detailed, complex slides.</p>

<h3>Anti-patterns of presentations</h3>

<p>There are some common anti-patterns in presentations. Lets look at some with examples:</p>

<h3>1.¬†Bullet points of death</h3>

<p><img src="http://josephwilk.github.io/images/blog/2012/03/Screen-Shot-2012-03-06-at-16.17.53.png" alt="" /></p>

<p>You can get away with a few of these slides mixed into an interesting presentation. Rely on them too much and it gets boring quick.</p>

<p>Do you want to keep my attention?</p>

<h3>2. Breaking continuity of images, text and content</h3>

<p>One of the hardest challenges of adding images to your presentation is ensuring they feel part of the presentation, fitting with your content and style.</p>

<p>Lets look at an example where images do not fit in the presentation:</p>

<p><img src="http://josephwilk.github.io/images/blog/2012/11/Screen-Shot-2012-11-21-at-13.32.59-300x224.png" alt="" /></p>

<p>Now improve that slide by making the image feel less jarring with the rest of the content.</p>

<p><img src="http://josephwilk.github.io/images/blog/2012/11/Screen-Shot-2012-11-21-at-13.55.51-300x224.png" alt="" /></p>

<p>Using framing or picture frames is a easy way to help a image fit in a presentation.</p>

<p>Without a frame:</p>

<p><img src="http://josephwilk.github.io/images/blog/2012/12/Screen-Shot-2012-12-18-at-20.24.19-300x225.png" alt="" /></p>

<p>With a frame:</p>

<p><img src="http://josephwilk.github.io/images/blog/2012/12/Screen-Shot-2012-12-18-at-20.24.27-300x225.png" alt="" /></p>

<h3>3. Inconsistent design</h3>

<p>If you want to make your presentation beautiful having consistency in design is important.</p>

<p>Consider how the diagrams in this presentation break consistency.</p>

<p>We have non-shaded, hard edged blocks of colour in one diagram.</p>

<p><img src="http://josephwilk.github.io/images/blog/2012/11/Screen-Shot-2012-11-21-at-13.39.07-300x187.png" alt="" /></p>

<p>Then in following diagrams we have round blocks with shading.</p>

<p><img src="http://josephwilk.github.io/images/blog/2012/11/Screen-Shot-2012-11-21-at-13.38.55-300x188.png" alt="" /></p>

<h3>4. The death of colour</h3>

<p>Colour stimulates my brain. Do you want to stimulate it or send it to sleep?</p>

<h2><img src="http://josephwilk.github.io/images/blog/2012/03/Screen-Shot-2012-03-06-at-17.15.57-300x121.png" alt="" /></h2>

<h3>5. Live code demo fail</h3>

<p>You have 30ish minutes of my time. I don&rsquo;t want to spend that time watching you make typos and¬†debugging¬†an error. You immediately make me lose my¬†concentration, I&rsquo;ll start flicking through my twitter feed. You have been working hard through your presentation to engage me, why throw it away?</p>

<p>Either practice a heck of a lot or pre-record your demos. I¬†personally use¬†<a href="http://www.araelium.com/screenflick">Screenflick</a> for all my recorded demos.</p>

<h3>6. Black and white code.</h3>

<p>How often do you read source code without syntax highlighting?</p>

<p><img src="http://josephwilk.github.io/images/blog/2012/12/Screen-Shot-2012-12-17-at-20.50.56-300x221.png" alt="" /></p>

<p>For me, that&rsquo;s never. Highlighting code is also a great excuse to add some colour and life to your slides.</p>

<p>Its not tricky, for example extracting syntax highlighting from¬†<a href="http://blog.pastie.org/2008/06/textmate-to-key.html">Textmate to Keynote</a>.</p>

<h3>7. Hello my name is</h3>

<p>The slides where you tell me who you are, what company you work for, what open source projects you work on, your cats name, your dogs name, and what you ate for breakfast.</p>

<p><img src="http://josephwilk.github.io/images/blog/2012/12/Screen-Shot-2012-12-17-at-14.36.40-300x228.png" alt="" /></p>

<p>Earn me wanting to know who you are through giving a stimulating presentation.</p>

<p><a href="http://blog.josephwilk.net/conferences/conferences-and-the-cult-of-celebrity.html">Content over character</a>.</p>

<p>Avoid breaking the flow of the presentation with a slide which has nothing to do with your topic or content.</p>

<h2>Final words</h2>

<p>Creating a presentation is hard work. Creating a great presentation is lots and lots of work and even then you are never sure if your audience will think its great. Public speaking is stressful and takes a lot of concentration and confidence.</p>

<p>No matter what happens with your talk, be proud of yourself. You decided to put yourself out there, up on stage trying to explain your ideas to people. This is already a great achievement. Don&rsquo;t be too dishearten¬†or critical of yourself if you are not happy with your talk.</p>

<p>Take a moment in that¬†euphoric¬†buzz of the¬†applause to enjoy yourself.</p>

<p><img src="http://josephwilk.github.io/images/blog/2012/12/70765937applause-300x249.jpg" alt="" /></p>

<p>Then work out how you can do better!</p>

<p>Good luck!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Aesthetics of Density]]></title>
    <link href="http://josephwilk.github.io/software-craftmanship/the-aesthetics-of-density.html"/>
    <updated>2012-12-14T11:02:48+00:00</updated>
    <id>http://josephwilk.github.io/software-craftmanship/the-aesthetics-of-density</id>
    <content type="html"><![CDATA[<p>Programming languages can be described as Dense.</p>

<p>What does dense mean?</p>

<blockquote><p>Closely compacted in substance.
Having the constituent parts crowded closely together:</p></blockquote>

<p><img src="http://josephwilk.github.io/images/blog/2012/12/density_model-284x300.jpg" alt="" /></p>

<p>What does it mean for a programming language to be dense?</p>

<p>I consider there are two axis for the density of programming languages:</p>

<blockquote><p><strong>Density of syntax</strong>
The syntax is very dense/compact.</p></blockquote>

<p>For example Assembly has a very dense syntax, abbreviate commands, small register names, etc&hellip; It takes a lot to express simple expressions</p>

<p>A simple &ldquo;for&rdquo; loop in Assembly</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>mov cx, 3
</span><span class='line'>startloop:
</span><span class='line'>   cmp cx, 0
</span><span class='line'>   jz endofloop
</span><span class='line'>   push cx
</span><span class='line'>loopy:
</span><span class='line'>   Call ClrScr
</span><span class='line'>   pop cx
</span><span class='line'>   dec cx
</span><span class='line'>   jmp startloop
</span><span class='line'>endofloop:
</span><span class='line'>   ; Loop ended
</span><span class='line'>   ; Do what ever you have to do here</span></code></pre></td></tr></table></div></figure>


<blockquote><p><strong>Density of expression</strong>
The means of expressing simple concepts or solutions is very compact.</p></blockquote>

<p>This is a little fuzzier than syntax, it can depend on what you are trying to express and languages often provide many different ways to express something. For example string processing in Erlang is a lot messier than say, Ruby. Paul Graham measures this form of density by <a href="http://www.paulgraham.com/power.html">the number of elements</a></p>

<p>As an example PROLOG scores highly in expressive density. One of the main reasons why is when you give up control of execution (imperative style) and describe the problem (declarative style) you increase the expressive density.</p>

<p>The towers of hanoi in Prolog:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='prolog'><span class='line'><span class="nf">move</span><span class="p">(</span><span class="m">1</span><span class="p">,</span><span class="nv">X</span><span class="p">,</span><span class="nv">Y</span><span class="p">,</span><span class="k">_</span><span class="p">)</span> <span class="p">:-</span>
</span><span class='line'>    <span class="nf">write</span><span class="p">(</span><span class="s-Atom">&#39;Move top disk from &#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="nf">write</span><span class="p">(</span><span class="nv">X</span><span class="p">),</span>
</span><span class='line'>    <span class="nf">write</span><span class="p">(</span><span class="s-Atom">&#39; to &#39;</span><span class="p">),</span>
</span><span class='line'>    <span class="nf">write</span><span class="p">(</span><span class="nv">Y</span><span class="p">),</span>
</span><span class='line'>    <span class="s-Atom">nl</span><span class="p">.</span>
</span><span class='line'><span class="nf">move</span><span class="p">(</span><span class="nv">N</span><span class="p">,</span><span class="nv">X</span><span class="p">,</span><span class="nv">Y</span><span class="p">,</span><span class="nv">Z</span><span class="p">)</span> <span class="p">:-</span>
</span><span class='line'>    <span class="nv">N</span><span class="o">&gt;</span><span class="m">1</span><span class="p">,</span>
</span><span class='line'>    <span class="nv">M</span> <span class="o">is</span> <span class="nv">N</span><span class="o">-</span><span class="m">1</span><span class="p">,</span>
</span><span class='line'>    <span class="nf">move</span><span class="p">(</span><span class="nv">M</span><span class="p">,</span><span class="nv">X</span><span class="p">,</span><span class="nv">Z</span><span class="p">,</span><span class="nv">Y</span><span class="p">),</span>
</span><span class='line'>    <span class="nf">move</span><span class="p">(</span><span class="m">1</span><span class="p">,</span><span class="nv">X</span><span class="p">,</span><span class="nv">Y</span><span class="p">,</span><span class="k">_</span><span class="p">),</span>
</span><span class='line'>    <span class="nf">move</span><span class="p">(</span><span class="nv">M</span><span class="p">,</span><span class="nv">Z</span><span class="p">,</span><span class="nv">Y</span><span class="p">,</span><span class="nv">X</span><span class="p">).</span>
</span></code></pre></td></tr></table></div></figure>


<p>Programming languages¬†fit along a spectrum within these forms of density. Ruby provides the means to express concepts very¬†syntactically densely. Just look at <a href="http://rubysource.com/ruby-golf">Ruby Golf</a> (solving a problem with the smallest possible number of characters) for example:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">def</span> <span class="nf">fizzbuzz</span><span class="p">(</span><span class="n">n</span><span class="p">)</span>
</span><span class='line'><span class="n">n</span><span class="o">%</span><span class="mi">3</span><span class="o">&lt;</span><span class="mi">1</span><span class="o">&amp;&amp;</span><span class="n">f</span><span class="o">=</span><span class="s2">&quot;Fizz&quot;</span><span class="p">;</span><span class="n">n</span><span class="o">%</span><span class="mi">5</span><span class="o">&lt;</span><span class="mi">1</span><span class="o">?</span><span class="s2">&quot;</span><span class="si">#{</span><span class="n">f</span><span class="si">}</span><span class="s2">Buzz&quot;</span><span class="ss">:f</span><span class="o">||</span><span class="n">n</span><span class="o">.</span><span class="n">to_s</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>It is also always posible to build a DSL within a programming language to maximise density.</p>

<h2>Where does Density fit with Literate Programming?</h2>

<p>Dense syntax moves code away from being an easily accessible form of documentation.</p>

<p>Density of expression <strong>can</strong> move code away from being easily accessible as documentation. For example do you understand how that PROLOG towers of hanoi works?</p>

<p>The more focused a¬†language¬†is on expressive/syntactical density the further it moves the art of programming away from Literate programming where we focus on our code being the documentation. Much like writing an essay:</p>

<blockquote><p>Instead of writing code containing documentation, the literate programmer writes documentation containing code.</p></blockquote>

<p>Ross Williams. FunnelWeb Tutorial Manual, pg 4.</p>

<p>The readability of the code to humans is the priority.</p>

<blockquote><p>Under the literate programming paradigm, the central activity of programming becomes that of conveying meaning to other intelligent beings rather than merely convincing the computer to behave in a particular way.</p></blockquote>

<p>Ross Williams. FunnelWeb Tutorial Manual, pg 4.</p>

<h3>Density within our heads</h3>

<p><img src="http://josephwilk.github.io/images/blog/2012/12/head-in-hands-150x150.jpg" alt="" /></p>

<p>One could argue that dense code can still be literate in style. Its just that you have to fit all the programming languages syntax into your head. Its not unrealistic to ask developers to know the syntax/api of their language. Though holding it all in memory when its particularly dense can be challenging.</p>

<p>If your a Clojure programmer you might have a good understanding of this code as documentation:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='clojure'><span class='line'><span class="p">(</span><span class="k">def </span><span class="o">^</span><span class="p">{</span><span class="ss">:dynamic</span> <span class="nv">true</span>
</span><span class='line'>       <span class="ss">:doc</span> <span class="s">&quot;some doc here&quot;</span><span class="p">}</span>
</span><span class='line'>     <span class="nv">*allow-default-prerequisites*</span> <span class="nv">false</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<p>And if you&rsquo;re a Ruby or Perl programming you might read this with ease:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="vg">$!</span><span class="o">.</span><span class="n">is_a?</span><span class="p">(</span><span class="no">MonkeyError</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Can dense languages be a good idea?</h2>

<blockquote><p>&ldquo;The quantity of meaning compressed into a small space by algebraic signs, is another circumstance that facilitates the reasonings we are accustomed to carry on by their aid.&rdquo;</p></blockquote>

<ul>
<li>Charles Babbage, quoted in Iverson&rsquo;s Turing Award Lecture</li>
</ul>


<p>Is there a trade-off in moving to a more dense form of expression in helping shape the way we think and the kind of thoughts we have?</p>

<p>How easy is it to hold a dense language in our heads, remembering all the syntax in order to easily read code?</p>

<h2>Regular Expressions</h2>

<p>While regular expressions are not a programming language they are one of the best examples of a very dense language both¬†syntactically¬†and expressively ¬†that has persisted in its syntax through many programming languages.</p>

<p>Is that a sign that regular expressions have succeeded in encoding pattern matching text?</p>

<h3>Write Once</h3>

<p>Do you understand this pattern?</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="sr">/^[\w]$/</span>
</span></code></pre></td></tr></table></div></figure>


<p>How about we push the complexity level and try some of the more esoteric symbols in regular expressions:</p>

<p>Do you know what this does?</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="sr">/\b[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}\b/i</span>
</span></code></pre></td></tr></table></div></figure>


<p>How about this?</p>

<p><a href="http://www.ex-parrot.com/pdw/Mail-RFC822-Address.html">Full email detection regular expression (RFC822)</a></p>

<p>While regular expressions are very well suited to small patterns, with a very dense language our ability to parse complex statements is reduced.</p>

<p>Which has a knock on effect for maintenance, its read-only and even then its not easy to read.</p>

<h3>Readability</h3>

<p>In fact its considered bad practice to write a regular expression of the form above. Its understood that its hard to read and hence programmers have to add to the dense language to increase readability:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="o">/</span>
</span><span class='line'><span class="o">^</span>                                             <span class="c1"># start of string</span>
</span><span class='line'><span class="p">(</span>                                             <span class="c1"># first group start</span>
</span><span class='line'>  <span class="p">(?:</span>
</span><span class='line'>    <span class="p">(?:[</span><span class="o">^</span><span class="p">?</span><span class="o">+*</span><span class="p">{}()[</span><span class="o">\</span><span class="p">]</span><span class="o">\\|</span><span class="p">]</span><span class="o">+</span>                      <span class="c1"># literals and ^, $</span>
</span><span class='line'>     <span class="o">|</span> <span class="o">\\.</span>                                    <span class="c1"># escaped characters</span>
</span><span class='line'>     <span class="o">|</span> <span class="o">\</span><span class="p">[</span> <span class="p">(?:</span> <span class="o">\^</span><span class="p">?</span><span class="o">\\.</span> <span class="o">|</span> <span class="o">\^</span><span class="p">[</span><span class="o">^\\</span><span class="p">]</span> <span class="o">|</span> <span class="p">[</span><span class="o">^\\^</span><span class="p">]</span> <span class="p">)</span>     <span class="c1"># character classes</span>
</span><span class='line'>          <span class="p">(?:</span> <span class="p">[</span><span class="o">^\</span><span class="p">]</span><span class="o">\\</span><span class="p">]</span><span class="o">+</span> <span class="o">|</span> <span class="o">\\.</span> <span class="p">)</span><span class="o">*</span> <span class="o">\</span><span class="p">]</span>
</span><span class='line'>     <span class="o">|</span> <span class="o">\</span><span class="p">(</span> <span class="p">(?:</span><span class="o">\</span><span class="p">?[:</span><span class="o">=!</span><span class="p">]</span><span class="o">|\</span><span class="p">?</span><span class="sr">&lt;[=!]|\?&gt;</span><span class="p">)?</span> <span class="p">(?</span><span class="mi">1</span><span class="p">)??</span> <span class="o">\</span><span class="p">)</span>  <span class="c1"># parenthesis, with recursive content</span>
</span><span class='line'>     <span class="o">|</span> <span class="o">\</span><span class="p">(</span><span class="o">\</span><span class="p">?</span> <span class="p">(?:</span><span class="n">R</span><span class="o">|</span><span class="p">[</span><span class="o">+-</span><span class="p">]?</span><span class="o">\</span><span class="n">d</span><span class="o">+</span><span class="p">)</span> <span class="o">\</span><span class="p">)</span>                 <span class="c1"># recursive matching</span>
</span><span class='line'>     <span class="p">)</span>
</span><span class='line'>    <span class="p">(?:</span> <span class="p">(?:[?</span><span class="o">+*</span><span class="p">]</span><span class="o">|\</span><span class="p">{</span><span class="o">\</span><span class="n">d</span><span class="o">+</span><span class="p">(?:,</span><span class="o">\</span><span class="n">d</span><span class="o">*</span><span class="p">)?</span><span class="o">\</span><span class="p">})</span> <span class="p">[?</span><span class="o">+</span><span class="p">]?</span> <span class="p">)?</span>   <span class="c1"># quantifiers</span>
</span><span class='line'>  <span class="o">|</span> <span class="o">\|</span>                                        <span class="c1"># alternative</span>
</span><span class='line'>  <span class="p">)</span><span class="o">*</span>                                          <span class="c1"># repeat content</span>
</span><span class='line'><span class="p">)</span>                                             <span class="c1"># end first group</span>
</span><span class='line'><span class="nv">$</span>                                             <span class="err">#</span> <span class="nv">end</span> <span class="n">of</span> <span class="n">string</span>
</span><span class='line'><span class="o">/</span>
</span></code></pre></td></tr></table></div></figure>


<p>This is definitely not literate programming, comments and code are clearly separate things.</p>

<p>Named captures groups are also an optional feature to improve and document the readability.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">user_regexp</span> <span class="o">=</span> <span class="sr">%r{</span>
</span><span class='line'><span class="sr">   (?&lt;username&gt; [a-z]+ ){0}</span>
</span><span class='line'>
</span><span class='line'><span class="sr">   (?&lt;ip_number&gt; [0-9]{1,3} ){0}</span>
</span><span class='line'><span class="sr">   (?&lt;ip_address&gt; (\g&lt;ip_number&gt;\.){3}\g&lt;ip_number&gt; ){0}</span>
</span><span class='line'>
</span><span class='line'><span class="sr">   (?&lt;admin&gt; true | false ){0}</span>
</span><span class='line'>
</span><span class='line'><span class="sr">   \g&lt;username&gt;:\g&lt;ip_address&gt;:\g&lt;admin&gt;</span>
</span><span class='line'><span class="sr"> }x</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Mnemonics</h3>

<p>Our memory also struggles to find mnemonics or associations to remember the full vocabary of regexps:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="c1">#Some easy ones</span>
</span><span class='line'><span class="o">/</span><span class="n">w</span> <span class="c1">#word</span>
</span><span class='line'><span class="o">/</span><span class="n">s</span> <span class="c1">#space</span>
</span><span class='line'>
</span><span class='line'><span class="c1">#Harder ones</span>
</span><span class='line'><span class="p">(?</span><span class="o">&lt;!</span><span class="n">pat</span><span class="p">)</span>
</span><span class='line'><span class="p">(?</span><span class="o">&lt;=</span><span class="n">pat</span><span class="p">)</span>
</span><span class='line'><span class="p">(?</span><span class="o">!</span><span class="n">pat</span><span class="p">)</span>
</span><span class='line'><span class="p">(?</span><span class="o">=</span><span class="n">pat</span><span class="p">)</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Reducing the Density of Regular Expressions</h2>

<p>Creating a DSL for parsing text is a huge domain. The power of regular expressions is very clear.</p>

<p>Yet there have been attempts in various languages to move regular expressions towards a more verbose form to improve readability.</p>

<h3>Regexp::English</h3>

<p>The Perl community has attempted to provide a more English, verbose syntax for regular expressions:</p>

<blockquote><p><a href="http://search.cpan.org/~chromatic/Regexp-English-1.01/lib/Regexp/English.pm">Regexp::English</a> provides an alternate regular expression syntax, one that is slightly more verbose than the standard mechanisms</p></blockquote>

<p>Lets look at an example:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'>        <span class="k">use</span> <span class="nn">Regexp::</span><span class="n">English</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">my</span> <span class="nv">$re</span> <span class="o">=</span> <span class="nn">Regexp::</span><span class="n">English</span>
</span><span class='line'>                <span class="o">-&gt;</span> <span class="n">start_of_line</span>
</span><span class='line'>                <span class="o">-&gt;</span> <span class="n">literal</span><span class="p">(</span><span class="s">&#39;Flippers&#39;</span><span class="p">)</span>
</span><span class='line'>                <span class="o">-&gt;</span> <span class="n">literal</span><span class="p">(</span><span class="s">&#39;:&#39;</span><span class="p">)</span>
</span><span class='line'>                <span class="o">-&gt;</span> <span class="n">optional</span>
</span><span class='line'>                        <span class="o">-&gt;</span> <span class="n">whitespace_char</span>
</span><span class='line'>                <span class="o">-&gt;</span> <span class="n">end</span>
</span><span class='line'>                <span class="o">-&gt;</span> <span class="n">remember</span>
</span><span class='line'>                        <span class="o">-&gt;</span> <span class="n">multiple</span>
</span><span class='line'>                                <span class="o">-&gt;</span> <span class="n">digit</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">while</span> <span class="p">(</span><span class="o">&lt;</span><span class="n">input</span> <span class="o">/&gt;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="k">my</span> <span class="nv">$match</span> <span class="o">=</span> <span class="nv">$re</span><span class="o">-&gt;</span><span class="n">match</span><span class="p">(</span><span class="nv">$_</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>                        <span class="k">print</span> <span class="s">&quot;$match\n&quot;</span><span class="p">;</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Better?</p>

<h2>Loving the Density of Regular Expressions</h2>

<p>Clearly there has been some recognition among developers that regexp could be improved by being more verbose. Its interesting that these attempts are considered failures. It would imply the majority of developers prefer dense regexps.</p>

<blockquote><p>&ldquo;you can document them with comments, named capture groups, composing them from well-named variables. of course, no one does those things.&rdquo;
Tom Stuart</p></blockquote>

<p>In the Perl community some people have given up completely on the humans and their dense, hard to maintain regular expressions.
They create tools to decode the density automatically:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="k">use</span> <span class="nn">YAPE::Regex::</span><span class="n">Explain</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">print</span> <span class="nn">YAPE::Regex::</span><span class="n">Explain</span><span class="o">-&gt;</span><span class="k">new</span><span class="p">(</span><span class="sx">qr/this.*(?:that)?(?!another)/</span><span class="p">)</span>
</span><span class='line'>      <span class="o">-&gt;</span><span class="n">explain</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Outputs:</p>

<pre><code>The regular expression:

(?-imsx:this.*(?:that)?(?!another))

matches as follows:

NODE                     EXPLANATION
----------------------------------------------------------------------
(?-imsx:                 group, but do not capture (case-sensitive)
                         (with ^ and $ matching normally) (with . not
                         matching \n) (matching whitespace and #
                         normally):
----------------------------------------------------------------------
  this                     'this'
----------------------------------------------------------------------
  .*                       any character except \n (0 or more times
                           (matching the most amount possible))
----------------------------------------------------------------------
  (?:                      group, but do not capture (optional
                           (matching the most amount possible)):
----------------------------------------------------------------------
    that                     'that'
----------------------------------------------------------------------
  )?                       end of grouping
----------------------------------------------------------------------
  (?!                      look ahead to see if there is not:
----------------------------------------------------------------------
    another                  'another'
----------------------------------------------------------------------
  )                        end of look-ahead
----------------------------------------------------------------------
)                        end of grouping
----------------------------------------------------------------------
</code></pre>

<p>Some snippets on developers thoughts about regular expressions:</p>

<blockquote><p>&ldquo;Love them, probably because they‚Äôre a form of arcane magic and they make me feel special for being able to control them&rdquo;</p>

<p>&ldquo;I think they are geek candy &hellip; sometimes used to show off maximum geekness&rdquo;</p>

<p>&ldquo;Love them because they make me look clever and LIKE A H4XX0rrrrr!&rdquo;</p></blockquote>

<h2>The Aesthetics of Density</h2>

<p>Regular expressions have succeeded and they are one of the few very dense languages to have done so.</p>

<p>The density of regular expressions make the initial barrier to getting started and moving to expert high. They are far from what we imagine in a literate programming style, yet once you have the syntax in your head, movement becomes fluid, you think in regular expressions. Dense languages with a very limited common syntax set allow experimenting rapidly. Without practice dense languages quickly drop from your mind and you struggle to fit the problem into the right expressive form.</p>

<p>There is an undeniable beauty in the density of regular expressions, in both syntax and expression.</p>

<p>Finding prime numbers using a single  Regexp:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='perl'><span class='line'><span class="sr">/^1?$|^(11+?)\1+$/</span>
</span></code></pre></td></tr></table></div></figure>


<p>It&rsquo;s also drink absinthe and cut off your own ear crazy.</p>

<p><img src="http://josephwilk.github.io/images/blog/2012/12/Vincent-Van-Gogh-001-150x150.jpg" alt="" /></p>

<p>I wrote this <a href="https://github.com/josephwilk/iwfms/blob/master/cgi-bin/planner/eventCalculusPlanner.pl">PROLOG code for my thesis</a>. I have no idea how it works now and it would take me about a month of playing with it to get back to a state where the dense language was back in my head and I could express ideas in the PROLOG way.</p>

<p>I spent over a month adding nothing more than a single &ldquo;!&rdquo; mark in the code.</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='prolog'><span class='line'><span class="nf">abdemo_holds_ats</span><span class="p">([</span><span class="nf">holds_at</span><span class="p">(</span><span class="nv">F</span><span class="p">,</span><span class="nv">T</span><span class="p">)|</span><span class="nv">Gs</span><span class="p">],</span><span class="nv">R1</span><span class="p">,</span><span class="nv">R3</span><span class="p">,</span><span class="nv">N1</span><span class="p">,</span><span class="nv">N3</span><span class="p">,</span><span class="nv">D</span><span class="p">)</span> <span class="p">:-</span>
</span><span class='line'>     <span class="p">!,</span>
</span><span class='line'>     <span class="nf">abdemo</span><span class="p">([</span><span class="nf">holds_at</span><span class="p">(</span><span class="nv">F</span><span class="p">,</span><span class="nv">T</span><span class="p">)],</span><span class="nv">R1</span><span class="p">,</span><span class="nv">R2</span><span class="p">,</span><span class="nv">N1</span><span class="p">,</span><span class="nv">N2</span><span class="p">,</span><span class="nv">D</span><span class="p">),</span>
</span><span class='line'>
</span><span class='line'>     <span class="c1">%cut added Joseph Wilk 16/03/2004</span>
</span><span class='line'>     <span class="p">!,</span>
</span><span class='line'>     <span class="nf">abdemo_holds_ats</span><span class="p">(</span><span class="nv">Gs</span><span class="p">,</span><span class="nv">R2</span><span class="p">,</span><span class="nv">R3</span><span class="p">,</span><span class="nv">N2</span><span class="p">,</span><span class="nv">N3</span><span class="p">,</span><span class="nv">D</span><span class="p">).</span>
</span></code></pre></td></tr></table></div></figure>


<p>I still feel its some of the most beautiful code I&rsquo;ve written. Why?</p>

<p>I revel in the expressive density. Bending my brain to express my thoughts in the densely expressive PROLOG way.</p>

<p>I guiltily dip into the syntactical density because it&rsquo;s like the detailing on the brush strokes of a painting.</p>

<p><img src="http://josephwilk.github.io/images/blog/2012/12/Grunge-Brush-Strokes-Banner-150x150.jpg" alt="" /></p>

<p>Would I ever write this code in a production system that developers would have to maintain? Hell no.</p>

<p>Would I consider this literate programming? Hell no. Just look at the 100 of lines of comments.</p>

<p>But for the sake of art and realising a form of flow I&rsquo;ve not encountered since, I would happily revel in the aesthetics of density.</p>

<p><img src="http://josephwilk.github.io/images/blog/2012/12/6751247749_4f91cb69f2_z.jpg" alt="" />
Michael Wolf ‚ÄúArchitecture of Density no.36‚Äù: <a href="http://www.flickr.com/photos/worldeconomicforum/6751247749">http://www.flickr.com/photos/worldeconomicforum/6751247749/</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Why are you SHOUTING programmer?]]></title>
    <link href="http://josephwilk.github.io/rhetorical-programming/why-are-you-shouting-programmer.html"/>
    <updated>2012-11-19T00:00:51+00:00</updated>
    <id>http://josephwilk.github.io/rhetorical-programming/why-are-you-shouting-programmer</id>
    <content type="html"><![CDATA[<p>Being shouted at is not a lot of fun. So why do we shout in code?</p>

<p><img src="http://josephwilk.github.io/images/blog/2012/11/image1-201x300.jpg" alt="" /></p>

<h2>Shouting code</h2>

<p>Compare</p>

<pre><code>"how_many_monkeys_can_a_monkey_eat_before_it_explodes"
</code></pre>

<p>and:</p>

<pre><code>"HOW_MANY_MONKEYS_CAN_A_MONKEY_EAT_BEFORE_IT_EXPLODES"
</code></pre>

<p>How do you read those differently in your head?</p>

<p>We associate capital letters with someone shouting.</p>

<p>Now lets turn to two functionally equivalent pieces of Ruby code:</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Monkey</span>
</span><span class='line'>  <span class="k">def</span> <span class="nf">capacity</span>
</span><span class='line'>    <span class="mi">10</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">stomach</span>
</span><span class='line'>      <span class="s2">&quot;I can fit </span><span class="si">#{</span><span class="n">capacity</span><span class="si">}</span><span class="s2"> monkeys in my belly&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>And</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="k">class</span> <span class="nc">Monkey</span>
</span><span class='line'>  <span class="no">CAPACITY</span> <span class="o">=</span> <span class="mi">10</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">def</span> <span class="nf">stomach</span>
</span><span class='line'>    <span class="s2">&quot;I can fit </span><span class="si">#{</span><span class="no">CAPACITY</span><span class="si">}</span><span class="s2"> monkeys in my belly&quot;</span>
</span><span class='line'>  <span class="k">end</span>
</span><span class='line'><span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<p>Constants are shouted. Why do we shout? Because:</p>

<ul>
<li><p>We are angry</p></li>
<li><p>We have something we think is important and we want everyone to hear it.</p></li>
</ul>


<p>Why in Ruby are constants uppercase? Well they don&rsquo;t have to be, Ruby constrains us to ensuring the first letter is a capital.
We get warnings if we try and reassign their value but ultimately they are just Fixnums. In order to stick with our Ruby naming convention we use &lsquo;_&rsquo; and all caps.</p>

<p>So its a combination or <strong>telling the compiler that this value is a constant</strong> and <strong>fitting with the naming scheme</strong> in Ruby.</p>

<p>We shout because society indicates to us thats the normal behaviour and we all want to be nice citizens of the Ruby republic.</p>

<p>As a side effect constants feel like they are more important than the other variables or methods. They should take our attention first.</p>

<h2>Reading uppercase is slow</h2>

<p>What wait a minute isn&rsquo;t uppercase text harder to read? There is evidence [1] to show that all-caps is less legible and less readable than lower case. So constants are harder for us to read.</p>

<blockquote><p>lowercase permits reading by word units, while all capitals tend to be read letter by letter</p></blockquote>

<h2>Numbers, letters and uppercase</h2>

<p>A common use of shouting case is constants used to remove magic numbers from calculations.</p>

<pre><code>1000 * 667895 / LIMIT + 475436
</code></pre>

<p>The brain recognises numbers and letters very differently. The brain in general can recognise words faster than a sequence of digits since with a word we do not need to read each character in order to recognise the word.</p>

<p>To see for yourself try and read the following:</p>

<blockquote><p>The hmaun mind does not raed eervy letter by istlef but the word as aa woelh.</p></blockquote>

<p>Compare how much more time it takes you to read the numbers.</p>

<blockquote><p>124 3456 3234 5443 3342 55334 66554 47567</p></blockquote>

<p>By uppercasing the constant we are slowing down this natural ability to read words.</p>

<p>Compare again:</p>

<pre><code>1000 * 667895 / LIMIT + 475436
</code></pre>

<p>With:</p>

<pre><code>1000 * 667895 / limit + 475436
</code></pre>

<p>Do we really need this further uppercase difference? With the instinctive separation between words and letters the further effort and cognitive slow down has little value.</p>

<h3>Immutability vs Mutability</h3>

<p>A legitimate case were it does become useful to use shouting case is where you want to distinguish between variables/functions and constants. Expressing that a value is immutable in comparison to a mutable variable is important in a language like Ruby were immutability is not the norm.</p>

<pre><code>1000 * 667895 + scale / LIMIT + 475436 - radius
</code></pre>

<h2>Shouting in technicolor</h2>

<p>Editors often provide color markup for words in uppercase. For example for Ruby in Textmate:</p>

<p><img src="http://josephwilk.github.io/images/blog/2012/11/Screen-Shot-2012-11-17-at-15.00.41.png" alt="" /></p>

<p>Though they also provide the difference between variables/function and numbers.
Shouting provides us with a discernible way to see all constants within the code at glance based on colour.</p>

<h2>History of shouting in code</h2>

<p>How or where did this convention of uppercasing constants come from?
Why is it a convention?
When did we start shouting in our code?</p>

<p>What made us so mad?</p>

<h4>Assembly</h4>

<p>It started with assembly,  the convention was to uppercase variables names and lowercase instructions.</p>

<pre><code>ADCTL  = 0x30
staa ADCTL,X
</code></pre>

<p>Variable names were limited in length, so often variable names were acronyms, which in English are often capitalised (we just skipped the dot). Registers, memory &amp; caches all had nice acronyms which you could reference in your assembly.</p>

<p><img src="http://josephwilk.github.io/images/blog/2012/11/image5-150x150.jpg" alt="" /></p>

<p>Assembly was more machine centric than human centric. Not quite shouting as we know it now (though its understandable we were angry with all that ugly code).</p>

<h4>FLOW-MATIC</h4>

<p>The birth of programming in English. It was not a pretty birth, this thing was born shouting very loudly. EVERYTHING is in capitals, even the programming languages name!</p>

<pre><code>INPUT  INVENTORY FILE=A
 PRICE FILE=B,
 OUTPUT PRICED-INV FILE=C
 UNPRICED-INV FILE=D,
 HSP D.
</code></pre>

<p>Flow-Matic had the builtin in¬†constant ZERO. Our first example of a Constant but where everything is capitalised so it is not distinguished from other code.</p>

<h4>FORTRAN</h4>

<p>FORTRAN was a confused language when it came to shouting. The use of lowercase letters in keywords was strictly nonstandard.</p>

<pre><code>IF (IA+IC-IB) 777,777,705
IF (IB+IC-IA) 777,777,799
STOP 1
C USING HERON'S FORMULA WE CALCULATE THE
C AREA OF THE TRIANGLE
S = FLOATF (IA + IB + IC) / 2.0
AREA = SQRT( S * (S - FLOATF(IA)) * (S - FLOATF(IB)) + (S - FLOATF(IC)))
WRITE OUTPUT TAPE 6, 601, IA, IB,
STOP
END
</code></pre>

<p>But then the liberation came and after a bloody battle FORTRAN was renamed Fortran.</p>

<p><img src="http://josephwilk.github.io/images/blog/2012/11/fist-150x150.png" alt="" /></p>

<p>In this new post revolution age Fortran&rsquo;s compiler was a liberal one, not caring about shouting or case at all.</p>

<pre><code>program helloworld
     print *, "Hello, world."
end program helloworld
</code></pre>

<p>The society on the other hand was still very keen to tell its citizens when they should shout. It was a social coding convention that local variables be in lowercase and language keywords be in uppercase.</p>

<p>Language keywords were more important and hence shouted. Far more important than those pesky human named local variables. This inverted the previous Assembly conventions on the use of case.</p>

<h4>LISP</h4>

<p>Common Lisp is case sensitive but the Common Lisp reader converts all uppercase to lower case:</p>

<pre><code>(defun hi () "Hi!)
(hi) ;; outputs "Hi"
(HI) ;; outputs "Hi"
(Hi) ;; outputs "Hi"
</code></pre>

<p>LISP had a social convention to only use lowercase (one might think to avoid confusing situations like the one above). Did LISPeans shout at all? They did when it came to  documentation strings:</p>

<blockquote><p>&ldquo;In a documentation string, when you need to refer to function arguments, names of classes, or other lisp objects, write these names in all uppercase, so that they are easy to find&rdquo;</p></blockquote>

<p>This was to help humans easily find them and because documentation generation tools could detect them.</p>

<p>Shouting the references in unstructured text made them clearly visible to both machines and humans.</p>

<h4>COBOL</h4>

<p>COBOL is another of those shouting languages which liked everything in uppercase. Which makes reading a COBOL program akin to having someone shout very loudly in your face. Until you cry. Lots.</p>

<p><img src="http://josephwilk.github.io/images/blog/2012/11/image6-150x150.jpg" alt="" /></p>

<pre><code>01 RECORD-NAME.
02 DATA-NAME-1-ALPHA PIC X(2).
02 DATA-NAME-2.
03 DATA-NAME-3-NUMERIC PIC 99.
03 DATA-NAME-4.
04 DATA-NAME-5-ALPHA PIC X(2).
04 DATA-NAME-6-NUMERIC PIC 9(5).
02 DATA-NAME-7-ALPHA PIC X(6).
</code></pre>

<p>The only thing that was not upper case was comments.</p>

<blockquote><p>It helps if all comments are in lower-case, to differentiate from actual commands which should always be in upper-case</p></blockquote>

<p>Comments where not important, so no need to shout them. Which in turn makes them easier to read. Perhaps there is an understanding here that shouting makes code hard to read. Comments which might contain a lot of text should also be easier to read.</p>

<p>If you were still in doubt about COBOL&rsquo;s evilness: user defined constants were distinguished by using a <strong>single character variable name</strong>. MAD. YES THAT WAS WORTH SHOUTING.</p>

<h4>Basic</h4>

<p>In basic keywords were capitalised to distinguish between variables names. The case is insignificant, it&rsquo;s for the humans not the compiler.</p>

<pre><code>LET m = 2
LET a = 4
LET force = m*a
PRINT force
END
</code></pre>

<p>Keys words are important, so shout them. But in turn make it easier to read the user named variables by leaving them lower case.</p>

<h4>C</h4>

<p>C uses uppercase by convention for object-like Macros which get replaced during pre-processing.</p>

<pre><code>#define BUFFER_SIZE 1024
foo = (char *) malloc (BUFFER_SIZE);
</code></pre>

<p>Uppercase is used to defined a templating language within C, which we can quickly distinguish from the code. It also makes the job of the pre-processor easier, parsing macros.</p>

<h2>So is shouting a bad thing?</h2>

<p>When it comes to expressing ideas in nothing but text we use everything we can to provide structure and separation to help improve clarity. Shouting or uppercasing words provides a very powerful way of rapidly distinguishing certain aspects of text.</p>

<p>How programming languages spend this limited currency of instinctive separation reflects the languages understanding of readability (i&rsquo;m looking at you COBOL) and what they find to be important enough to earn shouting case.</p>

<p>However most modern languages provide you with the choice of shouting. In Ruby we can skip it all together.</p>

<p>Try not shouting for a while. See how it makes you feel.</p>

<p><img src="http://josephwilk.github.io/images/blog/2012/11/shhh1-150x150.png" alt="" /></p>

<p>And always:</p>

<p>TRY AND AVOID SHOUTING FOR TOO LONG AS IT IS HARD TO READ.</p>

<p>Keep it <strong>sharp</strong>, <strong>short</strong> and <strong>loud</strong>.</p>

<h2>References</h2>

<p>[1] <a href="http://www.amazon.co.uk/gp/product/0962489158/ref=as_li_ss_tl?ie=UTF8&amp;camp=1634&amp;creative=19450&amp;creativeASIN=0962489158&amp;linkCode=as2&amp;tag=joswilblo-21">Type and Layout: How Topography and Design Can Get Your Message Across &ndash; Or get in the Way</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Recurrent neural networks in Ruby]]></title>
    <link href="http://josephwilk.github.io/ruby/recurrent-neural-networks-in-ruby.html"/>
    <updated>2012-10-29T14:00:30+00:00</updated>
    <id>http://josephwilk.github.io/ruby/recurrent-neural-networks-in-ruby</id>
    <content type="html"><![CDATA[<p>We look at how neural networks work, what is different about a recurrent networks and a library which allows us to use recurrent networks in Ruby (<a href="https://github.com/josephwilk/tlearn-rb">tlearn-rb</a>).</p>

<h2>What the heck is a Recurrent Network?</h2>

<p>First lets look briefly at how a neural network works:</p>

<h2>Neural Networks</h2>

<p>Neural networks use the model of neurones in the human brain. Put very simply the artifical neuron given some inputs (the dendrites) sums them to produce an output (the neuron&rsquo;s axon) which is usually passed through some non-linear function. The sum of the nodes is usually weighted.</p>

<p><img src="http://josephwilk.github.io/images/blog/2012/10/image1.jpg" alt="" /></p>

<p>By taking a set of training data we can teach a neural network such that it can be applied to new data outside of the training set. For example we could have as inputs the states of a chess board and the output as a rank for how good the position is for white. We could after training, input an unseen board state and as output get a rank for how effective the position is for white.</p>

<p>As a neural network is trained it builds up the set of weights for the connections between nodes. Through many training iterations comparing expected outputs and the inputs these weights are built up.</p>

<h4>Feedforward Neural Network</h4>

<p><img src="http://josephwilk.github.io/images/blog/2012/10/neural_network1.png" alt="" /></p>

<p>In some problems the order in which the inputs arrive at the network is important. A normal network fails at this as there is no explicit sense of the relationships between sets of inputs.</p>

<p>Lets consider an example. A network that is trained to detect how satisfying a word sounds to children.</p>

<p>We feed our network all the syllables of a word and get an output:</p>

<pre><code>["mon", "key"]
["o", "key", "do", "key"]
</code></pre>

<p>When we feed the syllable <em>&ldquo;key&rdquo; </em>into the neural network it will always return the same output irrelevant of what came before it. This misses a relationship between the syllables of the word.</p>

<p>A recurrent network aims to solve this problem by using both the input layer and the output layer to devise weights of the hidden layer.</p>

<h4>Recurrent Network</h4>

<p><img src="http://josephwilk.github.io/images/blog/2012/10/recurrent_neural_network1.png" alt="" /></p>

<p>Going back to our example:</p>

<pre><code>["mon", "key"]
["o", "key", "do", "key"]
</code></pre>

<p>When we feed <em>&ldquo;key&rdquo;</em> into the neural network the weight returned will be effected by what the previous input was, [&ldquo;mon&rdquo;] or [&ldquo;o&rdquo;, &ldquo;key&rdquo;, &ldquo;do&rdquo;].</p>

<p>So our recurrent neural network would detect that &ldquo;o-key-do-key&rdquo; has a rhythm between the syllables that is appealing to children.</p>

<p>A recurrent network allows us to decided when to wipe the previous output and start again. So in our example we would reset the output layer after we have fed in all the syllables of the word. We are interested in the relationships between syllables of a word, not syllables of different words.</p>

<p><strong>So all this is a complicated way of saying Recurrent networks have state. Yes.</strong></p>

<h2>Recurrent Networks in Ruby</h2>

<p>There was no Ruby library that support Recurrent Networks. There was an <a href="http://leenissen.dk/fann/forum/viewtopic.php?t=47">attempt to add Recurrent networks</a> to <a href="http://leenissen.dk/fann/wp">FANN</a> (which has a <a href="http://ruby-fann.rubyforge.org/">ruby-fann gem</a> with bindings) but it was never merged in.</p>

<p>So I adapted the <a href="http://crl.ucsd.edu/innate/tlearn.html">TLearn C library</a> which supports Recurrent Neural Networks and wrapped it in Ruby Love.</p>

<p>It&rsquo;s having some trouble coming to terms with its new found rubyness, so there is a big alpha warning hanging on the door.</p>

<h3>Installing TLearn</h3>

<pre><code>gem install tlearn
</code></pre>

<h3>Using TLearn</h3>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;tlearn&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="n">tlearn</span> <span class="o">=</span> <span class="ss">TLearn</span><span class="p">:</span><span class="ss">:Run</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="ss">:number_of_nodes</span> <span class="o">=&gt;</span> <span class="mi">10</span><span class="p">,</span>
</span><span class='line'>                    <span class="ss">:&#39;output_nodes&#39;</span>    <span class="o">=&gt;</span> <span class="mi">5</span><span class="o">.</span><span class="n">.</span><span class="mi">6</span><span class="p">,</span>
</span><span class='line'>                    <span class="ss">:linear</span>          <span class="o">=&gt;</span> <span class="mi">7</span><span class="o">.</span><span class="n">.</span><span class="mi">10</span><span class="p">,</span>
</span><span class='line'>                    <span class="ss">:weight_limit</span>    <span class="o">=&gt;</span> <span class="mi">1</span><span class="o">.</span><span class="mo">00</span><span class="p">,</span>
</span><span class='line'>                    <span class="ss">:connections</span>     <span class="o">=&gt;</span> <span class="o">[</span><span class="p">{</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">6</span>   <span class="o">=&gt;</span> <span class="mi">0</span><span class="p">},</span>
</span><span class='line'>                                         <span class="p">{</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">4</span>   <span class="o">=&gt;</span> <span class="ss">:i1</span><span class="o">.</span><span class="n">.</span><span class="ss">:i3</span><span class="p">},</span>
</span><span class='line'>                                         <span class="p">{</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">4</span>  <span class="o">=&gt;</span> <span class="mi">7</span><span class="o">.</span><span class="n">.</span><span class="mi">10</span><span class="p">},</span>
</span><span class='line'>                                         <span class="p">{</span><span class="mi">5</span><span class="o">.</span><span class="n">.</span><span class="mi">6</span>   <span class="o">=&gt;</span> <span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">4</span><span class="p">},</span>
</span><span class='line'>                                         <span class="p">{</span><span class="mi">7</span><span class="o">.</span><span class="n">.</span><span class="mi">10</span>  <span class="o">=&gt;</span> <span class="o">[</span><span class="mi">1</span><span class="o">.</span><span class="n">.</span><span class="mi">4</span><span class="p">,</span> <span class="p">{</span><span class="ss">:min</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="o">.</span><span class="mi">0</span><span class="p">,</span> <span class="ss">:max</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="o">.</span><span class="mi">0</span><span class="p">},</span> <span class="ss">:fixed</span><span class="p">,</span> <span class="ss">:&#39;one_to_one&#39;</span><span class="p">}</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">training_data</span> <span class="o">=</span> <span class="o">[</span><span class="p">{</span><span class="o">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="o">]</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="o">]</span><span class="p">}</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'>                 <span class="o">[</span><span class="p">{</span><span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="o">]</span>  <span class="o">=&gt;</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="o">]</span><span class="p">}</span><span class="o">]</span>
</span><span class='line'>
</span><span class='line'><span class="n">tlearn</span><span class="o">.</span><span class="n">train</span><span class="p">(</span><span class="n">training_data</span><span class="p">,</span> <span class="n">sweeps</span> <span class="o">=</span> <span class="mi">200</span><span class="p">)</span>
</span><span class='line'>
</span><span class='line'><span class="n">tlearn</span><span class="o">.</span><span class="n">fitness</span><span class="p">(</span><span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="o">]</span><span class="p">,</span> <span class="n">sweeps</span> <span class="o">=</span> <span class="mi">200</span><span class="p">)</span>
</span><span class='line'><span class="c1"># =&gt; [0.2, 0.9]</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Wait! What does that output mean?</h3>

<p>In our example we had 2 outputs. The result we get from running the fitness test are the final weights:</p>

<pre><code>[0.2, 0.9]
</code></pre>

<p>In this example we can think of the first output as rank 1, and the second output as rank 2. We look at which has the highest weighting in the fitness test, In this case it shows us that the input &ldquo;000&rdquo; has rank 2. So really we can map the output to many different classifications.</p>

<h3>How is state reset?</h3>

<p>Tlearn resets the state for each list of elements</p>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="o">[</span><span class="p">{</span><span class="o">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="o">]</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="o">]</span><span class="p">},</span> <span class="p">{</span><span class="o">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">0</span><span class="o">]</span> <span class="o">=&gt;</span> <span class="o">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="o">]</span><span class="p">}</span><span class="o">]</span><span class="p">,</span>
</span><span class='line'><span class="c1"># State will be reset here</span>
</span><span class='line'><span class="o">[</span><span class="p">{</span><span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">1</span><span class="o">]</span>  <span class="o">=&gt;</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">0</span><span class="o">]</span><span class="p">}</span><span class="o">]</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Wait! What the heck does all that config mean?</h3>

<p>Part of the work of using Neural networks is finding the right configuration settings. TLearn supports a lot of different options. Lets look at what all that  configuration options means. (Checkout the <a href="https://github.com/josephwilk/tlearn-rb#configuring-tlearn-what-the-heck-does-all-that-config-mean">TLearn Github Readme</a> for full details of the config options):</p>

<pre><code>:number_of_nodes =&gt; 10
</code></pre>

<p>The total number of nodes in this network (not including input nodes)</p>

<pre><code>:'output_nodes'    =&gt; 5..6
</code></pre>

<p>Which nodes are used for output.</p>

<pre><code>:linear          =&gt; 7..10
</code></pre>

<p>Nodes 7 to 10 are linear. This defines the activation function of the nodes. The activation function is how all the weights and input are combined for a node to create an output. Linear nodes output the inner-product of the input and weight vectors.</p>

<pre><code>:weight_limit    =&gt; 1.00
</code></pre>

<p>Limit of 1.0 must not be exceeded in the random initialization of weights.</p>

<h4>Connections</h4>

<p>Connections specify how all the nodes of the neural network connect. This is the architecture of the neural network. Lets look at the connection settings:</p>

<pre><code>{1..6   =&gt; 0}
</code></pre>

<p>Node 0 feeds into node 1 to 6. Node 0 is the bias node that is always 1.</p>

<p><img src="http://josephwilk.github.io/images/blog/2012/10/bias_node.png" alt="" /></p>

<pre><code> {1..4   =&gt; :i1..:i3}
</code></pre>

<p>The input nodes 1-3 feed into each node from 1 to 4.
<img src="http://josephwilk.github.io/images/blog/2012/10/inputs1.png" alt="" /></p>

<pre><code>{1..4  =&gt; 7..10},
</code></pre>

<p>Nodes nodes 7-10 feed into each node from 1 to 4
<img src="http://josephwilk.github.io/images/blog/2012/10/outout.png" alt="" /></p>

<pre><code>{5..6   =&gt; 1..4},
</code></pre>

<p>Nodes nodes 1..4 feed into each node from 5 to 6
<img src="http://josephwilk.github.io/images/blog/2012/10/outes.png" alt="" /></p>

<pre><code> {7..10  =&gt; [1..4, {:min =&gt; 1.0, :max =&gt; 1.0}, :fixed, :'one_to_one'}]
</code></pre>

<p>This connection contains a couple of special options. Rather than node 1-4 being fed into node 7, node 1 only connects with node 7, node 2 only with node 8, node 3 only with node 9, node 4 only with node 10. The <em>:&lsquo;one_to_one&rsquo;</em> option causes this.
The weights of the connections between these nodes is <em>fixed</em> at 1.0 and never changes throughout training</p>

<p><img src="http://josephwilk.github.io/images/blog/2012/10/ins.png" alt="" /></p>

<p>So put all these together our full neural network is:</p>

<p><img src="http://josephwilk.github.io/images/blog/2012/10/network-out1.png" alt="" /></p>

<h3>Urmm&hellip; So how do I know what connection settings to use?</h3>

<p>When it comes to deciding how many hidden nodes to have in your network there is a general rule:</p>

<blockquote><p>The optimal number of hidden nodes is usually between the size of the input and size of the output layers</p></blockquote>

<p>When deciding what connections to specify in your neural network you can start with everything connected to everything and slowly experiment with pruning connections/nodes which will increase the performance of your network without radically affecting the output efficiency.</p>

<p>Its important to have the bias node connect to all the nodes in the hidden layer and output. This is required so a zero input to the neural network can generate outputs other than 0.</p>

<p>With recurrent networks it is important to build connections and nodes in your network to maintain state. It is quite possible with TLearn to build a plain old neural network with no state.  It can be helpful like the example given above to draw out your state, hidden layer and output layer nodes and use this to decided how the network connects.</p>

<p>How do you decide what activation functions to use? Linear, bipolar, etc.
Checkout this great paper on the effectiveness of different functions: <a href="http://www.cscjournals.org/csc/manuscript/Journals/IJAE/volume1/Issue4/IJAE-26.pdf">http://www.cscjournals.org/csc/manuscript/Journals/IJAE/volume1/Issue4/IJAE-26.pdf</a></p>

<p>One neat (crazy) experimental (crazy) path to explore is neural network toplogies generated from using a genetic algorithm to assess the effectiveness of the network: <a href="http://www.cs.ucf.edu/~kstanley/neat.html">http://www.cs.ucf.edu/~kstanley/neat.html</a>.</p>

<h3>TLearn&rsquo;s Source</h3>

<p>If you want to peer into the heart of TLearn the source code is on Github:</p>

<pre><code>git clone git://github.com/josephwilk/tlearn-rb.git
</code></pre>

<h3>Further reading</h3>

<ul>
<li><a href="http://www.amazon.co.uk/gp/product/B00845UQL6/ref=as_li_ss_tl?ie=UTF8&amp;camp=1634&amp;creative=19450&amp;creativeASIN=B00845UQL6&amp;linkCode=as2&amp;tag=joswilblo-21">Introduction to the Math of Neural Networks</a><img src="http://www.assoc-amazon.co.uk/e/ir?t=joswilblo-21&amp;l=as2&amp;o=2&amp;a=B00845UQL6" alt="" /></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Someone is wrong]]></title>
    <link href="http://josephwilk.github.io/presentations/someone-is-wrong.html"/>
    <updated>2012-09-07T23:35:45+01:00</updated>
    <id>http://josephwilk.github.io/presentations/someone-is-wrong</id>
    <content type="html"><![CDATA[<p>Understanding Rhetoric is an essential skill for any programmer.</p>

<p>Here is my introduction talk &ldquo;Someone is wrong&rdquo;, rhetoric for programmers.</p>

<p><a href="http://programme.scottishrubyconference.com/proposals/144/video">Video from Scottish Ruby conference</a></p>

<h2>Slides</h2>

<script async class="speakerdeck-embed" data-id="4ff1e7144b8be00184011461" data-ratio="1.33333333333333" src="http://josephwilk.github.io//speakerdeck.com/assets/embed.js"></script>


<h2>Further Reading</h2>

<ul>
<li><p><a href="http://www.amazon.co.uk/gp/product/0141032588/ref=as_li_tf_tl?ie=UTF8&amp;camp=1634&amp;creative=6738&amp;creativeASIN=0141032588&amp;linkCode=as2&amp;tag=joswilblo-21">Winning Arguments: From Aristotle to Obama &ndash; Everything You Need to Know About the Art of Persuasion</a><img src="http://www.assoc-amazon.co.uk/e/ir?t=joswilblo-21&amp;l=as2&amp;o=2&amp;a=0141032588" alt="" /></p></li>
<li><p><a href="http://www.informationisbeautiful.net/visualizations/rhetological-fallacies">Rhetological Fallacies</a></p></li>
</ul>


<h2>What people said about this talk</h2>

<p><img src="http://josephwilk.github.io/images/blog/2012/09/what_they_said_double.png" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fake Execution]]></title>
    <link href="http://josephwilk.github.io/ruby/fake-execution.html"/>
    <updated>2012-08-30T17:51:07+01:00</updated>
    <id>http://josephwilk.github.io/ruby/fake-execution</id>
    <content type="html"><![CDATA[<p>A little RubyGem for faking out execution in your tests and inspecting afterwards what was run.</p>

<h2>Why FakeExecution?</h2>

<p>I&rsquo;ve been creating internal tools for developers to help improve productivity. These tools written in Ruby, ended up doing lots of shell scripting. These scripts started becoming fairly complicated so I wanted some test feedback. How could I easily test execution?</p>

<p>Enter FakeExecution.</p>

<h2>Installing</h2>

<pre><code>gem install fake_execution
</code></pre>

<h2>How do I use it?</h2>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="nb">require</span> <span class="s1">&#39;fake_execution/safe&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="no">FakeExecution</span><span class="o">.</span><span class="n">activate!</span>
</span><span class='line'>
</span><span class='line'><span class="sb">`echo *`</span> <span class="c1"># This is not executed</span>
</span><span class='line'>
</span><span class='line'><span class="sb">`git checkout git://github.com/josephwilk/fake-execution.git`</span>
</span><span class='line'><span class="sb">`touch monkeys`</span>
</span><span class='line'><span class="nb">system</span><span class="p">(</span><span class="s2">&quot;git add monkeys&quot;</span><span class="p">)</span>
</span><span class='line'><span class="nb">system</span><span class="p">(</span><span class="s1">&#39;git commit -m &quot;needs more monkeys&quot;&#39;</span><span class="p">)</span>
</span><span class='line'><span class="sb">`git push`</span>
</span><span class='line'>
</span><span class='line'><span class="no">FakeExecution</span><span class="o">.</span><span class="n">deactivate!</span>
</span><span class='line'>
</span><span class='line'><span class="n">cmds</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="n">should</span> <span class="o">=~</span> <span class="sr">/echo/</span>
</span><span class='line'><span class="n">cmds</span><span class="o">[</span><span class="mi">1</span><span class="o">].</span><span class="n">should</span> <span class="o">=~</span> <span class="sr">/git checkout/</span>
</span><span class='line'><span class="n">cmds</span><span class="o">[</span><span class="mi">2</span><span class="o">].</span><span class="n">should</span> <span class="o">==</span> <span class="s1">&#39;touch monkeys&#39;</span>
</span><span class='line'>
</span><span class='line'><span class="sb">`echo *`</span> <span class="c1"># outputs: echo *</span>
</span></code></pre></td></tr></table></div></figure>


<h2>But I use Rspec</h2>

<figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'> <span class="nb">require</span> <span class="s1">&#39;fake_execution/spec_helper&#39;</span>
</span><span class='line'>
</span><span class='line'> <span class="n">describe</span> <span class="s2">&quot;monkeys&quot;</span> <span class="k">do</span>
</span><span class='line'>   <span class="kp">include</span> <span class="ss">FakeExecution</span><span class="p">:</span><span class="ss">:SpecHelpers</span>
</span><span class='line'>
</span><span class='line'>   <span class="n">it</span> <span class="s2">&quot;should touch the monkey&quot;</span> <span class="k">do</span>
</span><span class='line'>     <span class="sb">`touch monkey`</span>
</span><span class='line'>
</span><span class='line'>     <span class="n">cmds</span><span class="o">[</span><span class="mi">0</span><span class="o">].</span><span class="n">should</span> <span class="o">==</span> <span class="s1">&#39;touch monkey&#39;</span>
</span><span class='line'>   <span class="k">end</span>
</span><span class='line'> <span class="k">end</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Source code</h2>

<p><a href="http://github.com/josephwilk/fake_execution">http://github.com/josephwilk/fake_execution</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Conferences and the Cult of Celebrity]]></title>
    <link href="http://josephwilk.github.io/conferences/conferences-and-the-cult-of-celebrity.html"/>
    <updated>2012-06-19T13:58:56+01:00</updated>
    <id>http://josephwilk.github.io/conferences/conferences-and-the-cult-of-celebrity</id>
    <content type="html"><![CDATA[<p>How much should character be a factor for a conference talk being selected? ¬†Big names sell conference tickets. Yet I believe that we can do a lot more to help promote conferences where content takes greater weight than character and in the process help people who have never spoken before start speaking at conferences.</p>

<h2>Risk.</h2>

<p>Conference¬†organisers¬†take a big risk running a conference.</p>

<p>Will they cover their venue cost?</p>

<p>Which ultimately leads on to will they sell enough tickets?</p>

<p>Once they have enough tickets, will it be a good conference?</p>

<p>Other successful conferences define a pattern of how a conference is¬†laid¬†out. One obviously way of dealing with Risk is to follow an example of a success.</p>

<p>I really respect people who organise conferences, they are putting a lot of effort and their own time to make a successful event.</p>

<p>But I wondering if maybe we could be focusing more on content and less on character.</p>

<h2>Selling a presentation</h2>

<p>When you submit a talk an aspect of¬†convincing the¬†organisers¬†to allow you to talk is who you are. Persuasion by character (Ethos if you like your ancient Greek).</p>

<p>Most submissions forms give you plenty of space to sell yourself.</p>

<p><img src="http://josephwilk.github.io/images/blog/2012/06/example_submission.png" alt="" /></p>

<h2>Content not character.</h2>

<p><img src="http://josephwilk.github.io/images/blog/2012/06/nordicruby1.png" alt="" /></p>

<p>For NordicRuby 2012 the¬†organisers took a step pushing for interesting content over character. They recognised that conscious and¬†subconscious¬†persuasion by character is a powerful means of¬†convincing.</p>

<p>During most of their reviewing process <strong>they removed all the names from the proposals</strong>.</p>

<blockquote><p><em>&ldquo;Another thing we‚Äôre doing differently this year is that we‚Äôre starting out with anonymous proposals. Each card in Trello just shows the proposal‚Äôs title and description. No information about the speaker. We do this to avoid bias in the first stages.&rdquo;</em></p></blockquote>

<p>Talks where selected based on the content. Only later once the talks had been¬†whittled¬†down did they introduce the speaker names. Character was¬†considered, it was just delayed to the late selection stage.</p>

<p>This tweet caught my attention as it highlighted that for Jsconf.com.au proposals are selected without names attached. Content is king, character does not matter!</p>

<p><img src="http://josephwilk.github.io/images/blog/2012/06/tweet.png" alt="" /></p>

<p>Lonestar Ruby conference submissions, your name, your email, no big bio to sell how great you are. Content rules.</p>

<p><img src="http://josephwilk.github.io/images/blog/2012/06/logo-adjusted-7293a1d3bfb1dac006dd14619c2efe07.png" alt="" /></p>

<p><img src="http://josephwilk.github.io/images/blog/2012/06/Screen-Shot-2012-06-18-at-13.53.08.png" alt="" /></p>

<h2>Keynotes: where character is King</h2>

<p>The keynote of a conference is the stable diet of most conferences. Its where the big names are rolled out, luminaries of our industry share their wise thoughts with us.</p>

<p>Akin to live music, they are the¬†headline¬†act we pay for, the others are the ¬†support acts. We might skip them, or give them half of our attention.</p>

<p><strong>What effect does having two tiers of talks at a conference have?</strong></p>

<p>The keynote talk is more important¬†irrelevant¬†of content because of the <strong>character of the speaker</strong>. Often we don&rsquo;t even know what they will be talking about, just that they are keynoting.</p>

<p>Some examples (I&rsquo;m not focusing any blame on these examples, I respect the conferences and the organisers¬†involved. They just help illustrate my point)</p>

<p><img src="http://josephwilk.github.io/images/blog/2012/06/Screen-Shot-2012-06-19-at-13.11.59.png" alt="" /></p>

<p><a href="http://josephwilk.github.io/images/blog/2012/06/Screen-Shot-2012-06-18-at-14.23.55.png"><img src="http://josephwilk.github.io/images/blog/2012/06/Screen-Shot-2012-06-18-at-14.23.55.png" alt="" /></a></p>

<p>We assume (based on¬†authority) that important people will have important things to tell us (and sometimes they do have important ideas to share with us).</p>

<p>Are the other, non-keynote talks of the conference of lesser importance? This is where content starts to win because all these speakers are non-keynoters, we don&rsquo;t have as many leading assumptions about their authority or character. <strong>We go to the talks where the content interests us.</strong></p>

<p>Maybe all talks should be driven by the¬†<strong>content</strong> and less by¬†<strong>character</strong>. Maybe all talks are as important as each other.</p>

<p>Conferences are already starting to kill of this idea of having to have a Keynote to sell your conference. FutureRuby and NordicRuby are two examples of conferences that have no Keynote yet produced conferences that are highly regarded by those who attended.</p>

<p><strong>Will a keynote really make your conference better?</strong></p>

<h2>The Content Conference</h2>

<p>Lets see if we can take this a step further and define the content conference.</p>

<ol>
<li><p>Talks authors are not revealed during review/selection. (There is <strong>no bias by character</strong>)</p></li>
<li><p>Only publish the talk titles and content on the conference website. (Sell the conference on its¬†<strong>content not its characters</strong>.)</p></li>
<li><p>No keynotes. <strong>All talks are equal</strong>.</p></li>
</ol>


<h2>Conference Mentors</h2>

<p>If we want to focus on content and remove character (as much as possible) we have to deal with people with little experience but with great ideas. We need to help make it easier to give feedback and help mentor those people so they can best express their ideas.</p>

<p><strong>Being accepted to speak is not the end of contact its the start</strong>.</p>

<p>A group of experience speakers acting as mentors who give feedback and help people give the best presentations they can.</p>

<h2>Final Words</h2>

<p>There is a place in the conference world for events which focus on bringing big names to an audience. Looking back at the 30 conferences I&rsquo;ve spoken at so far I&rsquo;ve come to the¬†conclusion¬†that the conferences I really valued where those that pushed for content over character. Conferences are popping up all the time that follow the content conference ideas and <strong>understand the concious and subconsious bias of character</strong>.</p>

<p>I feel if we try and push for content over character and improve the proposal/speaker setup we can help find new¬†people with great, interesting, crazy ideas and encourage them to submit proposals and speak.</p>

<p>I hope these ideas about the content conference might help conference organisers think about how they structure their conference and proposal system.</p>

<p><strong>I am offering my time to mentor anyone who wants help writing their first conference proposal</strong>.</p>

<p>I am also happy to join any conference that wants a set of¬†experienced¬†speakers to help new speakers get the best out of their presentations.</p>

<p>Crazy, huh?</p>

<p>So what do you think?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[A little bit of Pig]]></title>
    <link href="http://josephwilk.github.io/big-data/a-little-bit-of-pig.html"/>
    <updated>2012-06-11T17:35:41+01:00</updated>
    <id>http://josephwilk.github.io/big-data/a-little-bit-of-pig</id>
    <content type="html"><![CDATA[<p>Currently in the Science team at Songkick I&rsquo;ve been working with Apache Pig to generate lots of interesting metrics for our business intelligence. We use Amazon&rsquo;s MapReduce and Pig to avoid having to run complex, long running and intensive queries on our live db, we can run them on Amazon in a timely fashion instead. So lets dive into Pig and how we use it at Songkick.com.</p>

<h2>Pig (whats with all these silly names)</h2>

<p>The Apache project Pig is a data flow language designed for analysing large datasets. It provides¬†a high-level platform for creating MapReduce programs used with¬†<em>Hadoop. </em>A little bit like SQL but¬†Pig&rsquo;s programs by their structure are suitable for¬†<strong>parallelization</strong>, which is why they are great at ¬†handling very large data sets.</p>

<p><img src="http://josephwilk.github.io/images/blog/2012/05/pig-300x284.gif" alt="" /></p>

<p>Heres how we use Pig and ElasticMapReduce at Songkick in our Science team.</p>

<h2>Data (Pig food)</h2>

<p><img src="http://josephwilk.github.io/images/blog/2012/06/pig_eating.png" alt="" /></p>

<p>Lets start by uploading some huge and¬†interesting¬†data about Songkicks artists onto S3.¬†We start by dumping a table from mysql (along with a lot of other tables) and then query that data with Pig on Hadoop. While we could¬†extract¬†all the artist data by querying the live table its actually faster to use mysqldump and dump the table as a TSV file.</p>

<p>For example it took 35 minutes to dump our artist table with a sql query &lsquo;select * from artists&rsquo;. It takes 10 minutes to dump the entire table with mysqldump.</p>

<p>We format the table dump as a TSV which we push to S3 as that makes it super easy to use Amazons ElasticMapReduce with Pig.</p>

<pre><code>shell&gt; mysqldump --user=joe --password ¬†--fields-optionally-enclosed-by='"'
                  --fields-terminated-by='\t' --tab /tmp/path_to_dump/ songkick artist_trackings
</code></pre>

<p>Unfortunately this has to be run on the db machine since mysqldump needs access to the file system to save the data. If this is a problem for you there is a Ruby script for dumping tables to TSV: <a href="http://github.com/apeckham/mysqltsvdump/blob/master/mysqltsvdump.rb">http://github.com/apeckham/mysqltsvdump/blob/master/mysqltsvdump.rb</a></p>

<h2>Launching (Pig¬†catapult)</h2>

<p><img src="http://josephwilk.github.io/images/blog/2012/06/flying_pig.png" alt="" /></p>

<p>We will be using Amazons Elastic MapReduce to run our Pig scripts. We can start our job in interactive Pig mode which allows us to¬†ssh to the box and run the pig script line by line.</p>

<p><img src="http://josephwilk.github.io/images/blog/2012/05/aws_pig.png" alt="" /></p>

<h2>Examples (Dancing Pigs)</h2>

<p><img src="http://josephwilk.github.io/images/blog/2012/06/dancing_pigs1.jpg" alt="" /></p>

<p>An important thing to note when running pig scripts interactively is that they defer execution until they have to expose a result. This means you can get nice schema checks and validations helping ensure your PIG script is valid without actually executing it over your large dataset.</p>

<p>We are going to try and calculate the average number of users tracking an artist based on the condition that we only count users who logged in, in the last 30 days.</p>

<p>This is what our Pig script is doing:</p>

<p><img src="http://josephwilk.github.io/images/blog/2012/06/query6.png" alt="" /></p>

<p>The Pig script:</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-- Define some useful dates we will use later
</span><span class='line'>%default TODAYS_DATE `date  +%Y/%m/%d`
</span><span class='line'>%default 30_DAYS_AGO `date -d "$TODAYS_DATE - 30 day" +%Y-%m-%d`
</span><span class='line'>    
</span><span class='line'>-- Pig is smart enough when given a folder to go and find files, decompress them if¬†necessarily¬†and load them.
</span><span class='line'>-- Note we have to specify the schema as PIG does not know know this from our TSV file.
</span><span class='line'>trackings = LOAD 's3://songkick/db/trackings/$TODAYS_DATE/' AS (id:int, artist_id:int,  user_id:int);¬†
</span><span class='line'>users = LOAD 's3://songkick/db/users/$TODAYS_DATE/' AS (id:int, username:chararray, last_logged_in_at:chararray);</span></code></pre></td></tr></table></div></figure>


<pre><code>trackings
&lt;1, 1, 1&gt;
&lt;2, 1, 2&gt;

users
&lt;1,'josephwilk', '11/06/2012'&gt;
&lt;2,'elisehuard', '11/06/2012'&gt;
&lt;3,'tycho', '11/06/2010'&gt;
</code></pre>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-- Filter users to only those who logged in, in the last 30 days
</span><span class='line'>    -- Pig does not understand dates, so just treat them as strings
</span><span class='line'>    active_users = FILTER users by last_logged_in_at gte '$30_DAYS_AGO'</span></code></pre></td></tr></table></div></figure>


<pre><code>Users
&lt;1,'josephwilk', '11/06/2012'&gt;
&lt;2,'elisehuard', '11/06/2012'&gt;
</code></pre>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>active_users_and_trackings = JOIN active_users BY id, trackings BY user_id
</span><span class='line'>    
</span><span class='line'>    -- group all the users tracking an artists so we can count them.
</span><span class='line'>    active_users_and_trackings_grouped = GROUP active_users_and_trackings BY active_users::user_id;</span></code></pre></td></tr></table></div></figure>


<pre><code>&lt;1, 1, /\{&lt;1,'josephwilk', '11/06/2012'&gt;, &lt;2,'elisehuard', '11/06/2012'&gt;\/}&gt;`
</code></pre>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>trackings_per_artist = FOREACH active_users_and_trackings_grouped GENERATE group, COUNT($2) as number_of_trackings;</span></code></pre></td></tr></table></div></figure>


<pre><code>`&lt;\/{&lt;1,'josephwilk', '11/06/2012'&gt;, &lt;2,'elisehuard', '11/06/2012'&gt;\/}, 2&gt;`
</code></pre>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-- group all the counts so we can calculate the average
</span><span class='line'>    all_trackings_per_artist = GROUP trackings_per_artist ALL;</span></code></pre></td></tr></table></div></figure>


<pre><code>&lt;\/{\/{&lt;1,'josephwilk', '11/06/2012'&gt;, &lt;2,'elisehuard', '11/06/2012'&gt;\/}, 2\/}&gt;
</code></pre>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>-- Calculate the average
</span><span class='line'>    average_artist_trackings_per_active_user = FOREACH all_trackings_per_artist
</span><span class='line'>      GENERATE '$DATE' as dt, AVG(trackings_per_artist.number_of_trackings);</span></code></pre></td></tr></table></div></figure>


<pre><code>&lt;{&lt;'11/062012', 2&gt;}&gt;
</code></pre>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>--Now we have done the work store the result in S3.
</span><span class='line'>    STORE average_artist_trackings_per_active_user INTO
</span><span class='line'>      's3://songkick/stats/average_artist_trackings_per_active_user/$TODAYS_DATE'</span></code></pre></td></tr></table></div></figure>


<h2>Debugging Pigs (Pig autopsy)</h2>

<p><img src="http://josephwilk.github.io/images/blog/2012/06/pig_insides.png" alt="" />
In an interactive pig session there are two useful commands for debugging:
<strong>DESCRIBE</strong> to see the schema.
<strong>ILLUSTRATE</strong> to see the schema with sample data:</p>

<pre><code>DESCRIBE users;
users: {id:int, username:chararray, created_at:chararray, trackings:int}

ILLUSTRATE users;
----------------------------------------------------------------------
| users   | id: int | username:chararray | created_at | trackings:int |
----------------------------------------------------------------------
|         | 18      | Joe                | 10/10/13   | 1000          |
|         | 20      | Elise              | 10/10/14   | 2300          |
----------------------------------------------------------------------
</code></pre>

<h2>Automating Elastic MapReduce (Pig robots)</h2>

<p><img src="http://josephwilk.github.io/images/blog/2012/06/pig_robot.png" alt="" /></p>

<p>Once you are happy with your script you&rsquo;ll want to automate all of this. I currently do this by having a cron task which at regular intervals uses the  elastic-mapreduce-ruby lib to fire up a elastic map reduce job and run it with the pig script to execute.</p>

<p>Its important to note that I <em>store the pig scripts on S3</em> so its easy for elastic-mapreduce to find the scripts.</p>

<p>Follow the instructions to install elastic-mapreduce-ruby: <a href="https://github.com/tc/elastic-mapreduce-ruby">https://github.com/tc/elastic-mapreduce-ruby</a></p>

<p>To avoid having to call elastic-mapreduce with 100s of arguments a colleague has written a little python wrapper to make it quick and easy to use: <a href="https://gist.github.com/2911006">https://gist.github.com/2911006</a></p>

<p>You&rsquo;ll need to configure where you&rsquo;re elastic-mapreduce tool is installed AND where you want elastic map-reduce to log to on S3 (this means you can debug your elastic map reduce job if things go wrong!).</p>

<p>Now all we need to do is pass the script the path to the pig script on S3.</p>

<pre><code>./emrjob s3://songkick/lib/stats/pig/average_artist_trackings_per_active_user.pig
</code></pre>

<h2>Testing with PigUnit (Simulating Pigs)</h2>

<p><img src="http://josephwilk.github.io/images/blog/2012/06/virtual_pig.png" alt="" /></p>

<p>Pig scripts can still take a long time to run even with all that Hadoop magic. Thankfully there is a testing framework PigUnit.</p>

<p><a href="http://pig.apache.org/docs/r0.8.1/pigunit.html#Overview">http://pig.apache.org/docs/r0.8.1/pigunit.html#Overview</a></p>

<p>Unfortunately this is where you have to step into writing Java. So I skipped it. Sshhh.</p>

<h2>References</h2>

<ol>
<li><p> Apache Pig¬†official¬†site:¬†<a href="http://pig.apache.org/">http://pig.apache.org</a></p></li>
<li><p> Nearest Neighbours with Apache Pig and JRuby: <a href="http://thedatachef.blogspot.co.uk/2011/10/nearest-neighbors-with-apache-pig-and.html">http://thedatachef.blogspot.co.uk/2011/10/nearest-neighbors-with-apache-pig-and.html </a></p></li>
<li><p> Helpers for messing with Elastic MapReduce in Ruby¬†<a href="https://github.com/tc/elastic-mapreduce-ruby">https://github.com/tc/elastic-mapreduce-ruby</a></p></li>
<li><p> mysqltsvdump <a href="http://github.com/apeckham/mysqltsvdump/blob/master/mysqltsvdump.rb">http://github.com/apeckham/mysqltsvdump/blob/master/mysqltsvdump.rb</a></p></li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Examples alone are not a Specification]]></title>
    <link href="http://josephwilk.github.io/cucumber/examples-are-not-a-specification.html"/>
    <updated>2012-02-24T14:25:30+00:00</updated>
    <id>http://josephwilk.github.io/cucumber/examples-are-not-a-specification</id>
    <content type="html"><![CDATA[<p>The Gherkin syntax used by Cucumber enforces that Feature files contain scenarios which are examples of the behaviour of a feature. However Gherkin has no constraints on if there is a specification present. Examples are great at helping us understand specifications but¬†<strong>they are not specifications themselves</strong>.</p>

<p>What do we mean when we say specification?</p>

<p><em>definition: A detailed, exact statement of particulars</em></p>

<p>In a Gherkin feature the specification lives here:</p>

<p><img src="http://josephwilk.github.io/images/blog/2012/02/spec7.png" alt="" /></p>

<p>Lets look at a real example:</p>

<h2>A Feature with just Examples</h2>

<p>A Cucumber example based on a feature  (which I have modified) from the test library Rspec <a href="https://github.com/rspec/rspec-expectations">rspec-expectations</a>:</p>

<pre><code>Feature: be_within matcher
  Scenario: basic usage
  Given a file named "be_within_matcher_spec.rb" with:
  """
  describe 27.5 do
  it { should be_within(0.5).of(27.9) }
  it { should be_within(0.5).of(27.1) }
  it { should_not be_within(0.5).of(28) }
  it { should_not be_within(0.5).of(27) }
  # deliberate failures
  it { should_not be_within(0.5).of(27.9) }
  it { should_not be_within(0.5).of(27.1) }
  it { should be_within(0.5).of(28) }
  it { should be_within(0.5).of(27) }
  end
  """
  When I run `rspec be_within_matcher_spec.rb`
  Then the output should contain all of these:
  | 8 examples, 4 failures                     |
  | expected 27.5 not to be within 0.5 of 27.9 |
  | expected 27.5 not to be within 0.5 of 27.1 |
  | expected 27.5 to be within 0.5 of 28       |
  | expected 27.5 to be within 0.5 of 27       |
</code></pre>

<p>So where is the explanation of what <em>be_within</em> does? If I want to know how <em>be_within</em> works I want a single concise explanation not 5/6 different examples. Examples add value later to validate that specification.</p>

<h2>A Feature with both Specification and Examples</h2>

<p>Lets add back in the specification part of the Feature. <em>drum roll</em></p>

<pre><code>Feature: be_within matcher

  Normal equality expectations do not work well for floating point values.
  Consider this irb session:

      &gt; radius = 3
        =&gt; 3 
      &gt; area_of_circle = radius * radius * Math::PI
        =&gt; 28.2743338823081 
      &gt; area_of_circle == 28.2743338823081
        =&gt; false 

  Instead, you should use the be_within matcher to check that the value
  is within a delta of your expected value:

      area_of_circle.should be_within(0.1).of(28.3)

  Note that the difference between the actual and expected values must be
  smaller than your delta; if it is equal, the matcher will fail.

  Scenario: basic usage
    Given a file named "be_within_matcher_spec.rb" with:
      """
      describe 27.5 do
        it { should be_within(0.5).of(27.9) }
        it { should be_within(0.5).of(27.1) }
        it { should_not be_within(0.5).of(28) }
        it { should_not be_within(0.5).of(27) }

        # deliberate failures
        it { should_not be_within(0.5).of(27.9) }
        it { should_not be_within(0.5).of(27.1) }
        it { should be_within(0.5).of(28) }
        it { should be_within(0.5).of(27) }
      end
      """
    When I run `rspec be_within_matcher_spec.rb`
    Then the output should contain all of these:
      | 8 examples, 4 failures                     |
      | expected 27.5 not to be within 0.5 of 27.9 |
      | expected 27.5 not to be within 0.5 of 27.1 |
      | expected 27.5 to be within 0.5 of 28       |
      | expected 27.5 to be within 0.5 of 27       |
</code></pre>

<p>Thats better, we can get an explanation of why this method exists and how to use it.</p>

<h2>Imagine RSpec without the specification</h2>

<p>I think of a Cucumber feature without a specification much like an Rspec example without any English sentence/description.</p>

<pre><code>context "" do
  it "" do
    user = Factory(:user)
    user.generate_password
    user.activate

    get "/session/new", :user_id =&gt; user.id

    last_response.should == "Welcome #{user.name}"
  end
end
</code></pre>

<p>Feels a little odd doesn&rsquo;t it.</p>

<h2>Cucumber Features as Documentation (for real)</h2>

<p>Rspec is an example of a project that has taken its Cucumber features and <a href="https://www.relishapp.com/rspec">published them as its documentation</a>. Just browse through those features and it quickly highlights how important it is to have a specification as well as examples. Imagine an API with nothing but examples, leaving you the detective work of trying to work out what the thing actually does.</p>

<p>Documentation needs to explain/specify what something does as well provide examples. If you really want anyone to read your feature provide both examples and a specification.</p>
]]></content>
  </entry>
  
</feed>
